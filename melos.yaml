name: catalyst_voices
repository: https://github.com/input-output-hk/catalyst-voices

packages:
  - catalyst_voices
  - catalyst_voices/packages/**
  - catalyst_voices_packages/**
  - utilities/*

command:
  version:
    linkToCommits: true
    workspaceChangelog: true
  bootstrap:
    environment:
      sdk: ">=3.3.0 <4.0.0"
      flutter: 3.19.5
    dependencies:
      bloc_concurrency: ^0.2.2
      bloc: ^8.1.2
      collection: ^1.17.1
      equatable: ^2.0.5
      formz: ^0.7.0
      meta: ^1.10.0
      result_type: ^0.2.0
      plugin_platform_interface: ^2.1.7
    dev_dependencies:
      test: ^1.24.9
      build_runner: ^2.3.3
      mocktail: ^1.0.1

scripts:
  metrics:
    run: |
      melos exec -c 1 -- \
        flutter pub run dart_code_metrics:metrics analyze
    description: |
      Run `dart_code_metrics` in all packages.
      - Note: you can also rely on your IDEs Dart Analysis / Issues window.

  format:
    run: |
      melos exec -c 1 --dir-exists="lib" -- dart format lib --fix
      melos exec -c 1 --dir-exists="test" -- dart format test --fix
      melos exec -c 1 --dir-exists="integration_test" -- dart format integration_test --fix
    description: Run `dart format` for all packages.

  format-check:
    run: |
      melos exec -c 1 --dir-exists="lib" -- dart format lib  --set-exit-if-changed
      melos exec -c 1 --dir-exists="test" -- dart format test  --set-exit-if-changed
      melos exec -c 1 --dir-exists="integration_test" -- dart format integration_test  --set-exit-if-changed
    description: Run `dart format` checks for all packages.

  test:select:
    run: |
      melos exec -c 1 --dir-exists="test" -- flutter test
    description: Run `flutter test` for selected packages.

  test:
    run: |
      melos run test:select --no-select
    description: Run `flutter test` for all packages.

  test-report:
    run: |
      # cleanup from previous build and create new folders
      rm -fR $MELOS_ROOT_PATH/test_reports
      mkdir $MELOS_ROOT_PATH/test_reports

      # run tests, generate junit reports in /test_reports/ & code coverage report
      melos exec -c 1 --dir-exists="test" -- \
       "flutter test --reporter expanded --coverage --machine | tojunit --output MELOS_ROOT_PATH/test_reports/MELOS_PACKAGE_NAME.junit-report.xml"

      # removes code coverage for generated code
      melos exec -c 1 --dir-exists="test" -- \
        lcov --remove coverage/lcov.info -o coverage/lcov.info --ignore-errors unused,unused \
        '*.swagger.dart' \
        '*.chopper.dart' \
        '*.g.dart' \
        '*.freezed.dart' \
        'lib/generated/**'

      # converts coverage to a HTML report
      melos exec -c 1 --dir-exists="test" -- \
        "genhtml coverage/lcov.info --output-directory=coverage/"
    description: |
      Run `flutter test` for all packages and generate junit and coverage reports.
      The test reports are saved in /test_reports folder.
      The coverages are saved for each package separately in /coverage folder.
