name: catalyst_voices
repository: https://github.com/input-output-hk/catalyst-voices

packages:
  - catalyst_voices
  - catalyst_voices/uikit_example
  - catalyst_voices/packages/**
  - catalyst_voices_packages/**
  - utilities/**

permittedLicenses:
  - MIT
  - Apache-2.0
  - Unicode-DFS-2016
  - BSD-3-Clause
  - BSD-2-Clause
  - BlueOak-1.0.0
  - Apache-2.0 WITH LLVM-exception
  - CC0-1.0

packageLicenseOverride:
  fuchsia_remote_debug_protocol: BSD-3-Clause
  flutter_driver: BSD-3-Clause
  flutter_localizations: BSD-3-Clause
  flutter_test: BSD-3-Clause
  flutter_web_plugins: BSD-3-Clause
  integration_test: BSD-3-Clause
  rxdart: Apache-2.0
  vector_math: Apache-2.0
  sky_engine: Apache-2.0
  flutter_gen: MIT
  # catalyst packages
  catalyst_analysis: Apache-2.0
  catalyst_cose: Apache-2.0
  catalyst_cardano_serialization: Apache-2.0
  catalyst_cardano_platform_interface: Apache-2.0
  catalyst_compression: Apache-2.0
  catalyst_compression_web: Apache-2.0
  catalyst_cardano_web: Apache-2.0
  catalyst_compression_platform_interface: Apache-2.0
  catalyst_voices_assets: Apache-2.0
  catalyst_voices_assets_example: Apache-2.0
  catalyst_cardano: Apache-2.0
  catalyst_cardano_example: Apache-2.0
  catalyst_voices_localization: Apache-2.0
  catalyst_voices_models: Apache-2.0
  example: Apache-2.0
  catalyst_voices_remote_widgets: Apache-2.0
  remote_widgets_example: Apache-2.0
  catalyst_voices_view_models: Apache-2.0
  catalyst_voices_blocs: Apache-2.0
  catalyst_voices_shared: Apache-2.0
  catalyst_voices_brands: Apache-2.0
  catalyst_voices_services: Apache-2.0
  poc_local_storage: Apache-2.0
  catalyst_voices_repositories: Apache-2.0
  catalyst_voices: Apache-2.0
  uikit_example: Apache-2.0

packageSourceOverride:
  fuchsia_remote_debug_protocol: https://github.com/flutter/flutter/blob/main/LICENSE
  flutter_driver: https://github.com/flutter/flutter/blob/main/LICENSE
  flutter_localizations: https://github.com/flutter/flutter/blob/main/LICENSE
  flutter_test: https://github.com/flutter/flutter/blob/main/LICENSE
  flutter_web_plugins: https://github.com/flutter/flutter/blob/main/LICENSE
  integration_test: https://github.com/flutter/flutter/blob/main/LICENSE
  rxdart: https://github.com/ReactiveX/rxdart/blob/master/LICENSE
  vector_math: https://github.com/google/vector_math.dart/blob/master/LICENSE
  sky_engine: https://github.com/flutter/engine/blob/main/sky/packages/sky_engine/LICENSE
  flutter_gen: https://github.com/FlutterGen/flutter_gen/blob/main/LICENSE

command:
  version:
    linkToCommits: true
    workspaceChangelog: true
  bootstrap:
    runPubGetInParallel: true
    environment:
      sdk: ">=3.5.0 <4.0.0"
      flutter: ">=3.24.1"
    dependencies:
      asn1lib: ^1.5.3
      bip39: ^1.0.6
      bloc_concurrency: ^0.2.2
      collection: ^1.18.0
      cryptography: ^2.7.0
      ed25519_hd_key: ^2.3.0
      equatable: ^2.0.5
      flutter_bloc: ^8.1.5
      flutter_localized_locales: ^2.0.5
      flutter_quill: ^10.5.13
      flutter_quill_extensions: ^10.5.13
      flutter_secure_storage: ^9.2.2
      formz: ^0.7.0
      intl: ^0.19.0
      logging: ^1.2.0
      meta: ^1.10.0
      result_type: ^0.2.0
      password_strength: ^0.2.0
      plugin_platform_interface: ^2.1.7
      bech32: ^0.2.2
      bip32_ed25519: ^0.6.0
      cbor: ^6.2.0
      convert: ^3.1.1
      pinenacl: ^0.6.0
      ulid: ^2.0.0
      sentry_flutter: ^8.8.0
      # TODO(dtscalac): win32 dependency is just a transitive dependency and shouldn't be imported
      # but here we import it explicitly to make sure the latest version is used which addresses
      # the problem from here: https://github.com/jonataslaw/get_cli/issues/263
      win32: ^5.5.4
      web: ^1.0.0
    dev_dependencies:
      test: ^1.24.9
      build_runner: ^2.4.12
      mocktail: ^1.0.1

scripts:
  l10n:
    run: |
      melos exec -c 1 --scope="catalyst_voices_localization" -- flutter gen-l10n
    description: |
      Run `flutter gen-l10n` in catalyst_voices_localization package to generate l10n bindings.

  build_runner:
    run: |
      melos exec -c 1 \
      --depends-on="build_runner" \
      --ignore="catalyst_voices_services" -- \
          dart run build_runner build --delete-conflicting-outputs
    description: |
      Run `build_runner` in every package which contains the build_runner dependency.
      The catalyst_voices_services is skipped because to run a build_runner there you
      must generate first swagger docs (see related Earthfile).

  metrics:
    run: |
      melos exec -c 1 -- \
        flutter pub run dart_code_metrics:metrics analyze
    description: |
      Run `dart_code_metrics` in all packages.
      - Note: you can also rely on your IDEs Dart Analysis / Issues window.

  format-apply:
    run: |
      melos exec -c 1 --dir-exists="lib" -- "find . -name "*.dart" ! -name "*.g.dart" ! -path '*/generated/*' | tr '\n' ' ' | xargs dart format --fix" &&
      melos exec -c 1 --dir-exists="test" -- "find . -name "*.dart" ! -name "*.g.dart" ! -path '*/generated/*' | tr '\n' ' ' | xargs dart format --fix" &&
      melos exec -c 1 --dir-exists="integration_test" -- "find . -name "*.dart" ! -name "*.g.dart" ! -path '*/generated/*' | tr '\n' ' ' | xargs dart format --fix"
    description: Run `dart format` for all packages.

  format-check:
    run: |
      melos exec -c 1 --dir-exists="lib" -- "find . -name "*.dart" ! -name "*.g.dart" ! -path '*/generated/*' | tr '\n' ' ' | xargs dart format --output none --set-exit-if-changed" &&
      melos exec -c 1 --dir-exists="test" -- "find . -name "*.dart" ! -name "*.g.dart" ! -path '*/generated/*' | tr '\n' ' ' | xargs dart format --output none --set-exit-if-changed" &&
      melos exec -c 1 --dir-exists="integration_test" -- "find . -name "*.dart" ! -name "*.g.dart" ! -path '*/generated/*' | tr '\n' ' ' | xargs dart format --output none --set-exit-if-changed"
    description: Run `dart format` checks for all packages.

  license-check:
    run: |
      melos exec -- lic_ck check-licenses -c $MELOS_ROOT_PATH/melos.yaml -i
    description: Run `lic_ck` checks for all packages.

  test:select:
    run: |
      melos exec -c 1 --dir-exists="test" -- flutter test
    description: Run `flutter test` for selected packages.

  test:
    run: |
      melos run test:select --no-select
    description: Run `flutter test` for all packages.

  test-report:
    run: |
      # cleanup from previous build and create new folders
      rm -fR $MELOS_ROOT_PATH/test_reports
      mkdir $MELOS_ROOT_PATH/test_reports

      # run tests, generate junit reports in /test_reports/ & code coverage report
      melos exec -c 1 --dir-exists="test" -- \
       "flutter test --reporter expanded --coverage --machine | tojunit --output $MELOS_ROOT_PATH/test_reports/MELOS_PACKAGE_NAME.junit-report.xml"

      # removes code coverage for generated code
      melos exec -c 1 --dir-exists="test" -- \
        lcov --remove coverage/lcov.info -o coverage/lcov.info --ignore-errors unused,unused \
        '*.swagger.dart' \
        '*.chopper.dart' \
        '*.g.dart' \
        '*.freezed.dart' \
        'lib/generated/**'

      dart pub global run combine_coverage --repo-path=.

    description: |
      Run `flutter test` for all packages and generate junit and coverage reports.
      The test reports are saved in /test_reports folder.
      The coverages are saved for each package separately in /coverage folder.
