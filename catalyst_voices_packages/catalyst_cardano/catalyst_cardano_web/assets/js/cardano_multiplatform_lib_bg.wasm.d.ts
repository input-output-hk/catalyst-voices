/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_cip36delegation_free(a: number): void;
export function cip36delegation_to_cbor_bytes(a: number, b: number): void;
export function cip36delegation_from_cbor_bytes(a: number, b: number, c: number): void;
export function cip36delegation_to_cbor_hex(a: number, b: number): void;
export function cip36delegation_from_cbor_hex(a: number, b: number, c: number): void;
export function cip36delegation_to_json(a: number, b: number): void;
export function cip36delegation_to_js_value(a: number, b: number): void;
export function cip36delegation_from_json(a: number, b: number, c: number): void;
export function cip36delegation_voting_pub_key(a: number): number;
export function cip36delegation_weight(a: number): number;
export function cip36delegation_new(a: number, b: number): number;
export function __wbg_cip36delegationdistribution_free(a: number): void;
export function cip36delegationdistribution_to_cbor_bytes(a: number, b: number): void;
export function cip36delegationdistribution_from_cbor_bytes(a: number, b: number, c: number): void;
export function cip36delegationdistribution_to_cbor_hex(a: number, b: number): void;
export function cip36delegationdistribution_from_cbor_hex(a: number, b: number, c: number): void;
export function cip36delegationdistribution_to_json(a: number, b: number): void;
export function cip36delegationdistribution_to_js_value(a: number, b: number): void;
export function cip36delegationdistribution_from_json(a: number, b: number, c: number): void;
export function cip36delegationdistribution_new_weighted(a: number): number;
export function cip36delegationdistribution_new_legacy(a: number): number;
export function cip36delegationdistribution_kind(a: number): number;
export function cip36delegationdistribution_as_weighted(a: number): number;
export function cip36delegationdistribution_as_legacy(a: number): number;
export function __wbg_cip36delegationlist_free(a: number): void;
export function cip36delegationlist_new(): number;
export function cip36delegationlist_len(a: number): number;
export function cip36delegationlist_get(a: number, b: number): number;
export function cip36delegationlist_add(a: number, b: number): void;
export function __wbg_cip36deregistrationcbor_free(a: number): void;
export function cip36deregistrationcbor_to_json(a: number, b: number): void;
export function cip36deregistrationcbor_to_js_value(a: number, b: number): void;
export function cip36deregistrationcbor_from_json(a: number, b: number, c: number): void;
export function cip36deregistrationcbor_key_deregistration(a: number): number;
export function cip36deregistrationcbor_deregistration_witness(a: number): number;
export function cip36deregistrationcbor_new(a: number, b: number): number;
export function __wbg_cip36deregistrationwitness_free(a: number): void;
export function cip36deregistrationwitness_to_cbor_bytes(a: number, b: number): void;
export function cip36deregistrationwitness_from_cbor_bytes(a: number, b: number, c: number): void;
export function cip36deregistrationwitness_to_cbor_hex(a: number, b: number): void;
export function cip36deregistrationwitness_from_cbor_hex(a: number, b: number, c: number): void;
export function cip36deregistrationwitness_to_json(a: number, b: number): void;
export function cip36deregistrationwitness_to_js_value(a: number, b: number): void;
export function cip36deregistrationwitness_from_json(a: number, b: number, c: number): void;
export function cip36deregistrationwitness_stake_witness(a: number): number;
export function cip36deregistrationwitness_new(a: number): number;
export function __wbg_cip36keyderegistration_free(a: number): void;
export function cip36keyderegistration_to_cbor_bytes(a: number, b: number): void;
export function cip36keyderegistration_from_cbor_bytes(a: number, b: number, c: number): void;
export function cip36keyderegistration_to_cbor_hex(a: number, b: number): void;
export function cip36keyderegistration_from_cbor_hex(a: number, b: number, c: number): void;
export function cip36keyderegistration_to_json(a: number, b: number): void;
export function cip36keyderegistration_to_js_value(a: number, b: number): void;
export function cip36keyderegistration_from_json(a: number, b: number, c: number): void;
export function cip36keyderegistration_stake_credential(a: number): number;
export function cip36keyderegistration_nonce(a: number): number;
export function cip36keyderegistration_set_voting_purpose(a: number, b: number): void;
export function cip36keyderegistration_voting_purpose(a: number): number;
export function __wbg_cip36keyregistration_free(a: number): void;
export function cip36keyregistration_to_cbor_bytes(a: number, b: number): void;
export function cip36keyregistration_from_cbor_bytes(a: number, b: number, c: number): void;
export function cip36keyregistration_to_cbor_hex(a: number, b: number): void;
export function cip36keyregistration_from_cbor_hex(a: number, b: number, c: number): void;
export function cip36keyregistration_to_json(a: number, b: number): void;
export function cip36keyregistration_to_js_value(a: number, b: number): void;
export function cip36keyregistration_from_json(a: number, b: number, c: number): void;
export function cip36keyregistration_delegation(a: number): number;
export function cip36keyregistration_stake_credential(a: number): number;
export function cip36keyregistration_payment_address(a: number): number;
export function cip36keyregistration_nonce(a: number): number;
export function cip36keyregistration_set_voting_purpose(a: number, b: number): void;
export function cip36keyregistration_voting_purpose(a: number): number;
export function __wbg_cip36registrationcbor_free(a: number): void;
export function cip36registrationcbor_to_json(a: number, b: number): void;
export function cip36registrationcbor_to_js_value(a: number, b: number): void;
export function cip36registrationcbor_from_json(a: number, b: number, c: number): void;
export function cip36registrationcbor_key_registration(a: number): number;
export function cip36registrationcbor_registration_witness(a: number): number;
export function cip36registrationcbor_new(a: number, b: number): number;
export function __wbg_cip36registrationwitness_free(a: number): void;
export function cip36registrationwitness_to_cbor_bytes(a: number, b: number): void;
export function cip36registrationwitness_from_cbor_bytes(a: number, b: number, c: number): void;
export function cip36registrationwitness_to_cbor_hex(a: number, b: number): void;
export function cip36registrationwitness_from_cbor_hex(a: number, b: number, c: number): void;
export function cip36registrationwitness_to_json(a: number, b: number): void;
export function cip36registrationwitness_to_js_value(a: number, b: number): void;
export function cip36registrationwitness_from_json(a: number, b: number, c: number): void;
export function cip36registrationwitness_stake_witness(a: number): number;
export function cip36registrationwitness_new(a: number): number;
export function __wbg_cip25metadata_free(a: number): void;
export function cip25metadata_to_json(a: number, b: number): void;
export function cip25metadata_to_js_value(a: number, b: number): void;
export function cip25metadata_from_json(a: number, b: number, c: number): void;
export function cip25metadata_to_cbor_bytes(a: number, b: number): void;
export function cip25metadata_from_cbor_bytes(a: number, b: number, c: number): void;
export function cip25metadata_key_721(a: number): number;
export function cip25metadata_new(a: number): number;
export function __wbg_cip25chunkablestring_free(a: number): void;
export function cip25chunkablestring_to_cbor_bytes(a: number, b: number): void;
export function cip25chunkablestring_from_cbor_bytes(a: number, b: number, c: number): void;
export function cip25chunkablestring_to_cbor_hex(a: number, b: number): void;
export function cip25chunkablestring_from_cbor_hex(a: number, b: number, c: number): void;
export function cip25chunkablestring_to_json(a: number, b: number): void;
export function cip25chunkablestring_to_js_value(a: number, b: number): void;
export function cip25chunkablestring_from_json(a: number, b: number, c: number): void;
export function cip25chunkablestring_new_single(a: number): number;
export function cip25chunkablestring_new_chunked(a: number): number;
export function cip25chunkablestring_kind(a: number): number;
export function cip25chunkablestring_as_single(a: number): number;
export function cip25chunkablestring_as_chunked(a: number): number;
export function __wbg_cip25filesdetails_free(a: number): void;
export function cip25filesdetails_to_cbor_bytes(a: number, b: number): void;
export function cip25filesdetails_from_cbor_bytes(a: number, b: number, c: number): void;
export function cip25filesdetails_to_cbor_hex(a: number, b: number): void;
export function cip25filesdetails_from_cbor_hex(a: number, b: number, c: number): void;
export function cip25filesdetails_to_json(a: number, b: number): void;
export function cip25filesdetails_to_js_value(a: number, b: number): void;
export function cip25filesdetails_from_json(a: number, b: number, c: number): void;
export function cip25filesdetails_name(a: number): number;
export function cip25filesdetails_media_type(a: number): number;
export function cip25filesdetails_src(a: number): number;
export function cip25filesdetails_new(a: number, b: number, c: number): number;
export function __wbg_filesdetailslist_free(a: number): void;
export function filesdetailslist_len(a: number): number;
export function filesdetailslist_get(a: number, b: number): number;
export function filesdetailslist_add(a: number, b: number): void;
export function __wbg_cip25metadatadetails_free(a: number): void;
export function cip25metadatadetails_to_cbor_bytes(a: number, b: number): void;
export function cip25metadatadetails_from_cbor_bytes(a: number, b: number, c: number): void;
export function cip25metadatadetails_to_cbor_hex(a: number, b: number): void;
export function cip25metadatadetails_from_cbor_hex(a: number, b: number, c: number): void;
export function cip25metadatadetails_to_json(a: number, b: number): void;
export function cip25metadatadetails_to_js_value(a: number, b: number): void;
export function cip25metadatadetails_from_json(a: number, b: number, c: number): void;
export function cip25metadatadetails_name(a: number): number;
export function cip25metadatadetails_image(a: number): number;
export function cip25metadatadetails_set_media_type(a: number, b: number): void;
export function cip25metadatadetails_media_type(a: number): number;
export function cip25metadatadetails_set_description(a: number, b: number): void;
export function cip25metadatadetails_description(a: number): number;
export function cip25metadatadetails_set_files(a: number, b: number): void;
export function cip25metadatadetails_files(a: number): number;
export function cip25metadatadetails_new(a: number, b: number): number;
export function __wbg_cip25string64_free(a: number): void;
export function cip25string64_to_cbor_bytes(a: number, b: number): void;
export function cip25string64_from_cbor_bytes(a: number, b: number, c: number): void;
export function cip25string64_to_cbor_hex(a: number, b: number): void;
export function cip25string64_from_cbor_hex(a: number, b: number, c: number): void;
export function cip25string64_to_json(a: number, b: number): void;
export function cip25string64_to_js_value(a: number, b: number): void;
export function cip25string64_from_json(a: number, b: number, c: number): void;
export function cip25string64_get(a: number, b: number): void;
export function __wbg_cip25string64list_free(a: number): void;
export function cip25string64list_new(): number;
export function cip25string64list_len(a: number): number;
export function cip25string64list_get(a: number, b: number): number;
export function cip25string64list_add(a: number, b: number): void;
export function filesdetailslist_new(): number;
export function cip25metadata_to_metadata(a: number, b: number): void;
export function cip25metadata_from_metadata(a: number, b: number): void;
export function cip25metadata_add_to_metadata(a: number, b: number, c: number): void;
export function cip25string64_new(a: number, b: number, c: number): void;
export function cip25string64_to_str(a: number, b: number): void;
export function cip25string64_get_str(a: number, b: number): void;
export function cip25chunkablestring_from_string(a: number, b: number): number;
export function cip25chunkablestring_to_string(a: number, b: number): void;
export function __wbg_cip25minimetadatadetails_free(a: number): void;
export function cip25minimetadatadetails_to_json(a: number, b: number): void;
export function cip25minimetadatadetails_to_js_value(a: number, b: number): void;
export function cip25minimetadatadetails_from_json(a: number, b: number, c: number): void;
export function cip25minimetadatadetails_new(): number;
export function cip25minimetadatadetails_set_name(a: number, b: number): void;
export function cip25minimetadatadetails_name(a: number): number;
export function cip25minimetadatadetails_set_image(a: number, b: number): void;
export function cip25minimetadatadetails_image(a: number): number;
export function cip25minimetadatadetails_loose_parse(a: number, b: number): void;
export function __wbg_cip25labelmetadata_free(a: number): void;
export function cip25labelmetadata_to_cbor_bytes(a: number, b: number): void;
export function cip25labelmetadata_from_cbor_bytes(a: number, b: number, c: number): void;
export function cip25labelmetadata_to_cbor_hex(a: number, b: number): void;
export function cip25labelmetadata_from_cbor_hex(a: number, b: number, c: number): void;
export function cip25labelmetadata_to_json(a: number, b: number): void;
export function cip25labelmetadata_to_js_value(a: number, b: number): void;
export function cip25labelmetadata_from_json(a: number, b: number, c: number): void;
export function cip25labelmetadata_new(a: number): number;
export function cip25labelmetadata_set(a: number, b: number, c: number, d: number, e: number): void;
export function cip25labelmetadata_get(a: number, b: number, c: number): number;
export function cip25labelmetadata_version(a: number): number;
export function __wbg_mapassetnametocoin_free(a: number): void;
export function mapassetnametocoin_get(a: number, b: number, c: number): void;
export function mapassetnametocoin_insert(a: number, b: number, c: number, d: number): void;
export function mapassetnametocoin_new(): number;
export function mapassetnametocoin_len(a: number): number;
export function mapassetnametocoin_is_empty(a: number): number;
export function mapassetnametocoin_keys(a: number): number;
export function assetname_from_bytes(a: number, b: number, c: number): void;
export function assetname_from_str(a: number, b: number, c: number): void;
export function assetname_to_str(a: number, b: number): void;
export function __wbg_multiasset_free(a: number): void;
export function multiasset_new(): number;
export function multiasset_policy_count(a: number): number;
export function multiasset_insert_assets(a: number, b: number, c: number): number;
export function multiasset_get_assets(a: number, b: number): number;
export function multiasset_get(a: number, b: number, c: number, d: number): void;
export function multiasset_set(a: number, b: number, c: number, d: number, e: number): void;
export function multiasset_keys(a: number): number;
export function multiasset_checked_add(a: number, b: number, c: number): void;
export function multiasset_checked_sub(a: number, b: number, c: number): void;
export function multiasset_clamped_sub(a: number, b: number): number;
export function __wbg_mint_free(a: number): void;
export function mint_new(): number;
export function mint_policy_count(a: number): number;
export function mint_insert_assets(a: number, b: number, c: number): number;
export function mint_get_assets(a: number, b: number): number;
export function mint_get(a: number, b: number, c: number, d: number): void;
export function mint_set(a: number, b: number, c: number, d: number, e: number): void;
export function mint_keys(a: number): number;
export function mint_checked_add(a: number, b: number, c: number): void;
export function mint_checked_sub(a: number, b: number, c: number): void;
export function mint_as_positive_multiasset(a: number): number;
export function mint_as_negative_multiasset(a: number): number;
export function __wbg_value_free(a: number): void;
export function value_to_cbor_bytes(a: number, b: number): void;
export function value_from_cbor_bytes(a: number, b: number, c: number): void;
export function value_to_cbor_hex(a: number, b: number): void;
export function value_from_cbor_hex(a: number, b: number, c: number): void;
export function value_to_json(a: number, b: number): void;
export function value_to_js_value(a: number, b: number): void;
export function value_from_json(a: number, b: number, c: number): void;
export function value_from_coin(a: number): number;
export function value_new(a: number, b: number): number;
export function value_coin(a: number): number;
export function value_multi_asset(a: number): number;
export function value_zero(): number;
export function value_is_zero(a: number): number;
export function value_has_multiassets(a: number): number;
export function value_checked_add(a: number, b: number, c: number): void;
export function value_checked_sub(a: number, b: number, c: number): void;
export function value_clamped_sub(a: number, b: number): number;
export function __wbg_certificatebuilderresult_free(a: number): void;
export function __wbg_singlecertificatebuilder_free(a: number): void;
export function singlecertificatebuilder_new(a: number): number;
export function singlecertificatebuilder_skip_witness(a: number): number;
export function singlecertificatebuilder_payment_key(a: number, b: number): void;
export function singlecertificatebuilder_native_script(a: number, b: number, c: number, d: number): void;
export function singlecertificatebuilder_plutus_script(a: number, b: number, c: number, d: number): void;
export function __wbg_transactionoutputbuilder_free(a: number): void;
export function transactionoutputbuilder_new(): number;
export function transactionoutputbuilder_with_address(a: number, b: number): number;
export function transactionoutputbuilder_with_communication_data(a: number, b: number): number;
export function transactionoutputbuilder_with_data(a: number, b: number): number;
export function transactionoutputbuilder_with_reference_script(a: number, b: number): number;
export function transactionoutputbuilder_next(a: number, b: number): void;
export function __wbg_transactionoutputamountbuilder_free(a: number): void;
export function transactionoutputamountbuilder_with_value(a: number, b: number): number;
export function transactionoutputamountbuilder_with_asset_and_min_required_coin(a: number, b: number, c: number, d: number): void;
export function transactionoutputamountbuilder_build(a: number, b: number): void;
export function __wbg_singleoutputbuilderresult_free(a: number): void;
export function singleoutputbuilderresult_new(a: number): number;
export function singleoutputbuilderresult_output(a: number): number;
export function singleoutputbuilderresult_communication_datum(a: number): number;
export function __wbg_redeemerwitnesskey_free(a: number): void;
export function redeemerwitnesskey_new(a: number, b: number): number;
export function redeemerwitnesskey_from_redeemer(a: number): number;
export function __wbg_untaggedredeemer_free(a: number): void;
export function untaggedredeemer_new(a: number, b: number): number;
export function __wbg_redeemersetbuilder_free(a: number): void;
export function redeemersetbuilder_new(): number;
export function redeemersetbuilder_is_empty(a: number): number;
export function redeemersetbuilder_update_ex_units(a: number, b: number, c: number): void;
export function redeemersetbuilder_add_spend(a: number, b: number): void;
export function redeemersetbuilder_add_mint(a: number, b: number): void;
export function redeemersetbuilder_add_reward(a: number, b: number): void;
export function redeemersetbuilder_add_cert(a: number, b: number): void;
export function redeemersetbuilder_build(a: number, b: number, c: number): void;
export function __wbg_transactionunspentoutput_free(a: number): void;
export function transactionunspentoutput_to_cbor_bytes(a: number, b: number): void;
export function transactionunspentoutput_from_cbor_bytes(a: number, b: number, c: number): void;
export function transactionunspentoutput_to_cbor_hex(a: number, b: number): void;
export function transactionunspentoutput_from_cbor_hex(a: number, b: number, c: number): void;
export function transactionunspentoutput_new(a: number, b: number): number;
export function __wbg_transactionbuilderconfig_free(a: number): void;
export function __wbg_transactionbuilderconfigbuilder_free(a: number): void;
export function transactionbuilderconfigbuilder_new(): number;
export function transactionbuilderconfigbuilder_fee_algo(a: number, b: number): number;
export function transactionbuilderconfigbuilder_coins_per_utxo_byte(a: number, b: number): number;
export function transactionbuilderconfigbuilder_pool_deposit(a: number, b: number): number;
export function transactionbuilderconfigbuilder_key_deposit(a: number, b: number): number;
export function transactionbuilderconfigbuilder_max_value_size(a: number, b: number): number;
export function transactionbuilderconfigbuilder_max_tx_size(a: number, b: number): number;
export function transactionbuilderconfigbuilder_prefer_pure_change(a: number, b: number): number;
export function transactionbuilderconfigbuilder_ex_unit_prices(a: number, b: number): number;
export function transactionbuilderconfigbuilder_cost_models(a: number, b: number): number;
export function transactionbuilderconfigbuilder_collateral_percentage(a: number, b: number): number;
export function transactionbuilderconfigbuilder_max_collateral_inputs(a: number, b: number): number;
export function transactionbuilderconfigbuilder_build(a: number, b: number): void;
export function __wbg_transactionbuilder_free(a: number): void;
export function transactionbuilder_select_utxos(a: number, b: number, c: number): void;
export function transactionbuilder_add_input(a: number, b: number, c: number): void;
export function transactionbuilder_add_utxo(a: number, b: number): void;
export function transactionbuilder_fee_for_input(a: number, b: number, c: number): void;
export function transactionbuilder_add_reference_input(a: number, b: number): void;
export function transactionbuilder_add_output(a: number, b: number, c: number): void;
export function transactionbuilder_fee_for_output(a: number, b: number, c: number): void;
export function transactionbuilder_set_fee(a: number, b: number): void;
export function transactionbuilder_set_ttl(a: number, b: number): void;
export function transactionbuilder_set_validity_start_interval(a: number, b: number): void;
export function transactionbuilder_add_cert(a: number, b: number): void;
export function transactionbuilder_get_withdrawals(a: number): number;
export function transactionbuilder_add_withdrawal(a: number, b: number): void;
export function transactionbuilder_get_auxiliary_data(a: number): number;
export function transactionbuilder_set_auxiliary_data(a: number, b: number): void;
export function transactionbuilder_add_auxiliary_data(a: number, b: number): void;
export function transactionbuilder_add_mint(a: number, b: number, c: number): void;
export function transactionbuilder_get_mint(a: number): number;
export function transactionbuilder_new(a: number): number;
export function transactionbuilder_add_collateral(a: number, b: number, c: number): void;
export function transactionbuilder_add_required_signer(a: number, b: number): void;
export function transactionbuilder_set_network_id(a: number, b: number): void;
export function transactionbuilder_network_id(a: number): number;
export function transactionbuilder_get_explicit_input(a: number, b: number): void;
export function transactionbuilder_get_implicit_input(a: number, b: number): void;
export function transactionbuilder_get_total_input(a: number, b: number): void;
export function transactionbuilder_get_total_output(a: number, b: number): void;
export function transactionbuilder_get_explicit_output(a: number, b: number): void;
export function transactionbuilder_get_deposit(a: number, b: number): void;
export function transactionbuilder_get_fee_if_set(a: number, b: number): void;
export function transactionbuilder_set_collateral_return(a: number, b: number): void;
export function transactionbuilder_full_size(a: number, b: number): void;
export function transactionbuilder_output_sizes(a: number, b: number): void;
export function transactionbuilder_build_for_evaluation(a: number, b: number, c: number, d: number): void;
export function transactionbuilder_build(a: number, b: number, c: number, d: number): void;
export function transactionbuilder_set_exunits(a: number, b: number, c: number): void;
export function transactionbuilder_min_fee(a: number, b: number, c: number): void;
export function transactionbuilder_add_change_if_needed(a: number, b: number, c: number, d: number): void;
export function __wbg_txredeemerbuilder_free(a: number): void;
export function txredeemerbuilder_build(a: number, b: number): void;
export function txredeemerbuilder_set_exunits(a: number, b: number, c: number): void;
export function txredeemerbuilder_draft_body(a: number): number;
export function txredeemerbuilder_auxiliary_data(a: number): number;
export function txredeemerbuilder_draft_tx(a: number, b: number): void;
export function __wbg_signedtxbuilder_free(a: number): void;
export function signedtxbuilder_new_with_data(a: number, b: number, c: number, d: number): number;
export function signedtxbuilder_new_without_data(a: number, b: number, c: number): number;
export function signedtxbuilder_build_checked(a: number, b: number): void;
export function signedtxbuilder_build_unchecked(a: number): number;
export function signedtxbuilder_add_vkey(a: number, b: number): void;
export function signedtxbuilder_add_bootstrap(a: number, b: number): void;
export function signedtxbuilder_body(a: number): number;
export function signedtxbuilder_witness_set(a: number): number;
export function signedtxbuilder_is_valid(a: number): number;
export function signedtxbuilder_auxiliary_data(a: number): number;
export function __wbg_costmodels_free(a: number): void;
export function costmodels_to_cbor_bytes(a: number, b: number): void;
export function costmodels_from_cbor_bytes(a: number, b: number, c: number): void;
export function costmodels_to_cbor_hex(a: number, b: number): void;
export function costmodels_from_cbor_hex(a: number, b: number, c: number): void;
export function costmodels_to_json(a: number, b: number): void;
export function costmodels_to_js_value(a: number, b: number): void;
export function costmodels_from_json(a: number, b: number, c: number): void;
export function costmodels_set_plutus_v1(a: number, b: number): void;
export function costmodels_plutus_v1(a: number): number;
export function costmodels_set_plutus_v2(a: number, b: number): void;
export function costmodels_plutus_v2(a: number): number;
export function costmodels_set_plutus_v3(a: number, b: number): void;
export function costmodels_plutus_v3(a: number): number;
export function costmodels_new(): number;
export function __wbg_exunitprices_free(a: number): void;
export function exunitprices_to_cbor_bytes(a: number, b: number): void;
export function exunitprices_from_cbor_bytes(a: number, b: number, c: number): void;
export function exunitprices_to_cbor_hex(a: number, b: number): void;
export function exunitprices_from_cbor_hex(a: number, b: number, c: number): void;
export function exunitprices_to_json(a: number, b: number): void;
export function exunitprices_to_js_value(a: number, b: number): void;
export function exunitprices_from_json(a: number, b: number, c: number): void;
export function exunitprices_mem_price(a: number): number;
export function exunitprices_step_price(a: number): number;
export function exunitprices_new(a: number, b: number): number;
export function __wbg_exunits_free(a: number): void;
export function exunits_to_cbor_bytes(a: number, b: number): void;
export function exunits_from_cbor_bytes(a: number, b: number, c: number): void;
export function exunits_to_cbor_hex(a: number, b: number): void;
export function exunits_from_cbor_hex(a: number, b: number, c: number): void;
export function exunits_to_json(a: number, b: number): void;
export function exunits_to_js_value(a: number, b: number): void;
export function exunits_from_json(a: number, b: number, c: number): void;
export function exunits_mem(a: number): number;
export function exunits_steps(a: number): number;
export function exunits_new(a: number, b: number): number;
export function __wbg_plutusdata_free(a: number): void;
export function plutusdata_to_cbor_bytes(a: number, b: number): void;
export function plutusdata_from_cbor_bytes(a: number, b: number, c: number): void;
export function plutusdata_to_cbor_hex(a: number, b: number): void;
export function plutusdata_from_cbor_hex(a: number, b: number, c: number): void;
export function plutusdata_to_json(a: number, b: number): void;
export function plutusdata_to_js_value(a: number, b: number): void;
export function plutusdata_from_json(a: number, b: number, c: number): void;
export function plutusdata_new_constr_plutus_data(a: number): number;
export function plutusdata_new_map(a: number): number;
export function plutusdata_new_list(a: number): number;
export function plutusdata_new_integer(a: number): number;
export function plutusdata_new_bytes(a: number, b: number): number;
export function plutusdata_kind(a: number): number;
export function plutusdata_as_constr_plutus_data(a: number): number;
export function plutusdata_as_map(a: number): number;
export function plutusdata_as_list(a: number): number;
export function plutusdata_as_integer(a: number): number;
export function plutusdata_as_bytes(a: number, b: number): void;
export function __wbg_plutusv1script_free(a: number): void;
export function plutusv1script_to_cbor_bytes(a: number, b: number): void;
export function plutusv1script_from_cbor_bytes(a: number, b: number, c: number): void;
export function plutusv1script_to_cbor_hex(a: number, b: number): void;
export function plutusv1script_from_cbor_hex(a: number, b: number, c: number): void;
export function plutusv1script_to_json(a: number, b: number): void;
export function plutusv1script_to_js_value(a: number, b: number): void;
export function plutusv1script_from_json(a: number, b: number, c: number): void;
export function plutusv1script_get(a: number, b: number): void;
export function __wbg_plutusv2script_free(a: number): void;
export function plutusv2script_to_cbor_bytes(a: number, b: number): void;
export function plutusv2script_from_cbor_bytes(a: number, b: number, c: number): void;
export function plutusv2script_to_cbor_hex(a: number, b: number): void;
export function plutusv2script_from_cbor_hex(a: number, b: number, c: number): void;
export function plutusv2script_to_json(a: number, b: number): void;
export function plutusv2script_to_js_value(a: number, b: number): void;
export function plutusv2script_from_json(a: number, b: number, c: number): void;
export function plutusv2script_get(a: number, b: number): void;
export function __wbg_plutusv3script_free(a: number): void;
export function plutusv3script_to_cbor_bytes(a: number, b: number): void;
export function plutusv3script_from_cbor_bytes(a: number, b: number, c: number): void;
export function plutusv3script_to_cbor_hex(a: number, b: number): void;
export function plutusv3script_from_cbor_hex(a: number, b: number, c: number): void;
export function plutusv3script_to_json(a: number, b: number): void;
export function plutusv3script_to_js_value(a: number, b: number): void;
export function plutusv3script_from_json(a: number, b: number, c: number): void;
export function plutusv3script_get(a: number, b: number): void;
export function __wbg_redeemer_free(a: number): void;
export function redeemer_to_cbor_bytes(a: number, b: number): void;
export function redeemer_from_cbor_bytes(a: number, b: number, c: number): void;
export function redeemer_to_cbor_hex(a: number, b: number): void;
export function redeemer_from_cbor_hex(a: number, b: number, c: number): void;
export function redeemer_to_json(a: number, b: number): void;
export function redeemer_to_js_value(a: number, b: number): void;
export function redeemer_from_json(a: number, b: number, c: number): void;
export function redeemer_tag(a: number): number;
export function redeemer_index(a: number): number;
export function redeemer_data(a: number): number;
export function redeemer_ex_units(a: number): number;
export function redeemer_new(a: number, b: number, c: number, d: number): number;
export function __wbg_networkinfo_free(a: number): void;
export function networkinfo_new(a: number, b: number): number;
export function networkinfo_network_id(a: number): number;
export function networkinfo_protocol_magic(a: number): number;
export function networkinfo_testnet(): number;
export function networkinfo_mainnet(): number;
export function networkinfo_preview(): number;
export function networkinfo_preprod(): number;
export function networkinfo_sancho_testnet(): number;
export function __wbg_linearfee_free(a: number): void;
export function linearfee_new(a: number, b: number): number;
export function linearfee_constant(a: number): number;
export function linearfee_coefficient(a: number): number;
export function min_script_fee(a: number, b: number, c: number): void;
export function min_no_script_fee(a: number, b: number, c: number): void;
export function min_fee(a: number, b: number, c: number, d: number): void;
export function __wbg_authcommitteehotcert_free(a: number): void;
export function authcommitteehotcert_to_cbor_bytes(a: number, b: number): void;
export function authcommitteehotcert_from_cbor_bytes(a: number, b: number, c: number): void;
export function authcommitteehotcert_to_cbor_hex(a: number, b: number): void;
export function authcommitteehotcert_from_cbor_hex(a: number, b: number, c: number): void;
export function authcommitteehotcert_to_json(a: number, b: number): void;
export function authcommitteehotcert_to_js_value(a: number, b: number): void;
export function authcommitteehotcert_from_json(a: number, b: number, c: number): void;
export function authcommitteehotcert_committee_cold_credential(a: number): number;
export function authcommitteehotcert_committee_hot_credential(a: number): number;
export function authcommitteehotcert_new(a: number, b: number): number;
export function __wbg_certificate_free(a: number): void;
export function certificate_to_cbor_bytes(a: number, b: number): void;
export function certificate_from_cbor_bytes(a: number, b: number, c: number): void;
export function certificate_to_cbor_hex(a: number, b: number): void;
export function certificate_from_cbor_hex(a: number, b: number, c: number): void;
export function certificate_to_json(a: number, b: number): void;
export function certificate_to_js_value(a: number, b: number): void;
export function certificate_from_json(a: number, b: number, c: number): void;
export function certificate_new_stake_registration(a: number): number;
export function certificate_new_stake_deregistration(a: number): number;
export function certificate_new_stake_delegation(a: number, b: number): number;
export function certificate_new_pool_registration(a: number): number;
export function certificate_new_pool_retirement(a: number, b: number): number;
export function certificate_new_reg_cert(a: number, b: number): number;
export function certificate_new_unreg_cert(a: number, b: number): number;
export function certificate_new_vote_deleg_cert(a: number, b: number): number;
export function certificate_new_stake_vote_deleg_cert(a: number, b: number, c: number): number;
export function certificate_new_stake_reg_deleg_cert(a: number, b: number, c: number): number;
export function certificate_new_vote_reg_deleg_cert(a: number, b: number, c: number): number;
export function certificate_new_stake_vote_reg_deleg_cert(a: number, b: number, c: number, d: number): number;
export function certificate_new_auth_committee_hot_cert(a: number, b: number): number;
export function certificate_new_resign_committee_cold_cert(a: number): number;
export function certificate_new_reg_drep_cert(a: number, b: number, c: number): number;
export function certificate_new_unreg_drep_cert(a: number, b: number): number;
export function certificate_new_update_drep_cert(a: number, b: number): number;
export function certificate_kind(a: number): number;
export function certificate_as_stake_registration(a: number): number;
export function certificate_as_stake_deregistration(a: number): number;
export function certificate_as_stake_delegation(a: number): number;
export function certificate_as_pool_registration(a: number): number;
export function certificate_as_pool_retirement(a: number): number;
export function certificate_as_reg_cert(a: number): number;
export function certificate_as_unreg_cert(a: number): number;
export function certificate_as_vote_deleg_cert(a: number): number;
export function certificate_as_stake_vote_deleg_cert(a: number): number;
export function certificate_as_stake_reg_deleg_cert(a: number): number;
export function certificate_as_vote_reg_deleg_cert(a: number): number;
export function certificate_as_stake_vote_reg_deleg_cert(a: number): number;
export function certificate_as_auth_committee_hot_cert(a: number): number;
export function certificate_as_resign_committee_cold_cert(a: number): number;
export function certificate_as_reg_drep_cert(a: number): number;
export function certificate_as_unreg_drep_cert(a: number): number;
export function certificate_as_update_drep_cert(a: number): number;
export function __wbg_credential_free(a: number): void;
export function credential_to_cbor_bytes(a: number, b: number): void;
export function credential_from_cbor_bytes(a: number, b: number, c: number): void;
export function credential_to_cbor_hex(a: number, b: number): void;
export function credential_from_cbor_hex(a: number, b: number, c: number): void;
export function credential_to_json(a: number, b: number): void;
export function credential_to_js_value(a: number, b: number): void;
export function credential_from_json(a: number, b: number, c: number): void;
export function credential_new_pub_key(a: number): number;
export function credential_new_script(a: number): number;
export function credential_kind(a: number): number;
export function credential_as_pub_key(a: number): number;
export function credential_as_script(a: number): number;
export function __wbg_drep_free(a: number): void;
export function drep_to_cbor_bytes(a: number, b: number): void;
export function drep_from_cbor_bytes(a: number, b: number, c: number): void;
export function drep_to_cbor_hex(a: number, b: number): void;
export function drep_from_cbor_hex(a: number, b: number, c: number): void;
export function drep_to_json(a: number, b: number): void;
export function drep_to_js_value(a: number, b: number): void;
export function drep_from_json(a: number, b: number, c: number): void;
export function drep_new_key(a: number): number;
export function drep_new_script(a: number): number;
export function drep_new_always_abstain(): number;
export function drep_new_always_no_confidence(): number;
export function drep_kind(a: number): number;
export function drep_as_key(a: number): number;
export function drep_as_script(a: number): number;
export function __wbg_dnsname_free(a: number): void;
export function dnsname_to_cbor_bytes(a: number, b: number): void;
export function dnsname_from_cbor_bytes(a: number, b: number, c: number): void;
export function dnsname_to_cbor_hex(a: number, b: number): void;
export function dnsname_from_cbor_hex(a: number, b: number, c: number): void;
export function dnsname_to_json(a: number, b: number): void;
export function dnsname_to_js_value(a: number, b: number): void;
export function dnsname_from_json(a: number, b: number, c: number): void;
export function dnsname_get(a: number, b: number): void;
export function __wbg_ipv4_free(a: number): void;
export function ipv4_to_cbor_bytes(a: number, b: number): void;
export function ipv4_from_cbor_bytes(a: number, b: number, c: number): void;
export function ipv4_to_cbor_hex(a: number, b: number): void;
export function ipv4_from_cbor_hex(a: number, b: number, c: number): void;
export function ipv4_to_json(a: number, b: number): void;
export function ipv4_to_js_value(a: number, b: number): void;
export function ipv4_from_json(a: number, b: number, c: number): void;
export function ipv4_get(a: number, b: number): void;
export function __wbg_ipv6_free(a: number): void;
export function ipv6_to_cbor_bytes(a: number, b: number): void;
export function ipv6_from_cbor_bytes(a: number, b: number, c: number): void;
export function ipv6_to_cbor_hex(a: number, b: number): void;
export function ipv6_from_cbor_hex(a: number, b: number, c: number): void;
export function ipv6_to_json(a: number, b: number): void;
export function ipv6_to_js_value(a: number, b: number): void;
export function ipv6_from_json(a: number, b: number, c: number): void;
export function ipv6_get(a: number, b: number): void;
export function __wbg_multihostname_free(a: number): void;
export function multihostname_to_cbor_bytes(a: number, b: number): void;
export function multihostname_from_cbor_bytes(a: number, b: number, c: number): void;
export function multihostname_to_cbor_hex(a: number, b: number): void;
export function multihostname_from_cbor_hex(a: number, b: number, c: number): void;
export function multihostname_to_json(a: number, b: number): void;
export function multihostname_to_js_value(a: number, b: number): void;
export function multihostname_from_json(a: number, b: number, c: number): void;
export function multihostname_dns_name(a: number): number;
export function multihostname_new(a: number): number;
export function __wbg_poolmetadata_free(a: number): void;
export function poolmetadata_to_cbor_bytes(a: number, b: number): void;
export function poolmetadata_from_cbor_bytes(a: number, b: number, c: number): void;
export function poolmetadata_to_cbor_hex(a: number, b: number): void;
export function poolmetadata_from_cbor_hex(a: number, b: number, c: number): void;
export function poolmetadata_to_json(a: number, b: number): void;
export function poolmetadata_to_js_value(a: number, b: number): void;
export function poolmetadata_from_json(a: number, b: number, c: number): void;
export function poolmetadata_url(a: number): number;
export function poolmetadata_pool_metadata_hash(a: number): number;
export function poolmetadata_new(a: number, b: number): number;
export function __wbg_poolparams_free(a: number): void;
export function poolparams_to_cbor_bytes(a: number, b: number): void;
export function poolparams_from_cbor_bytes(a: number, b: number, c: number): void;
export function poolparams_to_cbor_hex(a: number, b: number): void;
export function poolparams_from_cbor_hex(a: number, b: number, c: number): void;
export function poolparams_to_json(a: number, b: number): void;
export function poolparams_to_js_value(a: number, b: number): void;
export function poolparams_from_json(a: number, b: number, c: number): void;
export function poolparams_operator(a: number): number;
export function poolparams_vrf_keyhash(a: number): number;
export function poolparams_pledge(a: number): number;
export function poolparams_cost(a: number): number;
export function poolparams_margin(a: number): number;
export function poolparams_reward_account(a: number): number;
export function poolparams_pool_owners(a: number): number;
export function poolparams_relays(a: number): number;
export function poolparams_pool_metadata(a: number): number;
export function poolparams_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function __wbg_poolregistration_free(a: number): void;
export function poolregistration_to_cbor_bytes(a: number, b: number): void;
export function poolregistration_from_cbor_bytes(a: number, b: number, c: number): void;
export function poolregistration_to_cbor_hex(a: number, b: number): void;
export function poolregistration_from_cbor_hex(a: number, b: number, c: number): void;
export function poolregistration_to_json(a: number, b: number): void;
export function poolregistration_to_js_value(a: number, b: number): void;
export function poolregistration_from_json(a: number, b: number, c: number): void;
export function poolregistration_pool_params(a: number): number;
export function poolregistration_new(a: number): number;
export function __wbg_poolretirement_free(a: number): void;
export function poolretirement_to_cbor_bytes(a: number, b: number): void;
export function poolretirement_from_cbor_bytes(a: number, b: number, c: number): void;
export function poolretirement_to_cbor_hex(a: number, b: number): void;
export function poolretirement_from_cbor_hex(a: number, b: number, c: number): void;
export function poolretirement_to_json(a: number, b: number): void;
export function poolretirement_to_js_value(a: number, b: number): void;
export function poolretirement_from_json(a: number, b: number, c: number): void;
export function poolretirement_pool(a: number): number;
export function poolretirement_epoch(a: number): number;
export function poolretirement_new(a: number, b: number): number;
export function __wbg_regcert_free(a: number): void;
export function regcert_to_cbor_bytes(a: number, b: number): void;
export function regcert_from_cbor_bytes(a: number, b: number, c: number): void;
export function regcert_to_cbor_hex(a: number, b: number): void;
export function regcert_from_cbor_hex(a: number, b: number, c: number): void;
export function regcert_to_json(a: number, b: number): void;
export function regcert_to_js_value(a: number, b: number): void;
export function regcert_from_json(a: number, b: number, c: number): void;
export function regcert_stake_credential(a: number): number;
export function regcert_coin(a: number): number;
export function regcert_new(a: number, b: number): number;
export function __wbg_regdrepcert_free(a: number): void;
export function regdrepcert_to_cbor_bytes(a: number, b: number): void;
export function regdrepcert_from_cbor_bytes(a: number, b: number, c: number): void;
export function regdrepcert_to_cbor_hex(a: number, b: number): void;
export function regdrepcert_from_cbor_hex(a: number, b: number, c: number): void;
export function regdrepcert_to_json(a: number, b: number): void;
export function regdrepcert_to_js_value(a: number, b: number): void;
export function regdrepcert_from_json(a: number, b: number, c: number): void;
export function regdrepcert_drep_credential(a: number): number;
export function regdrepcert_coin(a: number): number;
export function regdrepcert_anchor(a: number): number;
export function regdrepcert_new(a: number, b: number, c: number): number;
export function __wbg_relay_free(a: number): void;
export function relay_to_cbor_bytes(a: number, b: number): void;
export function relay_from_cbor_bytes(a: number, b: number, c: number): void;
export function relay_to_cbor_hex(a: number, b: number): void;
export function relay_from_cbor_hex(a: number, b: number, c: number): void;
export function relay_to_json(a: number, b: number): void;
export function relay_to_js_value(a: number, b: number): void;
export function relay_from_json(a: number, b: number, c: number): void;
export function relay_new_single_host_addr(a: number, b: number, c: number): number;
export function relay_new_single_host_name(a: number, b: number): number;
export function relay_new_multi_host_name(a: number): number;
export function relay_kind(a: number): number;
export function relay_as_single_host_addr(a: number): number;
export function relay_as_single_host_name(a: number): number;
export function relay_as_multi_host_name(a: number): number;
export function __wbg_resigncommitteecoldcert_free(a: number): void;
export function resigncommitteecoldcert_to_cbor_bytes(a: number, b: number): void;
export function resigncommitteecoldcert_from_cbor_bytes(a: number, b: number, c: number): void;
export function resigncommitteecoldcert_to_cbor_hex(a: number, b: number): void;
export function resigncommitteecoldcert_from_cbor_hex(a: number, b: number, c: number): void;
export function resigncommitteecoldcert_to_json(a: number, b: number): void;
export function resigncommitteecoldcert_to_js_value(a: number, b: number): void;
export function resigncommitteecoldcert_from_json(a: number, b: number, c: number): void;
export function resigncommitteecoldcert_committee_cold_credential(a: number): number;
export function resigncommitteecoldcert_new(a: number): number;
export function __wbg_singlehostaddr_free(a: number): void;
export function singlehostaddr_to_cbor_bytes(a: number, b: number): void;
export function singlehostaddr_from_cbor_bytes(a: number, b: number, c: number): void;
export function singlehostaddr_to_cbor_hex(a: number, b: number): void;
export function singlehostaddr_from_cbor_hex(a: number, b: number, c: number): void;
export function singlehostaddr_to_json(a: number, b: number): void;
export function singlehostaddr_to_js_value(a: number, b: number): void;
export function singlehostaddr_from_json(a: number, b: number, c: number): void;
export function singlehostaddr_port(a: number): number;
export function singlehostaddr_ipv4(a: number): number;
export function singlehostaddr_ipv6(a: number): number;
export function singlehostaddr_new(a: number, b: number, c: number): number;
export function __wbg_singlehostname_free(a: number): void;
export function singlehostname_to_cbor_bytes(a: number, b: number): void;
export function singlehostname_from_cbor_bytes(a: number, b: number, c: number): void;
export function singlehostname_to_cbor_hex(a: number, b: number): void;
export function singlehostname_from_cbor_hex(a: number, b: number, c: number): void;
export function singlehostname_to_json(a: number, b: number): void;
export function singlehostname_to_js_value(a: number, b: number): void;
export function singlehostname_from_json(a: number, b: number, c: number): void;
export function singlehostname_port(a: number): number;
export function singlehostname_dns_name(a: number): number;
export function singlehostname_new(a: number, b: number): number;
export function __wbg_stakedelegation_free(a: number): void;
export function stakedelegation_to_cbor_bytes(a: number, b: number): void;
export function stakedelegation_from_cbor_bytes(a: number, b: number, c: number): void;
export function stakedelegation_to_cbor_hex(a: number, b: number): void;
export function stakedelegation_from_cbor_hex(a: number, b: number, c: number): void;
export function stakedelegation_to_json(a: number, b: number): void;
export function stakedelegation_to_js_value(a: number, b: number): void;
export function stakedelegation_from_json(a: number, b: number, c: number): void;
export function stakedelegation_stake_credential(a: number): number;
export function stakedelegation_pool(a: number): number;
export function stakedelegation_new(a: number, b: number): number;
export function __wbg_stakederegistration_free(a: number): void;
export function stakederegistration_to_cbor_bytes(a: number, b: number): void;
export function stakederegistration_from_cbor_bytes(a: number, b: number, c: number): void;
export function stakederegistration_to_cbor_hex(a: number, b: number): void;
export function stakederegistration_from_cbor_hex(a: number, b: number, c: number): void;
export function stakederegistration_to_json(a: number, b: number): void;
export function stakederegistration_to_js_value(a: number, b: number): void;
export function stakederegistration_from_json(a: number, b: number, c: number): void;
export function stakederegistration_stake_credential(a: number): number;
export function __wbg_stakeregdelegcert_free(a: number): void;
export function stakeregdelegcert_to_cbor_bytes(a: number, b: number): void;
export function stakeregdelegcert_from_cbor_bytes(a: number, b: number, c: number): void;
export function stakeregdelegcert_to_cbor_hex(a: number, b: number): void;
export function stakeregdelegcert_from_cbor_hex(a: number, b: number, c: number): void;
export function stakeregdelegcert_to_json(a: number, b: number): void;
export function stakeregdelegcert_to_js_value(a: number, b: number): void;
export function stakeregdelegcert_from_json(a: number, b: number, c: number): void;
export function stakeregdelegcert_stake_credential(a: number): number;
export function stakeregdelegcert_pool(a: number): number;
export function stakeregdelegcert_coin(a: number): number;
export function stakeregdelegcert_new(a: number, b: number, c: number): number;
export function __wbg_stakeregistration_free(a: number): void;
export function stakeregistration_to_cbor_bytes(a: number, b: number): void;
export function stakeregistration_from_cbor_bytes(a: number, b: number, c: number): void;
export function stakeregistration_to_cbor_hex(a: number, b: number): void;
export function stakeregistration_from_cbor_hex(a: number, b: number, c: number): void;
export function stakeregistration_to_json(a: number, b: number): void;
export function stakeregistration_to_js_value(a: number, b: number): void;
export function stakeregistration_from_json(a: number, b: number, c: number): void;
export function stakeregistration_stake_credential(a: number): number;
export function __wbg_stakevotedelegcert_free(a: number): void;
export function stakevotedelegcert_to_cbor_bytes(a: number, b: number): void;
export function stakevotedelegcert_from_cbor_bytes(a: number, b: number, c: number): void;
export function stakevotedelegcert_to_cbor_hex(a: number, b: number): void;
export function stakevotedelegcert_from_cbor_hex(a: number, b: number, c: number): void;
export function stakevotedelegcert_to_json(a: number, b: number): void;
export function stakevotedelegcert_to_js_value(a: number, b: number): void;
export function stakevotedelegcert_from_json(a: number, b: number, c: number): void;
export function stakevotedelegcert_stake_credential(a: number): number;
export function stakevotedelegcert_pool(a: number): number;
export function stakevotedelegcert_d_rep(a: number): number;
export function stakevotedelegcert_new(a: number, b: number, c: number): number;
export function __wbg_stakevoteregdelegcert_free(a: number): void;
export function stakevoteregdelegcert_to_cbor_bytes(a: number, b: number): void;
export function stakevoteregdelegcert_from_cbor_bytes(a: number, b: number, c: number): void;
export function stakevoteregdelegcert_to_cbor_hex(a: number, b: number): void;
export function stakevoteregdelegcert_from_cbor_hex(a: number, b: number, c: number): void;
export function stakevoteregdelegcert_to_json(a: number, b: number): void;
export function stakevoteregdelegcert_to_js_value(a: number, b: number): void;
export function stakevoteregdelegcert_from_json(a: number, b: number, c: number): void;
export function stakevoteregdelegcert_stake_credential(a: number): number;
export function stakevoteregdelegcert_pool(a: number): number;
export function stakevoteregdelegcert_d_rep(a: number): number;
export function stakevoteregdelegcert_coin(a: number): number;
export function stakevoteregdelegcert_new(a: number, b: number, c: number, d: number): number;
export function __wbg_unregcert_free(a: number): void;
export function unregcert_to_cbor_bytes(a: number, b: number): void;
export function unregcert_from_cbor_bytes(a: number, b: number, c: number): void;
export function unregcert_to_cbor_hex(a: number, b: number): void;
export function unregcert_from_cbor_hex(a: number, b: number, c: number): void;
export function unregcert_to_json(a: number, b: number): void;
export function unregcert_to_js_value(a: number, b: number): void;
export function unregcert_from_json(a: number, b: number, c: number): void;
export function unregcert_stake_credential(a: number): number;
export function unregcert_coin(a: number): number;
export function __wbg_unregdrepcert_free(a: number): void;
export function unregdrepcert_to_cbor_bytes(a: number, b: number): void;
export function unregdrepcert_from_cbor_bytes(a: number, b: number, c: number): void;
export function unregdrepcert_to_cbor_hex(a: number, b: number): void;
export function unregdrepcert_from_cbor_hex(a: number, b: number, c: number): void;
export function unregdrepcert_to_json(a: number, b: number): void;
export function unregdrepcert_to_js_value(a: number, b: number): void;
export function unregdrepcert_from_json(a: number, b: number, c: number): void;
export function unregdrepcert_drep_credential(a: number): number;
export function unregdrepcert_coin(a: number): number;
export function __wbg_updatedrepcert_free(a: number): void;
export function updatedrepcert_to_cbor_bytes(a: number, b: number): void;
export function updatedrepcert_from_cbor_bytes(a: number, b: number, c: number): void;
export function updatedrepcert_to_cbor_hex(a: number, b: number): void;
export function updatedrepcert_from_cbor_hex(a: number, b: number, c: number): void;
export function updatedrepcert_to_json(a: number, b: number): void;
export function updatedrepcert_to_js_value(a: number, b: number): void;
export function updatedrepcert_from_json(a: number, b: number, c: number): void;
export function updatedrepcert_drep_credential(a: number): number;
export function updatedrepcert_anchor(a: number): number;
export function updatedrepcert_new(a: number, b: number): number;
export function __wbg_url_free(a: number): void;
export function url_to_cbor_bytes(a: number, b: number): void;
export function url_from_cbor_bytes(a: number, b: number, c: number): void;
export function url_to_cbor_hex(a: number, b: number): void;
export function url_from_cbor_hex(a: number, b: number, c: number): void;
export function url_to_json(a: number, b: number): void;
export function url_to_js_value(a: number, b: number): void;
export function url_from_json(a: number, b: number, c: number): void;
export function url_get(a: number, b: number): void;
export function __wbg_votedelegcert_free(a: number): void;
export function votedelegcert_to_cbor_bytes(a: number, b: number): void;
export function votedelegcert_from_cbor_bytes(a: number, b: number, c: number): void;
export function votedelegcert_to_cbor_hex(a: number, b: number): void;
export function votedelegcert_from_cbor_hex(a: number, b: number, c: number): void;
export function votedelegcert_to_json(a: number, b: number): void;
export function votedelegcert_to_js_value(a: number, b: number): void;
export function votedelegcert_from_json(a: number, b: number, c: number): void;
export function votedelegcert_stake_credential(a: number): number;
export function votedelegcert_d_rep(a: number): number;
export function votedelegcert_new(a: number, b: number): number;
export function __wbg_voteregdelegcert_free(a: number): void;
export function voteregdelegcert_to_cbor_bytes(a: number, b: number): void;
export function voteregdelegcert_from_cbor_bytes(a: number, b: number, c: number): void;
export function voteregdelegcert_to_cbor_hex(a: number, b: number): void;
export function voteregdelegcert_from_cbor_hex(a: number, b: number, c: number): void;
export function voteregdelegcert_to_json(a: number, b: number): void;
export function voteregdelegcert_to_js_value(a: number, b: number): void;
export function voteregdelegcert_from_json(a: number, b: number, c: number): void;
export function voteregdelegcert_stake_credential(a: number): number;
export function voteregdelegcert_d_rep(a: number): number;
export function voteregdelegcert_coin(a: number): number;
export function voteregdelegcert_new(a: number, b: number, c: number): number;
export function unregcert_new(a: number, b: number): number;
export function unregdrepcert_new(a: number, b: number): number;
export function stakeregistration_new(a: number): number;
export function stakederegistration_new(a: number): number;
export function auxiliarydata_new(): number;
export function auxiliarydata_metadata(a: number): number;
export function auxiliarydata_native_scripts(a: number): number;
export function auxiliarydata_plutus_v1_scripts(a: number): number;
export function auxiliarydata_plutus_v2_scripts(a: number): number;
export function auxiliarydata_add_metadata(a: number, b: number): void;
export function auxiliarydata_add_native_scripts(a: number, b: number): void;
export function auxiliarydata_add_plutus_v1_scripts(a: number, b: number): void;
export function auxiliarydata_add_plutus_v2_scripts(a: number, b: number): void;
export function auxiliarydata_add(a: number, b: number): void;
export function __wbg_block_free(a: number): void;
export function block_to_cbor_bytes(a: number, b: number): void;
export function block_from_cbor_bytes(a: number, b: number, c: number): void;
export function block_to_cbor_hex(a: number, b: number): void;
export function block_from_cbor_hex(a: number, b: number, c: number): void;
export function block_to_json(a: number, b: number): void;
export function block_to_js_value(a: number, b: number): void;
export function block_from_json(a: number, b: number, c: number): void;
export function block_header(a: number): number;
export function block_transaction_bodies(a: number): number;
export function block_transaction_witness_sets(a: number): number;
export function block_auxiliary_data_set(a: number): number;
export function block_invalid_transactions(a: number, b: number): void;
export function block_new(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function __wbg_header_free(a: number): void;
export function header_to_cbor_bytes(a: number, b: number): void;
export function header_from_cbor_bytes(a: number, b: number, c: number): void;
export function header_to_cbor_hex(a: number, b: number): void;
export function header_from_cbor_hex(a: number, b: number, c: number): void;
export function header_to_json(a: number, b: number): void;
export function header_to_js_value(a: number, b: number): void;
export function header_from_json(a: number, b: number, c: number): void;
export function header_header_body(a: number): number;
export function header_body_signature(a: number): number;
export function header_new(a: number, b: number): number;
export function __wbg_headerbody_free(a: number): void;
export function headerbody_to_cbor_bytes(a: number, b: number): void;
export function headerbody_from_cbor_bytes(a: number, b: number, c: number): void;
export function headerbody_to_cbor_hex(a: number, b: number): void;
export function headerbody_from_cbor_hex(a: number, b: number, c: number): void;
export function headerbody_to_json(a: number, b: number): void;
export function headerbody_to_js_value(a: number, b: number): void;
export function headerbody_from_json(a: number, b: number, c: number): void;
export function headerbody_block_number(a: number): number;
export function headerbody_slot(a: number): number;
export function headerbody_prev_hash(a: number): number;
export function headerbody_issuer_vkey(a: number): number;
export function headerbody_vrf_vkey(a: number): number;
export function headerbody_vrf_result(a: number): number;
export function headerbody_block_body_size(a: number): number;
export function headerbody_block_body_hash(a: number): number;
export function headerbody_operational_cert(a: number): number;
export function headerbody_protocol_version(a: number): number;
export function headerbody_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): number;
export function __wbg_operationalcert_free(a: number): void;
export function operationalcert_to_cbor_bytes(a: number, b: number): void;
export function operationalcert_from_cbor_bytes(a: number, b: number, c: number): void;
export function operationalcert_to_cbor_hex(a: number, b: number): void;
export function operationalcert_from_cbor_hex(a: number, b: number, c: number): void;
export function operationalcert_to_json(a: number, b: number): void;
export function operationalcert_to_js_value(a: number, b: number): void;
export function operationalcert_from_json(a: number, b: number, c: number): void;
export function operationalcert_hot_vkey(a: number): number;
export function operationalcert_sequence_number(a: number): number;
export function operationalcert_kes_period(a: number): number;
export function operationalcert_sigma(a: number): number;
export function operationalcert_new(a: number, b: number, c: number, d: number): number;
export function __wbg_protocolversion_free(a: number): void;
export function protocolversion_to_cbor_bytes(a: number, b: number): void;
export function protocolversion_from_cbor_bytes(a: number, b: number, c: number): void;
export function protocolversion_to_cbor_hex(a: number, b: number): void;
export function protocolversion_from_cbor_hex(a: number, b: number, c: number): void;
export function protocolversion_to_json(a: number, b: number): void;
export function protocolversion_to_js_value(a: number, b: number): void;
export function protocolversion_from_json(a: number, b: number, c: number): void;
export function protocolversion_major(a: number): number;
export function protocolversion_minor(a: number): number;
export function protocolversion_new(a: number, b: number): number;
export function hash_auxiliary_data(a: number): number;
export function hash_transaction(a: number): number;
export function hash_plutus_data(a: number): number;
export function hash_script_data(a: number, b: number, c: number): number;
export function calc_script_data_hash(a: number, b: number, c: number, d: number, e: number): void;
export function calc_script_data_hash_from_witness(a: number, b: number, c: number): void;
export function bootstrapwitness_to_address(a: number, b: number): void;
export function make_vkey_witness(a: number, b: number): number;
export function __wbg_bootstrapwitness_free(a: number): void;
export function bootstrapwitness_to_cbor_bytes(a: number, b: number): void;
export function bootstrapwitness_from_cbor_bytes(a: number, b: number, c: number): void;
export function bootstrapwitness_to_cbor_hex(a: number, b: number): void;
export function bootstrapwitness_from_cbor_hex(a: number, b: number, c: number): void;
export function bootstrapwitness_to_json(a: number, b: number): void;
export function bootstrapwitness_to_js_value(a: number, b: number): void;
export function bootstrapwitness_from_json(a: number, b: number, c: number): void;
export function bootstrapwitness_public_key(a: number): number;
export function bootstrapwitness_signature(a: number): number;
export function bootstrapwitness_chain_code(a: number, b: number): void;
export function bootstrapwitness_attributes(a: number): number;
export function bootstrapwitness_new(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function __wbg_kessignature_free(a: number): void;
export function kessignature_to_cbor_bytes(a: number, b: number): void;
export function kessignature_from_cbor_bytes(a: number, b: number, c: number): void;
export function kessignature_to_cbor_hex(a: number, b: number): void;
export function kessignature_from_cbor_hex(a: number, b: number, c: number): void;
export function kessignature_to_json(a: number, b: number): void;
export function kessignature_to_js_value(a: number, b: number): void;
export function kessignature_from_json(a: number, b: number, c: number): void;
export function kessignature_get(a: number, b: number): void;
export function __wbg_nonce_free(a: number): void;
export function nonce_to_cbor_bytes(a: number, b: number): void;
export function nonce_from_cbor_bytes(a: number, b: number, c: number): void;
export function nonce_to_cbor_hex(a: number, b: number): void;
export function nonce_from_cbor_hex(a: number, b: number, c: number): void;
export function nonce_to_json(a: number, b: number): void;
export function nonce_to_js_value(a: number, b: number): void;
export function nonce_from_json(a: number, b: number, c: number): void;
export function nonce_new_identity(): number;
export function nonce_new_hash(a: number): number;
export function nonce_kind(a: number): number;
export function nonce_as_hash(a: number): number;
export function __wbg_vrfcert_free(a: number): void;
export function vrfcert_to_cbor_bytes(a: number, b: number): void;
export function vrfcert_from_cbor_bytes(a: number, b: number, c: number): void;
export function vrfcert_to_cbor_hex(a: number, b: number): void;
export function vrfcert_from_cbor_hex(a: number, b: number, c: number): void;
export function vrfcert_to_json(a: number, b: number): void;
export function vrfcert_to_js_value(a: number, b: number): void;
export function vrfcert_from_json(a: number, b: number, c: number): void;
export function vrfcert_output(a: number, b: number): void;
export function vrfcert_proof(a: number, b: number): void;
export function vrfcert_new(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_vkeywitness_free(a: number): void;
export function vkeywitness_to_cbor_bytes(a: number, b: number): void;
export function vkeywitness_from_cbor_bytes(a: number, b: number, c: number): void;
export function vkeywitness_to_cbor_hex(a: number, b: number): void;
export function vkeywitness_from_cbor_hex(a: number, b: number, c: number): void;
export function vkeywitness_to_json(a: number, b: number): void;
export function vkeywitness_to_js_value(a: number, b: number): void;
export function vkeywitness_from_json(a: number, b: number, c: number): void;
export function vkeywitness_vkey(a: number): number;
export function vkeywitness_ed25519_signature(a: number): number;
export function vkeywitness_new(a: number, b: number): number;
export function __wbg_anchor_free(a: number): void;
export function anchor_to_cbor_bytes(a: number, b: number): void;
export function anchor_from_cbor_bytes(a: number, b: number, c: number): void;
export function anchor_to_cbor_hex(a: number, b: number): void;
export function anchor_from_cbor_hex(a: number, b: number, c: number): void;
export function anchor_to_json(a: number, b: number): void;
export function anchor_to_js_value(a: number, b: number): void;
export function anchor_from_json(a: number, b: number, c: number): void;
export function anchor_anchor_url(a: number): number;
export function anchor_anchor_doc_hash(a: number): number;
export function anchor_new(a: number, b: number): number;
export function __wbg_committee_free(a: number): void;
export function committee_to_cbor_bytes(a: number, b: number): void;
export function committee_from_cbor_bytes(a: number, b: number, c: number): void;
export function committee_to_cbor_hex(a: number, b: number): void;
export function committee_from_cbor_hex(a: number, b: number, c: number): void;
export function committee_to_json(a: number, b: number): void;
export function committee_to_js_value(a: number, b: number): void;
export function committee_from_json(a: number, b: number, c: number): void;
export function committee_credentials(a: number): number;
export function committee_unit_interval(a: number): number;
export function committee_new(a: number, b: number): number;
export function __wbg_constitution_free(a: number): void;
export function constitution_to_cbor_bytes(a: number, b: number): void;
export function constitution_from_cbor_bytes(a: number, b: number, c: number): void;
export function constitution_to_cbor_hex(a: number, b: number): void;
export function constitution_from_cbor_hex(a: number, b: number, c: number): void;
export function constitution_to_json(a: number, b: number): void;
export function constitution_to_js_value(a: number, b: number): void;
export function constitution_from_json(a: number, b: number, c: number): void;
export function constitution_anchor(a: number): number;
export function constitution_script_hash(a: number): number;
export function constitution_new(a: number, b: number): number;
export function __wbg_govaction_free(a: number): void;
export function govaction_to_cbor_bytes(a: number, b: number): void;
export function govaction_from_cbor_bytes(a: number, b: number, c: number): void;
export function govaction_to_cbor_hex(a: number, b: number): void;
export function govaction_from_cbor_hex(a: number, b: number, c: number): void;
export function govaction_to_json(a: number, b: number): void;
export function govaction_to_js_value(a: number, b: number): void;
export function govaction_from_json(a: number, b: number, c: number): void;
export function govaction_new_parameter_change_action(a: number, b: number): number;
export function govaction_new_hard_fork_initiation_action(a: number, b: number): number;
export function govaction_new_treasury_withdrawals_action(a: number): number;
export function govaction_new_no_confidence(a: number): number;
export function govaction_new_new_committee(a: number, b: number, c: number): number;
export function govaction_new_new_constitution(a: number, b: number): number;
export function govaction_new_info_action(): number;
export function govaction_kind(a: number): number;
export function govaction_as_parameter_change_action(a: number): number;
export function govaction_as_hard_fork_initiation_action(a: number): number;
export function govaction_as_treasury_withdrawals_action(a: number): number;
export function govaction_as_no_confidence(a: number): number;
export function govaction_as_new_committee(a: number): number;
export function govaction_as_new_constitution(a: number): number;
export function __wbg_govactionid_free(a: number): void;
export function govactionid_to_cbor_bytes(a: number, b: number): void;
export function govactionid_from_cbor_bytes(a: number, b: number, c: number): void;
export function govactionid_to_cbor_hex(a: number, b: number): void;
export function govactionid_from_cbor_hex(a: number, b: number, c: number): void;
export function govactionid_to_json(a: number, b: number): void;
export function govactionid_to_js_value(a: number, b: number): void;
export function govactionid_from_json(a: number, b: number, c: number): void;
export function govactionid_transaction_id(a: number): number;
export function govactionid_gov_action_index(a: number): number;
export function govactionid_new(a: number, b: number): number;
export function __wbg_hardforkinitiationaction_free(a: number): void;
export function hardforkinitiationaction_to_cbor_bytes(a: number, b: number): void;
export function hardforkinitiationaction_from_cbor_bytes(a: number, b: number, c: number): void;
export function hardforkinitiationaction_to_cbor_hex(a: number, b: number): void;
export function hardforkinitiationaction_from_cbor_hex(a: number, b: number, c: number): void;
export function hardforkinitiationaction_to_json(a: number, b: number): void;
export function hardforkinitiationaction_to_js_value(a: number, b: number): void;
export function hardforkinitiationaction_from_json(a: number, b: number, c: number): void;
export function hardforkinitiationaction_action_id(a: number): number;
export function hardforkinitiationaction_version(a: number): number;
export function hardforkinitiationaction_new(a: number, b: number): number;
export function __wbg_newcommittee_free(a: number): void;
export function newcommittee_to_cbor_bytes(a: number, b: number): void;
export function newcommittee_from_cbor_bytes(a: number, b: number, c: number): void;
export function newcommittee_to_cbor_hex(a: number, b: number): void;
export function newcommittee_from_cbor_hex(a: number, b: number, c: number): void;
export function newcommittee_to_json(a: number, b: number): void;
export function newcommittee_to_js_value(a: number, b: number): void;
export function newcommittee_from_json(a: number, b: number, c: number): void;
export function newcommittee_action_id(a: number): number;
export function newcommittee_cold_credentials(a: number): number;
export function newcommittee_committee(a: number): number;
export function newcommittee_new(a: number, b: number, c: number): number;
export function __wbg_newconstitution_free(a: number): void;
export function newconstitution_to_cbor_bytes(a: number, b: number): void;
export function newconstitution_from_cbor_bytes(a: number, b: number, c: number): void;
export function newconstitution_to_cbor_hex(a: number, b: number): void;
export function newconstitution_from_cbor_hex(a: number, b: number, c: number): void;
export function newconstitution_to_json(a: number, b: number): void;
export function newconstitution_to_js_value(a: number, b: number): void;
export function newconstitution_from_json(a: number, b: number, c: number): void;
export function newconstitution_action_id(a: number): number;
export function newconstitution_constitution(a: number): number;
export function newconstitution_new(a: number, b: number): number;
export function __wbg_noconfidence_free(a: number): void;
export function noconfidence_to_cbor_bytes(a: number, b: number): void;
export function noconfidence_from_cbor_bytes(a: number, b: number, c: number): void;
export function noconfidence_to_cbor_hex(a: number, b: number): void;
export function noconfidence_from_cbor_hex(a: number, b: number, c: number): void;
export function noconfidence_to_json(a: number, b: number): void;
export function noconfidence_to_js_value(a: number, b: number): void;
export function noconfidence_from_json(a: number, b: number, c: number): void;
export function noconfidence_action_id(a: number): number;
export function noconfidence_new(a: number): number;
export function __wbg_parameterchangeaction_free(a: number): void;
export function parameterchangeaction_to_cbor_bytes(a: number, b: number): void;
export function parameterchangeaction_from_cbor_bytes(a: number, b: number, c: number): void;
export function parameterchangeaction_to_cbor_hex(a: number, b: number): void;
export function parameterchangeaction_from_cbor_hex(a: number, b: number, c: number): void;
export function parameterchangeaction_to_json(a: number, b: number): void;
export function parameterchangeaction_to_js_value(a: number, b: number): void;
export function parameterchangeaction_from_json(a: number, b: number, c: number): void;
export function parameterchangeaction_gov_action_id(a: number): number;
export function parameterchangeaction_protocol_param_update(a: number): number;
export function parameterchangeaction_new(a: number, b: number): number;
export function __wbg_proposalprocedure_free(a: number): void;
export function proposalprocedure_to_cbor_bytes(a: number, b: number): void;
export function proposalprocedure_from_cbor_bytes(a: number, b: number, c: number): void;
export function proposalprocedure_to_cbor_hex(a: number, b: number): void;
export function proposalprocedure_from_cbor_hex(a: number, b: number, c: number): void;
export function proposalprocedure_to_json(a: number, b: number): void;
export function proposalprocedure_to_js_value(a: number, b: number): void;
export function proposalprocedure_from_json(a: number, b: number, c: number): void;
export function proposalprocedure_deposit(a: number): number;
export function proposalprocedure_reward_account(a: number): number;
export function proposalprocedure_gov_action(a: number): number;
export function proposalprocedure_anchor(a: number): number;
export function proposalprocedure_new(a: number, b: number, c: number, d: number): number;
export function __wbg_treasurywithdrawalsaction_free(a: number): void;
export function treasurywithdrawalsaction_to_cbor_bytes(a: number, b: number): void;
export function treasurywithdrawalsaction_from_cbor_bytes(a: number, b: number, c: number): void;
export function treasurywithdrawalsaction_to_cbor_hex(a: number, b: number): void;
export function treasurywithdrawalsaction_from_cbor_hex(a: number, b: number, c: number): void;
export function treasurywithdrawalsaction_to_json(a: number, b: number): void;
export function treasurywithdrawalsaction_to_js_value(a: number, b: number): void;
export function treasurywithdrawalsaction_from_json(a: number, b: number, c: number): void;
export function treasurywithdrawalsaction_withdrawal(a: number): number;
export function treasurywithdrawalsaction_new(a: number): number;
export function __wbg_voter_free(a: number): void;
export function voter_to_cbor_bytes(a: number, b: number): void;
export function voter_from_cbor_bytes(a: number, b: number, c: number): void;
export function voter_to_cbor_hex(a: number, b: number): void;
export function voter_from_cbor_hex(a: number, b: number, c: number): void;
export function voter_to_json(a: number, b: number): void;
export function voter_to_js_value(a: number, b: number): void;
export function voter_from_json(a: number, b: number, c: number): void;
export function voter_new_constitutional_committee_hot_key_hash(a: number): number;
export function voter_new_constitutional_committee_hot_script_hash(a: number): number;
export function voter_new_d_rep_key_hash(a: number): number;
export function voter_new_d_rep_script_hash(a: number): number;
export function voter_new_staking_pool_key_hash(a: number): number;
export function voter_kind(a: number): number;
export function voter_as_constitutional_committee_hot_key_hash(a: number): number;
export function voter_as_constitutional_committee_hot_script_hash(a: number): number;
export function voter_as_d_rep_key_hash(a: number): number;
export function voter_as_d_rep_script_hash(a: number): number;
export function voter_as_staking_pool_key_hash(a: number): number;
export function __wbg_votingprocedure_free(a: number): void;
export function votingprocedure_to_cbor_bytes(a: number, b: number): void;
export function votingprocedure_from_cbor_bytes(a: number, b: number, c: number): void;
export function votingprocedure_to_cbor_hex(a: number, b: number): void;
export function votingprocedure_from_cbor_hex(a: number, b: number, c: number): void;
export function votingprocedure_to_json(a: number, b: number): void;
export function votingprocedure_to_js_value(a: number, b: number): void;
export function votingprocedure_from_json(a: number, b: number, c: number): void;
export function votingprocedure_vote(a: number): number;
export function votingprocedure_anchor(a: number): number;
export function votingprocedure_new(a: number, b: number): number;
export function __wbg_votingprocedures_free(a: number): void;
export function votingprocedures_new(): number;
export function votingprocedures_len(a: number): number;
export function votingprocedures_insert(a: number, b: number, c: number): number;
export function votingprocedures_get(a: number, b: number): number;
export function votingprocedures_keys(a: number): number;
export function __wbg_withdrawalbuilderresult_free(a: number): void;
export function __wbg_singlewithdrawalbuilder_free(a: number): void;
export function singlewithdrawalbuilder_new(a: number, b: number): number;
export function singlewithdrawalbuilder_payment_key(a: number, b: number): void;
export function singlewithdrawalbuilder_native_script(a: number, b: number, c: number, d: number): void;
export function singlewithdrawalbuilder_plutus_script(a: number, b: number, c: number, d: number): void;
export function __wbg_auxiliarydata_free(a: number): void;
export function auxiliarydata_to_cbor_bytes(a: number, b: number): void;
export function auxiliarydata_from_cbor_bytes(a: number, b: number, c: number): void;
export function auxiliarydata_to_cbor_hex(a: number, b: number): void;
export function auxiliarydata_from_cbor_hex(a: number, b: number, c: number): void;
export function auxiliarydata_to_json(a: number, b: number): void;
export function auxiliarydata_to_js_value(a: number, b: number): void;
export function auxiliarydata_from_json(a: number, b: number, c: number): void;
export function auxiliarydata_new_shelley(a: number): number;
export function auxiliarydata_new_shelley_m_a(a: number): number;
export function auxiliarydata_new_conway(a: number): number;
export function auxiliarydata_kind(a: number): number;
export function auxiliarydata_as_shelley(a: number): number;
export function auxiliarydata_as_shelley_m_a(a: number): number;
export function auxiliarydata_as_conway(a: number): number;
export function __wbg_conwayformatauxdata_free(a: number): void;
export function conwayformatauxdata_to_cbor_bytes(a: number, b: number): void;
export function conwayformatauxdata_from_cbor_bytes(a: number, b: number, c: number): void;
export function conwayformatauxdata_to_cbor_hex(a: number, b: number): void;
export function conwayformatauxdata_from_cbor_hex(a: number, b: number, c: number): void;
export function conwayformatauxdata_to_json(a: number, b: number): void;
export function conwayformatauxdata_to_js_value(a: number, b: number): void;
export function conwayformatauxdata_from_json(a: number, b: number, c: number): void;
export function conwayformatauxdata_set_metadata(a: number, b: number): void;
export function conwayformatauxdata_metadata(a: number): number;
export function conwayformatauxdata_set_native_scripts(a: number, b: number): void;
export function conwayformatauxdata_native_scripts(a: number): number;
export function conwayformatauxdata_set_plutus_v1_scripts(a: number, b: number): void;
export function conwayformatauxdata_plutus_v1_scripts(a: number): number;
export function conwayformatauxdata_set_plutus_v2_scripts(a: number, b: number): void;
export function conwayformatauxdata_plutus_v2_scripts(a: number): number;
export function conwayformatauxdata_set_plutus_v3_scripts(a: number, b: number): void;
export function conwayformatauxdata_plutus_v3_scripts(a: number): number;
export function conwayformatauxdata_new(): number;
export function __wbg_shelleymaformatauxdata_free(a: number): void;
export function shelleymaformatauxdata_to_cbor_bytes(a: number, b: number): void;
export function shelleymaformatauxdata_from_cbor_bytes(a: number, b: number, c: number): void;
export function shelleymaformatauxdata_to_cbor_hex(a: number, b: number): void;
export function shelleymaformatauxdata_from_cbor_hex(a: number, b: number, c: number): void;
export function shelleymaformatauxdata_to_json(a: number, b: number): void;
export function shelleymaformatauxdata_to_js_value(a: number, b: number): void;
export function shelleymaformatauxdata_from_json(a: number, b: number, c: number): void;
export function shelleymaformatauxdata_transaction_metadata(a: number): number;
export function shelleymaformatauxdata_auxiliary_scripts(a: number): number;
export function shelleymaformatauxdata_new(a: number, b: number): number;
export function __wbg_addrattributes_free(a: number): void;
export function addrattributes_to_cbor_bytes(a: number, b: number): void;
export function addrattributes_from_cbor_bytes(a: number, b: number, c: number): void;
export function addrattributes_to_cbor_hex(a: number, b: number): void;
export function addrattributes_from_cbor_hex(a: number, b: number, c: number): void;
export function addrattributes_set_stake_distribution(a: number, b: number): void;
export function addrattributes_stake_distribution(a: number): number;
export function addrattributes_set_derivation_path(a: number, b: number): void;
export function addrattributes_derivation_path(a: number): number;
export function addrattributes_set_protocol_magic(a: number, b: number): void;
export function addrattributes_protocol_magic(a: number): number;
export function addrattributes_new(): number;
export function __wbg_addresscontent_free(a: number): void;
export function addresscontent_to_cbor_bytes(a: number, b: number): void;
export function addresscontent_from_cbor_bytes(a: number, b: number, c: number): void;
export function addresscontent_to_cbor_hex(a: number, b: number): void;
export function addresscontent_from_cbor_hex(a: number, b: number, c: number): void;
export function addresscontent_address_id(a: number): number;
export function addresscontent_addr_attributes(a: number): number;
export function addresscontent_addr_type(a: number): number;
export function addresscontent_new(a: number, b: number, c: number): number;
export function __wbg_byronaddress_free(a: number): void;
export function byronaddress_to_cbor_bytes(a: number, b: number): void;
export function byronaddress_from_cbor_bytes(a: number, b: number, c: number): void;
export function byronaddress_to_cbor_hex(a: number, b: number): void;
export function byronaddress_from_cbor_hex(a: number, b: number, c: number): void;
export function byronaddress_content(a: number): number;
export function byronaddress_crc(a: number): number;
export function byronaddress_new(a: number, b: number): number;
export function __wbg_hdaddresspayload_free(a: number): void;
export function hdaddresspayload_to_cbor_bytes(a: number, b: number): void;
export function hdaddresspayload_from_cbor_bytes(a: number, b: number, c: number): void;
export function hdaddresspayload_to_cbor_hex(a: number, b: number): void;
export function hdaddresspayload_from_cbor_hex(a: number, b: number, c: number): void;
export function hdaddresspayload_get(a: number, b: number): void;
export function __wbg_spendingdata_free(a: number): void;
export function spendingdata_to_cbor_bytes(a: number, b: number): void;
export function spendingdata_from_cbor_bytes(a: number, b: number, c: number): void;
export function spendingdata_to_cbor_hex(a: number, b: number): void;
export function spendingdata_from_cbor_hex(a: number, b: number, c: number): void;
export function spendingdata_new_spending_data_pub_key(a: number): number;
export function spendingdata_new_spending_data_script(a: number): number;
export function spendingdata_new_spending_data_redeem(a: number): number;
export function spendingdata_kind(a: number): number;
export function spendingdata_as_spending_data_pub_key(a: number): number;
export function spendingdata_as_spending_data_script(a: number): number;
export function spendingdata_as_spending_data_redeem(a: number): number;
export function __wbg_stakedistribution_free(a: number): void;
export function stakedistribution_to_cbor_bytes(a: number, b: number): void;
export function stakedistribution_from_cbor_bytes(a: number, b: number, c: number): void;
export function stakedistribution_to_cbor_hex(a: number, b: number): void;
export function stakedistribution_from_cbor_hex(a: number, b: number, c: number): void;
export function stakedistribution_new_single_key(a: number): number;
export function stakedistribution_new_bootstrap_era(): number;
export function stakedistribution_kind(a: number): number;
export function stakedistribution_as_single_key(a: number): number;
export function __wbg_byrontxout_free(a: number): void;
export function byrontxout_to_cbor_bytes(a: number, b: number): void;
export function byrontxout_from_cbor_bytes(a: number, b: number, c: number): void;
export function byrontxout_to_cbor_hex(a: number, b: number): void;
export function byrontxout_from_cbor_hex(a: number, b: number, c: number): void;
export function byrontxout_address(a: number): number;
export function byrontxout_amount(a: number): number;
export function byrontxout_new(a: number, b: number): number;
export function __wbg_alonzoformattxout_free(a: number): void;
export function alonzoformattxout_to_cbor_bytes(a: number, b: number): void;
export function alonzoformattxout_from_cbor_bytes(a: number, b: number, c: number): void;
export function alonzoformattxout_to_cbor_hex(a: number, b: number): void;
export function alonzoformattxout_from_cbor_hex(a: number, b: number, c: number): void;
export function alonzoformattxout_to_json(a: number, b: number): void;
export function alonzoformattxout_to_js_value(a: number, b: number): void;
export function alonzoformattxout_from_json(a: number, b: number, c: number): void;
export function alonzoformattxout_address(a: number): number;
export function alonzoformattxout_amount(a: number): number;
export function alonzoformattxout_set_datum_hash(a: number, b: number): void;
export function alonzoformattxout_datum_hash(a: number): number;
export function alonzoformattxout_new(a: number, b: number): number;
export function __wbg_conwayformattxout_free(a: number): void;
export function conwayformattxout_to_cbor_bytes(a: number, b: number): void;
export function conwayformattxout_from_cbor_bytes(a: number, b: number, c: number): void;
export function conwayformattxout_to_cbor_hex(a: number, b: number): void;
export function conwayformattxout_from_cbor_hex(a: number, b: number, c: number): void;
export function conwayformattxout_to_json(a: number, b: number): void;
export function conwayformattxout_to_js_value(a: number, b: number): void;
export function conwayformattxout_from_json(a: number, b: number, c: number): void;
export function conwayformattxout_address(a: number): number;
export function conwayformattxout_amount(a: number): number;
export function conwayformattxout_set_datum_option(a: number, b: number): void;
export function conwayformattxout_datum_option(a: number): number;
export function conwayformattxout_set_script_reference(a: number, b: number): void;
export function conwayformattxout_script_reference(a: number): number;
export function conwayformattxout_new(a: number, b: number): number;
export function __wbg_datumoption_free(a: number): void;
export function datumoption_to_cbor_bytes(a: number, b: number): void;
export function datumoption_from_cbor_bytes(a: number, b: number, c: number): void;
export function datumoption_to_cbor_hex(a: number, b: number): void;
export function datumoption_from_cbor_hex(a: number, b: number, c: number): void;
export function datumoption_to_json(a: number, b: number): void;
export function datumoption_to_js_value(a: number, b: number): void;
export function datumoption_from_json(a: number, b: number, c: number): void;
export function datumoption_new_hash(a: number): number;
export function datumoption_new_datum(a: number): number;
export function datumoption_kind(a: number): number;
export function datumoption_as_hash(a: number): number;
export function datumoption_as_datum(a: number): number;
export function __wbg_nativescript_free(a: number): void;
export function nativescript_to_cbor_bytes(a: number, b: number): void;
export function nativescript_from_cbor_bytes(a: number, b: number, c: number): void;
export function nativescript_to_cbor_hex(a: number, b: number): void;
export function nativescript_from_cbor_hex(a: number, b: number, c: number): void;
export function nativescript_to_json(a: number, b: number): void;
export function nativescript_to_js_value(a: number, b: number): void;
export function nativescript_from_json(a: number, b: number, c: number): void;
export function nativescript_new_script_pubkey(a: number): number;
export function nativescript_new_script_all(a: number): number;
export function nativescript_new_script_any(a: number): number;
export function nativescript_new_script_n_of_k(a: number, b: number): number;
export function nativescript_new_script_invalid_before(a: number): number;
export function nativescript_new_script_invalid_hereafter(a: number): number;
export function nativescript_kind(a: number): number;
export function nativescript_as_script_pubkey(a: number): number;
export function nativescript_as_script_all(a: number): number;
export function nativescript_as_script_any(a: number): number;
export function nativescript_as_script_n_of_k(a: number): number;
export function nativescript_as_script_invalid_before(a: number): number;
export function nativescript_as_script_invalid_hereafter(a: number): number;
export function __wbg_requiredsigners_free(a: number): void;
export function requiredsigners_new(): number;
export function requiredsigners_len(a: number): number;
export function requiredsigners_get(a: number, b: number): number;
export function requiredsigners_add(a: number, b: number): void;
export function __wbg_scriptall_free(a: number): void;
export function scriptall_to_cbor_bytes(a: number, b: number): void;
export function scriptall_from_cbor_bytes(a: number, b: number, c: number): void;
export function scriptall_to_cbor_hex(a: number, b: number): void;
export function scriptall_from_cbor_hex(a: number, b: number, c: number): void;
export function scriptall_to_json(a: number, b: number): void;
export function scriptall_to_js_value(a: number, b: number): void;
export function scriptall_from_json(a: number, b: number, c: number): void;
export function scriptall_native_scripts(a: number): number;
export function scriptall_new(a: number): number;
export function __wbg_scriptany_free(a: number): void;
export function scriptany_to_cbor_bytes(a: number, b: number): void;
export function scriptany_from_cbor_bytes(a: number, b: number, c: number): void;
export function scriptany_to_cbor_hex(a: number, b: number): void;
export function scriptany_from_cbor_hex(a: number, b: number, c: number): void;
export function scriptany_to_json(a: number, b: number): void;
export function scriptany_to_js_value(a: number, b: number): void;
export function scriptany_from_json(a: number, b: number, c: number): void;
export function scriptany_native_scripts(a: number): number;
export function __wbg_scriptinvalidbefore_free(a: number): void;
export function scriptinvalidbefore_to_cbor_bytes(a: number, b: number): void;
export function scriptinvalidbefore_from_cbor_bytes(a: number, b: number, c: number): void;
export function scriptinvalidbefore_to_cbor_hex(a: number, b: number): void;
export function scriptinvalidbefore_from_cbor_hex(a: number, b: number, c: number): void;
export function scriptinvalidbefore_to_json(a: number, b: number): void;
export function scriptinvalidbefore_to_js_value(a: number, b: number): void;
export function scriptinvalidbefore_from_json(a: number, b: number, c: number): void;
export function scriptinvalidbefore_before(a: number): number;
export function scriptinvalidbefore_new(a: number): number;
export function __wbg_scriptinvalidhereafter_free(a: number): void;
export function scriptinvalidhereafter_to_cbor_bytes(a: number, b: number): void;
export function scriptinvalidhereafter_from_cbor_bytes(a: number, b: number, c: number): void;
export function scriptinvalidhereafter_to_cbor_hex(a: number, b: number): void;
export function scriptinvalidhereafter_from_cbor_hex(a: number, b: number, c: number): void;
export function scriptinvalidhereafter_to_json(a: number, b: number): void;
export function scriptinvalidhereafter_to_js_value(a: number, b: number): void;
export function scriptinvalidhereafter_from_json(a: number, b: number, c: number): void;
export function scriptinvalidhereafter_after(a: number): number;
export function __wbg_scriptnofk_free(a: number): void;
export function scriptnofk_to_cbor_bytes(a: number, b: number): void;
export function scriptnofk_from_cbor_bytes(a: number, b: number, c: number): void;
export function scriptnofk_to_cbor_hex(a: number, b: number): void;
export function scriptnofk_from_cbor_hex(a: number, b: number, c: number): void;
export function scriptnofk_to_json(a: number, b: number): void;
export function scriptnofk_to_js_value(a: number, b: number): void;
export function scriptnofk_from_json(a: number, b: number, c: number): void;
export function scriptnofk_n(a: number): number;
export function scriptnofk_native_scripts(a: number): number;
export function scriptnofk_new(a: number, b: number): number;
export function __wbg_scriptpubkey_free(a: number): void;
export function scriptpubkey_to_cbor_bytes(a: number, b: number): void;
export function scriptpubkey_from_cbor_bytes(a: number, b: number, c: number): void;
export function scriptpubkey_to_cbor_hex(a: number, b: number): void;
export function scriptpubkey_from_cbor_hex(a: number, b: number, c: number): void;
export function scriptpubkey_to_json(a: number, b: number): void;
export function scriptpubkey_to_js_value(a: number, b: number): void;
export function scriptpubkey_from_json(a: number, b: number, c: number): void;
export function scriptpubkey_ed25519_key_hash(a: number): number;
export function scriptpubkey_new(a: number): number;
export function __wbg_transaction_free(a: number): void;
export function transaction_to_cbor_bytes(a: number, b: number): void;
export function transaction_from_cbor_bytes(a: number, b: number, c: number): void;
export function transaction_to_cbor_hex(a: number, b: number): void;
export function transaction_from_cbor_hex(a: number, b: number, c: number): void;
export function transaction_to_json(a: number, b: number): void;
export function transaction_to_js_value(a: number, b: number): void;
export function transaction_from_json(a: number, b: number, c: number): void;
export function transaction_body(a: number): number;
export function transaction_witness_set(a: number): number;
export function transaction_is_valid(a: number): number;
export function transaction_auxiliary_data(a: number): number;
export function transaction_new(a: number, b: number, c: number, d: number): number;
export function __wbg_transactionbody_free(a: number): void;
export function transactionbody_to_cbor_bytes(a: number, b: number): void;
export function transactionbody_from_cbor_bytes(a: number, b: number, c: number): void;
export function transactionbody_to_cbor_hex(a: number, b: number): void;
export function transactionbody_from_cbor_hex(a: number, b: number, c: number): void;
export function transactionbody_to_json(a: number, b: number): void;
export function transactionbody_to_js_value(a: number, b: number): void;
export function transactionbody_from_json(a: number, b: number, c: number): void;
export function transactionbody_inputs(a: number): number;
export function transactionbody_outputs(a: number): number;
export function transactionbody_fee(a: number): number;
export function transactionbody_set_ttl(a: number, b: number): void;
export function transactionbody_ttl(a: number, b: number): void;
export function transactionbody_set_certs(a: number, b: number): void;
export function transactionbody_certs(a: number): number;
export function transactionbody_set_withdrawals(a: number, b: number): void;
export function transactionbody_withdrawals(a: number): number;
export function transactionbody_set_auxiliary_data_hash(a: number, b: number): void;
export function transactionbody_auxiliary_data_hash(a: number): number;
export function transactionbody_set_validity_interval_start(a: number, b: number): void;
export function transactionbody_validity_interval_start(a: number, b: number): void;
export function transactionbody_set_mint(a: number, b: number): void;
export function transactionbody_mint(a: number): number;
export function transactionbody_set_script_data_hash(a: number, b: number): void;
export function transactionbody_script_data_hash(a: number): number;
export function transactionbody_set_collateral_inputs(a: number, b: number): void;
export function transactionbody_collateral_inputs(a: number): number;
export function transactionbody_set_required_signers(a: number, b: number): void;
export function transactionbody_required_signers(a: number): number;
export function transactionbody_set_network_id(a: number, b: number): void;
export function transactionbody_network_id(a: number): number;
export function transactionbody_set_collateral_return(a: number, b: number): void;
export function transactionbody_collateral_return(a: number): number;
export function transactionbody_set_total_collateral(a: number, b: number): void;
export function transactionbody_total_collateral(a: number, b: number): void;
export function transactionbody_set_reference_inputs(a: number, b: number): void;
export function transactionbody_reference_inputs(a: number): number;
export function transactionbody_set_voting_procedures(a: number, b: number): void;
export function transactionbody_voting_procedures(a: number): number;
export function transactionbody_set_proposal_procedures(a: number, b: number): void;
export function transactionbody_proposal_procedures(a: number): number;
export function transactionbody_set_current_treasury_value(a: number, b: number): void;
export function transactionbody_current_treasury_value(a: number, b: number): void;
export function transactionbody_set_donation(a: number, b: number): void;
export function transactionbody_donation(a: number, b: number): void;
export function transactionbody_new(a: number, b: number, c: number): number;
export function __wbg_transactioninput_free(a: number): void;
export function transactioninput_to_cbor_bytes(a: number, b: number): void;
export function transactioninput_from_cbor_bytes(a: number, b: number, c: number): void;
export function transactioninput_to_cbor_hex(a: number, b: number): void;
export function transactioninput_from_cbor_hex(a: number, b: number, c: number): void;
export function transactioninput_to_json(a: number, b: number): void;
export function transactioninput_to_js_value(a: number, b: number): void;
export function transactioninput_from_json(a: number, b: number, c: number): void;
export function transactioninput_transaction_id(a: number): number;
export function transactioninput_index(a: number): number;
export function transactioninput_new(a: number, b: number): number;
export function __wbg_transactionoutput_free(a: number): void;
export function transactionoutput_to_cbor_bytes(a: number, b: number): void;
export function transactionoutput_from_cbor_bytes(a: number, b: number, c: number): void;
export function transactionoutput_to_cbor_hex(a: number, b: number): void;
export function transactionoutput_from_cbor_hex(a: number, b: number, c: number): void;
export function transactionoutput_to_json(a: number, b: number): void;
export function transactionoutput_to_js_value(a: number, b: number): void;
export function transactionoutput_from_json(a: number, b: number, c: number): void;
export function transactionoutput_new_alonzo_format_tx_out(a: number): number;
export function transactionoutput_new_conway_format_tx_out(a: number): number;
export function transactionoutput_kind(a: number): number;
export function transactionoutput_as_alonzo_format_tx_out(a: number): number;
export function transactionoutput_as_conway_format_tx_out(a: number): number;
export function __wbg_transactionwitnessset_free(a: number): void;
export function transactionwitnessset_to_cbor_bytes(a: number, b: number): void;
export function transactionwitnessset_from_cbor_bytes(a: number, b: number, c: number): void;
export function transactionwitnessset_to_cbor_hex(a: number, b: number): void;
export function transactionwitnessset_from_cbor_hex(a: number, b: number, c: number): void;
export function transactionwitnessset_to_json(a: number, b: number): void;
export function transactionwitnessset_to_js_value(a: number, b: number): void;
export function transactionwitnessset_from_json(a: number, b: number, c: number): void;
export function transactionwitnessset_set_vkeywitnesses(a: number, b: number): void;
export function transactionwitnessset_vkeywitnesses(a: number): number;
export function transactionwitnessset_set_native_scripts(a: number, b: number): void;
export function transactionwitnessset_native_scripts(a: number): number;
export function transactionwitnessset_set_bootstrap_witnesses(a: number, b: number): void;
export function transactionwitnessset_bootstrap_witnesses(a: number): number;
export function transactionwitnessset_set_plutus_v1_scripts(a: number, b: number): void;
export function transactionwitnessset_plutus_v1_scripts(a: number): number;
export function transactionwitnessset_set_plutus_datums(a: number, b: number): void;
export function transactionwitnessset_plutus_datums(a: number): number;
export function transactionwitnessset_set_redeemers(a: number, b: number): void;
export function transactionwitnessset_redeemers(a: number): number;
export function transactionwitnessset_set_plutus_v2_scripts(a: number, b: number): void;
export function transactionwitnessset_plutus_v2_scripts(a: number): number;
export function transactionwitnessset_set_plutus_v3_scripts(a: number, b: number): void;
export function transactionwitnessset_plutus_v3_scripts(a: number): number;
export function transactionwitnessset_new(): number;
export function scriptinvalidhereafter_new(a: number): number;
export function scriptany_new(a: number): number;
export function __wbg_assetname_free(a: number): void;
export function assetname_to_cbor_bytes(a: number, b: number): void;
export function assetname_from_cbor_bytes(a: number, b: number, c: number): void;
export function assetname_to_cbor_hex(a: number, b: number): void;
export function assetname_from_cbor_hex(a: number, b: number, c: number): void;
export function assetname_to_json(a: number, b: number): void;
export function assetname_to_js_value(a: number, b: number): void;
export function assetname_from_json(a: number, b: number, c: number): void;
export function assetname_get(a: number, b: number): void;
export function __wbg_addressid_free(a: number): void;
export function addressid_to_raw_bytes(a: number, b: number): void;
export function addressid_to_bech32(a: number, b: number, c: number, d: number): void;
export function addressid_to_hex(a: number, b: number): void;
export function addressid_from_bech32(a: number, b: number, c: number): void;
export function addressid_from_hex(a: number, b: number, c: number): void;
export function addressid_from_raw_bytes(a: number, b: number, c: number): void;
export function __wbg_byronscript_free(a: number): void;
export function byronscript_to_raw_bytes(a: number, b: number): void;
export function byronscript_to_bech32(a: number, b: number, c: number, d: number): void;
export function byronscript_to_hex(a: number, b: number): void;
export function byronscript_from_bech32(a: number, b: number, c: number): void;
export function byronscript_from_hex(a: number, b: number, c: number): void;
export function byronscript_from_raw_bytes(a: number, b: number, c: number): void;
export function __wbg_stakeholderid_free(a: number): void;
export function stakeholderid_to_raw_bytes(a: number, b: number): void;
export function stakeholderid_to_bech32(a: number, b: number, c: number, d: number): void;
export function stakeholderid_to_hex(a: number, b: number): void;
export function stakeholderid_from_bech32(a: number, b: number, c: number): void;
export function stakeholderid_from_hex(a: number, b: number, c: number): void;
export function stakeholderid_from_raw_bytes(a: number, b: number, c: number): void;
export function stakeholderid_new(a: number): number;
export function addrattributes_new_bootstrap_era(a: number, b: number): number;
export function addrattributes_new_single_key(a: number, b: number, c: number): number;
export function addressid_new(a: number, b: number, c: number): number;
export function addresscontent_hash_and_create(a: number, b: number, c: number): number;
export function addresscontent_new_redeem(a: number, b: number): number;
export function addresscontent_new_simple(a: number, b: number): number;
export function addresscontent_to_address(a: number): number;
export function addresscontent_byron_protocol_magic(a: number): number;
export function addresscontent_network_id(a: number, b: number): void;
export function addresscontent_icarus_from_key(a: number, b: number): number;
export function addresscontent_identical_with_pubkey(a: number, b: number): number;
export function byronaddress_to_base58(a: number, b: number): void;
export function byronaddress_from_base58(a: number, b: number, c: number): void;
export function byronaddress_is_valid(a: number, b: number): number;
export function byronaddress_to_address(a: number): number;
export function byronaddress_from_address(a: number): number;
export function byronaddress_from_address_content(a: number): number;
export function __wbg_protocolmagic_free(a: number): void;
export function protocolmagic_new(a: number): number;
export function protocolmagic_to_int(a: number): number;
export function make_daedalus_bootstrap_witness(a: number, b: number, c: number): number;
export function make_icarus_bootstrap_witness(a: number, b: number, c: number): number;
export function get_implicit_input(a: number, b: number, c: number, d: number): void;
export function get_deposit(a: number, b: number, c: number, d: number): void;
export function min_ada_required(a: number, b: number, c: number): void;
export function transactionoutput_new(a: number, b: number, c: number, d: number): number;
export function transactionoutput_address(a: number): number;
export function transactionoutput_amount(a: number): number;
export function transactionoutput_set_amount(a: number, b: number): void;
export function transactionoutput_datum(a: number): number;
export function transactionoutput_datum_hash(a: number): number;
export function transactionoutput_script_ref(a: number): number;
export function nativescript_get_required_signers(a: number): number;
export function nativescript_hash(a: number): number;
export function transactionwitnessset_add_all_witnesses(a: number, b: number): void;
export function transactionwitnessset_languages(a: number): number;
export function __wbg_metadatumlist_free(a: number): void;
export function metadatumlist_new(): number;
export function metadatumlist_len(a: number): number;
export function metadatumlist_get(a: number, b: number): number;
export function metadatumlist_add(a: number, b: number): void;
export function __wbg_transactionmetadatumlabels_free(a: number): void;
export function transactionmetadatumlabels_len(a: number): number;
export function transactionmetadatumlabels_get(a: number, b: number): number;
export function transactionmetadatumlabels_add(a: number, b: number): void;
export function __wbg_metadatummap_free(a: number): void;
export function metadatummap_new(): number;
export function metadatummap_len(a: number): number;
export function metadatummap_set(a: number, b: number, c: number): void;
export function metadatummap_get(a: number, b: number): number;
export function metadatummap_get_all(a: number, b: number): number;
export function metadatummap_keys(a: number): number;
export function __wbg_transactionmetadatumlist_free(a: number): void;
export function transactionmetadatumlist_len(a: number): number;
export function transactionmetadatumlist_get(a: number, b: number): number;
export function transactionmetadatumlist_add(a: number, b: number): void;
export function __wbg_metadata_free(a: number): void;
export function metadata_new(): number;
export function metadata_len(a: number): number;
export function metadata_set(a: number, b: number, c: number): void;
export function metadata_get(a: number, b: number): number;
export function metadata_get_all(a: number, b: number): number;
export function metadata_labels(a: number): number;
export function __wbg_transactionmetadatum_free(a: number): void;
export function transactionmetadatum_to_cbor_bytes(a: number, b: number): void;
export function transactionmetadatum_from_cbor_bytes(a: number, b: number, c: number): void;
export function transactionmetadatum_to_json(a: number, b: number): void;
export function transactionmetadatum_to_json_value(a: number, b: number): void;
export function transactionmetadatum_from_json(a: number, b: number, c: number): void;
export function transactionmetadatum_new_map(a: number): number;
export function transactionmetadatum_new_list(a: number): number;
export function transactionmetadatum_new_int(a: number): number;
export function transactionmetadatum_new_bytes(a: number, b: number, c: number): void;
export function transactionmetadatum_new_text(a: number, b: number, c: number): void;
export function transactionmetadatum_kind(a: number): number;
export function transactionmetadatum_as_map(a: number): number;
export function transactionmetadatum_as_list(a: number): number;
export function transactionmetadatum_as_int(a: number): number;
export function transactionmetadatum_as_bytes(a: number, b: number): void;
export function transactionmetadatum_as_text(a: number, b: number): void;
export function encode_arbitrary_bytes_as_metadatum(a: number, b: number): number;
export function decode_arbitrary_bytes_from_metadatum(a: number, b: number): void;
export function __wbg_crc32_free(a: number): void;
export function crc32_new(): number;
export function crc32_update(a: number, b: number, c: number): void;
export function crc32_finalize(a: number): number;
export function encode_json_str_to_metadatum(a: number, b: number, c: number, d: number): void;
export function decode_metadatum_to_json_str(a: number, b: number, c: number): void;
export function encode_json_str_to_plutus_datum(a: number, b: number, c: number, d: number): void;
export function decode_plutus_datum_to_json_str(a: number, b: number, c: number): void;
export function transactionmetadatumlabels_new(): number;
export function transactionmetadatumlist_new(): number;
export function __wbg_assetnamelist_free(a: number): void;
export function assetnamelist_new(): number;
export function assetnamelist_len(a: number): number;
export function assetnamelist_get(a: number, b: number): number;
export function assetnamelist_add(a: number, b: number): void;
export function __wbg_bootstrapwitnesslist_free(a: number): void;
export function bootstrapwitnesslist_len(a: number): number;
export function bootstrapwitnesslist_get(a: number, b: number): number;
export function bootstrapwitnesslist_add(a: number, b: number): void;
export function __wbg_certificatelist_free(a: number): void;
export function certificatelist_new(): number;
export function certificatelist_len(a: number): number;
export function certificatelist_get(a: number, b: number): number;
export function certificatelist_add(a: number, b: number): void;
export function __wbg_committeecoldcredentiallist_free(a: number): void;
export function committeecoldcredentiallist_len(a: number): number;
export function committeecoldcredentiallist_get(a: number, b: number): number;
export function committeecoldcredentiallist_add(a: number, b: number): void;
export function __wbg_drepvotingthresholds_free(a: number): void;
export function drepvotingthresholds_to_cbor_bytes(a: number, b: number): void;
export function drepvotingthresholds_from_cbor_bytes(a: number, b: number, c: number): void;
export function drepvotingthresholds_to_cbor_hex(a: number, b: number): void;
export function drepvotingthresholds_from_cbor_hex(a: number, b: number, c: number): void;
export function drepvotingthresholds_to_json(a: number, b: number): void;
export function drepvotingthresholds_to_js_value(a: number, b: number): void;
export function drepvotingthresholds_from_json(a: number, b: number, c: number): void;
export function drepvotingthresholds_motion_no_confidence(a: number): number;
export function drepvotingthresholds_committee_normal(a: number): number;
export function drepvotingthresholds_committee_no_confidence(a: number): number;
export function drepvotingthresholds_update_constitution(a: number): number;
export function drepvotingthresholds_hard_fork_initiation(a: number): number;
export function drepvotingthresholds_pp_network_group(a: number): number;
export function drepvotingthresholds_pp_economic_group(a: number): number;
export function drepvotingthresholds_pp_technical_group(a: number): number;
export function drepvotingthresholds_pp_governance_group(a: number): number;
export function drepvotingthresholds_treasury_withdrawal(a: number): number;
export function drepvotingthresholds_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): number;
export function __wbg_ed25519keyhashlist_free(a: number): void;
export function ed25519keyhashlist_new(): number;
export function ed25519keyhashlist_len(a: number): number;
export function ed25519keyhashlist_get(a: number, b: number): number;
export function ed25519keyhashlist_add(a: number, b: number): void;
export function __wbg_govactionidlist_free(a: number): void;
export function govactionidlist_len(a: number): number;
export function govactionidlist_get(a: number, b: number): number;
export function govactionidlist_add(a: number, b: number): void;
export function __wbg_intlist_free(a: number): void;
export function intlist_len(a: number): number;
export function intlist_get(a: number, b: number): number;
export function intlist_add(a: number, b: number): void;
export function __wbg_mapassetnametononzeroint64_free(a: number): void;
export function mapassetnametononzeroint64_new(): number;
export function mapassetnametononzeroint64_len(a: number): number;
export function mapassetnametononzeroint64_insert(a: number, b: number, c: number, d: number): void;
export function mapassetnametononzeroint64_get(a: number, b: number, c: number): void;
export function mapassetnametononzeroint64_keys(a: number): number;
export function __wbg_mapassetnametou64_free(a: number): void;
export function mapassetnametou64_new(): number;
export function mapassetnametou64_len(a: number): number;
export function mapassetnametou64_insert(a: number, b: number, c: number, d: number): void;
export function mapassetnametou64_get(a: number, b: number, c: number): void;
export function mapassetnametou64_keys(a: number): number;
export function __wbg_mapcommitteecoldcredentialtoepoch_free(a: number): void;
export function mapcommitteecoldcredentialtoepoch_new(): number;
export function mapcommitteecoldcredentialtoepoch_len(a: number): number;
export function mapcommitteecoldcredentialtoepoch_insert(a: number, b: number, c: number, d: number): void;
export function mapcommitteecoldcredentialtoepoch_get(a: number, b: number, c: number): void;
export function mapcommitteecoldcredentialtoepoch_keys(a: number): number;
export function __wbg_mapgovactionidtovotingprocedure_free(a: number): void;
export function mapgovactionidtovotingprocedure_new(): number;
export function mapgovactionidtovotingprocedure_len(a: number): number;
export function mapgovactionidtovotingprocedure_insert(a: number, b: number, c: number): number;
export function mapgovactionidtovotingprocedure_get(a: number, b: number): number;
export function mapgovactionidtovotingprocedure_keys(a: number): number;
export function __wbg_mapplutusdatatoplutusdata_free(a: number): void;
export function mapplutusdatatoplutusdata_new(): number;
export function mapplutusdatatoplutusdata_len(a: number): number;
export function mapplutusdatatoplutusdata_insert(a: number, b: number, c: number): number;
export function mapplutusdatatoplutusdata_get(a: number, b: number): number;
export function mapplutusdatatoplutusdata_keys(a: number): number;
export function __wbg_maprewardaccounttocoin_free(a: number): void;
export function maprewardaccounttocoin_new(): number;
export function maprewardaccounttocoin_len(a: number): number;
export function maprewardaccounttocoin_insert(a: number, b: number, c: number, d: number): void;
export function maprewardaccounttocoin_get(a: number, b: number, c: number): void;
export function maprewardaccounttocoin_keys(a: number): number;
export function __wbg_mapstakecredentialtodeltacoin_free(a: number): void;
export function mapstakecredentialtodeltacoin_new(): number;
export function mapstakecredentialtodeltacoin_len(a: number): number;
export function mapstakecredentialtodeltacoin_insert(a: number, b: number, c: number): number;
export function mapstakecredentialtodeltacoin_get(a: number, b: number): number;
export function mapstakecredentialtodeltacoin_keys(a: number): number;
export function __wbg_maptransactionindextoauxiliarydata_free(a: number): void;
export function maptransactionindextoauxiliarydata_new(): number;
export function maptransactionindextoauxiliarydata_len(a: number): number;
export function maptransactionindextoauxiliarydata_insert(a: number, b: number, c: number): number;
export function maptransactionindextoauxiliarydata_get(a: number, b: number): number;
export function maptransactionindextoauxiliarydata_keys(a: number, b: number): void;
export function __wbg_maptransactionmetadatumtotransactionmetadatum_free(a: number): void;
export function maptransactionmetadatumtotransactionmetadatum_new(): number;
export function maptransactionmetadatumtotransactionmetadatum_len(a: number): number;
export function maptransactionmetadatumtotransactionmetadatum_insert(a: number, b: number, c: number): number;
export function maptransactionmetadatumtotransactionmetadatum_get(a: number, b: number): number;
export function maptransactionmetadatumtotransactionmetadatum_keys(a: number): number;
export function __wbg_nativescriptlist_free(a: number): void;
export function nativescriptlist_len(a: number): number;
export function nativescriptlist_get(a: number, b: number): number;
export function nativescriptlist_add(a: number, b: number): void;
export function __wbg_plutusdatalist_free(a: number): void;
export function plutusdatalist_len(a: number): number;
export function plutusdatalist_get(a: number, b: number): number;
export function plutusdatalist_add(a: number, b: number): void;
export function __wbg_plutusv1scriptlist_free(a: number): void;
export function plutusv1scriptlist_len(a: number): number;
export function plutusv1scriptlist_get(a: number, b: number): number;
export function plutusv1scriptlist_add(a: number, b: number): void;
export function __wbg_plutusv2scriptlist_free(a: number): void;
export function plutusv2scriptlist_len(a: number): number;
export function plutusv2scriptlist_get(a: number, b: number): number;
export function plutusv2scriptlist_add(a: number, b: number): void;
export function __wbg_plutusv3scriptlist_free(a: number): void;
export function plutusv3scriptlist_len(a: number): number;
export function plutusv3scriptlist_get(a: number, b: number): number;
export function plutusv3scriptlist_add(a: number, b: number): void;
export function __wbg_policyidlist_free(a: number): void;
export function policyidlist_len(a: number): number;
export function policyidlist_get(a: number, b: number): number;
export function policyidlist_add(a: number, b: number): void;
export function __wbg_poolvotingthresholds_free(a: number): void;
export function poolvotingthresholds_to_cbor_bytes(a: number, b: number): void;
export function poolvotingthresholds_from_cbor_bytes(a: number, b: number, c: number): void;
export function poolvotingthresholds_to_cbor_hex(a: number, b: number): void;
export function poolvotingthresholds_from_cbor_hex(a: number, b: number, c: number): void;
export function poolvotingthresholds_to_json(a: number, b: number): void;
export function poolvotingthresholds_to_js_value(a: number, b: number): void;
export function poolvotingthresholds_from_json(a: number, b: number, c: number): void;
export function poolvotingthresholds_motion_no_confidence(a: number): number;
export function poolvotingthresholds_committee_normal(a: number): number;
export function poolvotingthresholds_committee_no_confidence(a: number): number;
export function poolvotingthresholds_hard_fork_initiation(a: number): number;
export function poolvotingthresholds_new(a: number, b: number, c: number, d: number): number;
export function __wbg_proposalprocedurelist_free(a: number): void;
export function proposalprocedurelist_len(a: number): number;
export function proposalprocedurelist_get(a: number, b: number): number;
export function proposalprocedurelist_add(a: number, b: number): void;
export function __wbg_protocolparamupdate_free(a: number): void;
export function protocolparamupdate_to_cbor_bytes(a: number, b: number): void;
export function protocolparamupdate_from_cbor_bytes(a: number, b: number, c: number): void;
export function protocolparamupdate_to_cbor_hex(a: number, b: number): void;
export function protocolparamupdate_from_cbor_hex(a: number, b: number, c: number): void;
export function protocolparamupdate_to_json(a: number, b: number): void;
export function protocolparamupdate_to_js_value(a: number, b: number): void;
export function protocolparamupdate_from_json(a: number, b: number, c: number): void;
export function protocolparamupdate_set_minfee_a(a: number, b: number): void;
export function protocolparamupdate_minfee_a(a: number, b: number): void;
export function protocolparamupdate_set_minfee_b(a: number, b: number): void;
export function protocolparamupdate_minfee_b(a: number, b: number): void;
export function protocolparamupdate_set_max_block_body_size(a: number, b: number): void;
export function protocolparamupdate_max_block_body_size(a: number, b: number): void;
export function protocolparamupdate_set_max_transaction_size(a: number, b: number): void;
export function protocolparamupdate_max_transaction_size(a: number, b: number): void;
export function protocolparamupdate_set_max_block_header_size(a: number, b: number): void;
export function protocolparamupdate_max_block_header_size(a: number, b: number): void;
export function protocolparamupdate_set_key_deposit(a: number, b: number): void;
export function protocolparamupdate_key_deposit(a: number, b: number): void;
export function protocolparamupdate_set_pool_deposit(a: number, b: number): void;
export function protocolparamupdate_pool_deposit(a: number, b: number): void;
export function protocolparamupdate_set_maximum_epoch(a: number, b: number): void;
export function protocolparamupdate_maximum_epoch(a: number, b: number): void;
export function protocolparamupdate_set_n_opt(a: number, b: number): void;
export function protocolparamupdate_n_opt(a: number, b: number): void;
export function protocolparamupdate_set_pool_pledge_influence(a: number, b: number): void;
export function protocolparamupdate_pool_pledge_influence(a: number): number;
export function protocolparamupdate_set_expansion_rate(a: number, b: number): void;
export function protocolparamupdate_expansion_rate(a: number): number;
export function protocolparamupdate_set_treasury_growth_rate(a: number, b: number): void;
export function protocolparamupdate_treasury_growth_rate(a: number): number;
export function protocolparamupdate_set_min_pool_cost(a: number, b: number): void;
export function protocolparamupdate_min_pool_cost(a: number, b: number): void;
export function protocolparamupdate_set_ada_per_utxo_byte(a: number, b: number): void;
export function protocolparamupdate_ada_per_utxo_byte(a: number, b: number): void;
export function protocolparamupdate_set_cost_models_for_script_languages(a: number, b: number): void;
export function protocolparamupdate_cost_models_for_script_languages(a: number): number;
export function protocolparamupdate_set_execution_costs(a: number, b: number): void;
export function protocolparamupdate_execution_costs(a: number): number;
export function protocolparamupdate_set_max_tx_ex_units(a: number, b: number): void;
export function protocolparamupdate_max_tx_ex_units(a: number): number;
export function protocolparamupdate_set_max_block_ex_units(a: number, b: number): void;
export function protocolparamupdate_max_block_ex_units(a: number): number;
export function protocolparamupdate_set_max_value_size(a: number, b: number): void;
export function protocolparamupdate_max_value_size(a: number, b: number): void;
export function protocolparamupdate_set_collateral_percentage(a: number, b: number): void;
export function protocolparamupdate_collateral_percentage(a: number, b: number): void;
export function protocolparamupdate_set_max_collateral_inputs(a: number, b: number): void;
export function protocolparamupdate_max_collateral_inputs(a: number, b: number): void;
export function protocolparamupdate_set_pool_voting_thresholds(a: number, b: number): void;
export function protocolparamupdate_pool_voting_thresholds(a: number): number;
export function protocolparamupdate_set_d_rep_voting_thresholds(a: number, b: number): void;
export function protocolparamupdate_d_rep_voting_thresholds(a: number): number;
export function protocolparamupdate_set_min_committee_size(a: number, b: number): void;
export function protocolparamupdate_min_committee_size(a: number, b: number): void;
export function protocolparamupdate_set_committee_term_limit(a: number, b: number): void;
export function protocolparamupdate_committee_term_limit(a: number, b: number): void;
export function protocolparamupdate_set_governance_action_validity_period(a: number, b: number): void;
export function protocolparamupdate_governance_action_validity_period(a: number, b: number): void;
export function protocolparamupdate_set_governance_action_deposit(a: number, b: number): void;
export function protocolparamupdate_governance_action_deposit(a: number, b: number): void;
export function protocolparamupdate_set_d_rep_deposit(a: number, b: number): void;
export function protocolparamupdate_d_rep_deposit(a: number, b: number): void;
export function protocolparamupdate_set_d_rep_inactivity_period(a: number, b: number): void;
export function protocolparamupdate_d_rep_inactivity_period(a: number, b: number): void;
export function protocolparamupdate_new(): number;
export function __wbg_rational_free(a: number): void;
export function rational_to_cbor_bytes(a: number, b: number): void;
export function rational_from_cbor_bytes(a: number, b: number, c: number): void;
export function rational_to_cbor_hex(a: number, b: number): void;
export function rational_from_cbor_hex(a: number, b: number, c: number): void;
export function rational_to_json(a: number, b: number): void;
export function rational_to_js_value(a: number, b: number): void;
export function rational_from_json(a: number, b: number, c: number): void;
export function rational_numerator(a: number): number;
export function rational_denominator(a: number): number;
export function rational_new(a: number, b: number): number;
export function __wbg_redeemerlist_free(a: number): void;
export function redeemerlist_len(a: number): number;
export function redeemerlist_get(a: number, b: number): number;
export function redeemerlist_add(a: number, b: number): void;
export function __wbg_relaylist_free(a: number): void;
export function relaylist_len(a: number): number;
export function relaylist_get(a: number, b: number): number;
export function relaylist_add(a: number, b: number): void;
export function __wbg_rewardaccountlist_free(a: number): void;
export function rewardaccountlist_len(a: number): number;
export function rewardaccountlist_get(a: number, b: number): number;
export function rewardaccountlist_add(a: number, b: number): void;
export function __wbg_script_free(a: number): void;
export function script_to_cbor_bytes(a: number, b: number): void;
export function script_from_cbor_bytes(a: number, b: number, c: number): void;
export function script_to_cbor_hex(a: number, b: number): void;
export function script_from_cbor_hex(a: number, b: number, c: number): void;
export function script_to_json(a: number, b: number): void;
export function script_to_js_value(a: number, b: number): void;
export function script_from_json(a: number, b: number, c: number): void;
export function script_new_native(a: number): number;
export function script_new_plutus_v1(a: number): number;
export function script_new_plutus_v2(a: number): number;
export function script_new_plutus_v3(a: number): number;
export function script_kind(a: number): number;
export function script_as_native(a: number): number;
export function script_as_plutus_v1(a: number): number;
export function script_as_plutus_v2(a: number): number;
export function script_as_plutus_v3(a: number): number;
export function __wbg_stakecredentiallist_free(a: number): void;
export function stakecredentiallist_len(a: number): number;
export function stakecredentiallist_get(a: number, b: number): number;
export function stakecredentiallist_add(a: number, b: number): void;
export function __wbg_transactionbodylist_free(a: number): void;
export function transactionbodylist_len(a: number): number;
export function transactionbodylist_get(a: number, b: number): number;
export function transactionbodylist_add(a: number, b: number): void;
export function __wbg_transactioninputlist_free(a: number): void;
export function transactioninputlist_len(a: number): number;
export function transactioninputlist_get(a: number, b: number): number;
export function transactioninputlist_add(a: number, b: number): void;
export function __wbg_transactionoutputlist_free(a: number): void;
export function transactionoutputlist_len(a: number): number;
export function transactionoutputlist_get(a: number, b: number): number;
export function transactionoutputlist_add(a: number, b: number): void;
export function __wbg_transactionwitnesssetlist_free(a: number): void;
export function transactionwitnesssetlist_len(a: number): number;
export function transactionwitnesssetlist_get(a: number, b: number): number;
export function transactionwitnesssetlist_add(a: number, b: number): void;
export function __wbg_unitinterval_free(a: number): void;
export function unitinterval_to_cbor_bytes(a: number, b: number): void;
export function unitinterval_from_cbor_bytes(a: number, b: number, c: number): void;
export function unitinterval_to_cbor_hex(a: number, b: number): void;
export function unitinterval_from_cbor_hex(a: number, b: number, c: number): void;
export function unitinterval_to_json(a: number, b: number): void;
export function unitinterval_to_js_value(a: number, b: number): void;
export function unitinterval_from_json(a: number, b: number, c: number): void;
export function unitinterval_start(a: number): number;
export function unitinterval_end(a: number): number;
export function __wbg_vkeywitnesslist_free(a: number): void;
export function vkeywitnesslist_len(a: number): number;
export function vkeywitnesslist_get(a: number, b: number): number;
export function vkeywitnesslist_add(a: number, b: number): void;
export function __wbg_voterlist_free(a: number): void;
export function voterlist_len(a: number): number;
export function voterlist_get(a: number, b: number): number;
export function voterlist_add(a: number, b: number): void;
export function unitinterval_new(a: number, b: number): number;
export function proposalprocedurelist_new(): number;
export function bootstrapwitnesslist_new(): number;
export function govactionidlist_new(): number;
export function intlist_new(): number;
export function nativescriptlist_new(): number;
export function plutusdatalist_new(): number;
export function plutusv1scriptlist_new(): number;
export function plutusv2scriptlist_new(): number;
export function plutusv3scriptlist_new(): number;
export function policyidlist_new(): number;
export function committeecoldcredentiallist_new(): number;
export function redeemerlist_new(): number;
export function relaylist_new(): number;
export function rewardaccountlist_new(): number;
export function stakecredentiallist_new(): number;
export function transactionbodylist_new(): number;
export function transactioninputlist_new(): number;
export function transactionoutputlist_new(): number;
export function transactionwitnesssetlist_new(): number;
export function vkeywitnesslist_new(): number;
export function voterlist_new(): number;
export function __wbg_address_free(a: number): void;
export function address_to_json(a: number, b: number): void;
export function address_to_js_value(a: number, b: number): void;
export function address_from_json(a: number, b: number, c: number): void;
export function address_header(a: number): number;
export function address_header_matches_kind(a: number, b: number): number;
export function address_to_bech32(a: number, b: number, c: number, d: number): void;
export function address_from_bech32(a: number, b: number, c: number): void;
export function address_is_valid_bech32(a: number, b: number): number;
export function address_is_valid(a: number, b: number): number;
export function address_network_id(a: number, b: number): void;
export function address_payment_cred(a: number): number;
export function address_staking_cred(a: number): number;
export function address_kind(a: number): number;
export function address_to_raw_bytes(a: number, b: number): void;
export function address_from_raw_bytes(a: number, b: number, c: number): void;
export function address_to_hex(a: number, b: number): void;
export function address_from_hex(a: number, b: number, c: number): void;
export function __wbg_baseaddress_free(a: number): void;
export function baseaddress_new(a: number, b: number, c: number): number;
export function baseaddress_to_address(a: number): number;
export function baseaddress_from_address(a: number): number;
export function baseaddress_network_id(a: number): number;
export function baseaddress_payment(a: number): number;
export function baseaddress_stake(a: number): number;
export function __wbg_enterpriseaddress_free(a: number): void;
export function enterpriseaddress_new(a: number, b: number): number;
export function enterpriseaddress_to_address(a: number): number;
export function enterpriseaddress_from_address(a: number): number;
export function enterpriseaddress_network_id(a: number): number;
export function enterpriseaddress_payment(a: number): number;
export function __wbg_pointer_free(a: number): void;
export function __wbg_pointeraddress_free(a: number): void;
export function pointeraddress_new(a: number, b: number, c: number): number;
export function pointeraddress_to_address(a: number): number;
export function pointeraddress_from_address(a: number): number;
export function pointeraddress_network_id(a: number): number;
export function pointeraddress_payment(a: number): number;
export function pointeraddress_stake(a: number): number;
export function __wbg_rewardaddress_free(a: number): void;
export function rewardaddress_to_json(a: number, b: number): void;
export function rewardaddress_to_js_value(a: number, b: number): void;
export function rewardaddress_from_json(a: number, b: number, c: number): void;
export function rewardaddress_to_address(a: number): number;
export function rewardaddress_from_address(a: number): number;
export function rewardaddress_network_id(a: number): number;
export function rewardaddress_payment(a: number): number;
export function __wbg_inputbuilderresult_free(a: number): void;
export function __wbg_singleinputbuilder_free(a: number): void;
export function singleinputbuilder_new(a: number, b: number): number;
export function singleinputbuilder_from_transaction_unspent_output(a: number): number;
export function singleinputbuilder_payment_key(a: number, b: number): void;
export function singleinputbuilder_native_script(a: number, b: number, c: number, d: number): void;
export function singleinputbuilder_plutus_script(a: number, b: number, c: number, d: number, e: number): void;
export function singleinputbuilder_plutus_script_inline_datum(a: number, b: number, c: number, d: number): void;
export function __wbg_mintbuilderresult_free(a: number): void;
export function __wbg_singlemintbuilder_free(a: number): void;
export function singlemintbuilder_new(a: number): number;
export function singlemintbuilder_new_single_asset(a: number, b: number): number;
export function singlemintbuilder_native_script(a: number, b: number, c: number): number;
export function singlemintbuilder_plutus_script(a: number, b: number, c: number): number;
export function __wbg_plutusscriptwitness_free(a: number): void;
export function plutusscriptwitness_new_script(a: number): number;
export function plutusscriptwitness_new_ref(a: number): number;
export function plutusscriptwitness_hash(a: number): number;
export function __wbg_partialplutuswitness_free(a: number): void;
export function partialplutuswitness_new(a: number, b: number): number;
export function partialplutuswitness_script(a: number): number;
export function partialplutuswitness_data(a: number): number;
export function __wbg_inputaggregatewitnessdata_free(a: number): void;
export function inputaggregatewitnessdata_plutus_data(a: number): number;
export function __wbg_requiredwitnessset_free(a: number): void;
export function requiredwitnessset_add_vkey_key_hash(a: number, b: number): void;
export function requiredwitnessset_add_bootstrap(a: number, b: number): void;
export function requiredwitnessset_add_script_ref(a: number, b: number): void;
export function requiredwitnessset_add_script_hash(a: number, b: number): void;
export function requiredwitnessset_add_plutus_datum_hash(a: number, b: number): void;
export function requiredwitnessset_add_redeemer_tag(a: number, b: number): void;
export function requiredwitnessset_add_all(a: number, b: number): void;
export function requiredwitnessset_new(): number;
export function requiredwitnessset_withdrawal_required_wits(a: number, b: number): void;
export function __wbg_transactionwitnesssetbuilder_free(a: number): void;
export function transactionwitnesssetbuilder_add_vkey(a: number, b: number): void;
export function transactionwitnesssetbuilder_add_bootstrap(a: number, b: number): void;
export function transactionwitnesssetbuilder_add_script(a: number, b: number): void;
export function transactionwitnesssetbuilder_get_native_script(a: number): number;
export function transactionwitnesssetbuilder_get_plutus_v1_script(a: number): number;
export function transactionwitnesssetbuilder_get_plutus_v2_script(a: number): number;
export function transactionwitnesssetbuilder_add_plutus_datum(a: number, b: number): void;
export function transactionwitnesssetbuilder_get_plutus_datum(a: number): number;
export function transactionwitnesssetbuilder_add_redeemer(a: number, b: number): void;
export function transactionwitnesssetbuilder_get_redeemer(a: number): number;
export function transactionwitnesssetbuilder_add_required_wits(a: number, b: number): void;
export function transactionwitnesssetbuilder_new(): number;
export function transactionwitnesssetbuilder_add_existing(a: number, b: number): void;
export function transactionwitnesssetbuilder_build(a: number): number;
export function transactionwitnesssetbuilder_remaining_wits(a: number): number;
export function transactionwitnesssetbuilder_try_build(a: number, b: number): void;
export function transactionwitnesssetbuilder_merge_fake_witness(a: number, b: number): void;
export function __wbg_nativescriptwitnessinfo_free(a: number): void;
export function nativescriptwitnessinfo_num_signatures(a: number): number;
export function nativescriptwitnessinfo_vkeys(a: number): number;
export function nativescriptwitnessinfo_assume_signature_count(): number;
export function __wbg_constrplutusdata_free(a: number): void;
export function constrplutusdata_to_cbor_bytes(a: number, b: number): void;
export function constrplutusdata_from_cbor_bytes(a: number, b: number, c: number): void;
export function constrplutusdata_to_cbor_hex(a: number, b: number): void;
export function constrplutusdata_from_cbor_hex(a: number, b: number, c: number): void;
export function constrplutusdata_to_json(a: number, b: number): void;
export function constrplutusdata_to_js_value(a: number, b: number): void;
export function constrplutusdata_from_json(a: number, b: number, c: number): void;
export function constrplutusdata_alternative(a: number): number;
export function constrplutusdata_fields(a: number): number;
export function constrplutusdata_new(a: number, b: number): number;
export function __wbg_plutusmap_free(a: number): void;
export function plutusmap_to_cbor_bytes(a: number, b: number): void;
export function plutusmap_from_cbor_bytes(a: number, b: number, c: number): void;
export function plutusmap_to_cbor_hex(a: number, b: number): void;
export function plutusmap_from_cbor_hex(a: number, b: number, c: number): void;
export function plutusmap_new(): number;
export function plutusmap_len(a: number): number;
export function plutusmap_is_empty(a: number): number;
export function plutusmap_set(a: number, b: number, c: number): void;
export function plutusmap_get(a: number, b: number): number;
export function plutusmap_get_all(a: number, b: number): number;
export function plutusmap_keys(a: number): number;
export function __wbg_plutusscript_free(a: number): void;
export function plutusscript_from_v1(a: number): number;
export function plutusscript_from_v2(a: number): number;
export function plutusscript_from_v3(a: number): number;
export function plutusscript_hash(a: number): number;
export function plutusscript_as_v1(a: number): number;
export function plutusscript_as_v2(a: number): number;
export function plutusscript_as_v3(a: number): number;
export function plutusscript_version(a: number): number;
export function plutusv1script_hash(a: number): number;
export function plutusv2script_hash(a: number): number;
export function exunits_checked_add(a: number, b: number, c: number): void;
export function compute_total_ex_units(a: number, b: number): void;
export function __wbg_languagelist_free(a: number): void;
export function languagelist_new(): number;
export function languagelist_len(a: number): number;
export function languagelist_get(a: number, b: number): number;
export function languagelist_add(a: number, b: number): void;
export function __wbg_biginteger_free(a: number): void;
export function biginteger_to_cbor_bytes(a: number, b: number): void;
export function biginteger_from_cbor_bytes(a: number, b: number, c: number): void;
export function biginteger_to_cbor_hex(a: number, b: number): void;
export function biginteger_from_cbor_hex(a: number, b: number, c: number): void;
export function biginteger_to_json(a: number, b: number): void;
export function biginteger_to_js_value(a: number, b: number): void;
export function biginteger_from_json(a: number, b: number, c: number): void;
export function biginteger_from_int(a: number): number;
export function biginteger_from_str(a: number, b: number, c: number): void;
export function biginteger_to_str(a: number, b: number): void;
export function biginteger_as_u64(a: number, b: number): void;
export function biginteger_as_int(a: number): number;
export function script_hash(a: number): number;
export function script_language(a: number): number;
export function __wbg_networkid_free(a: number): void;
export function networkid_to_cbor_bytes(a: number, b: number): void;
export function networkid_from_cbor_bytes(a: number, b: number, c: number): void;
export function networkid_to_cbor_hex(a: number, b: number): void;
export function networkid_from_cbor_hex(a: number, b: number, c: number): void;
export function networkid_to_json(a: number, b: number): void;
export function networkid_to_js_value(a: number, b: number): void;
export function networkid_from_json(a: number, b: number, c: number): void;
export function networkid_new(a: number): number;
export function networkid_mainnet(): number;
export function networkid_testnet(): number;
export function networkid_network(a: number): number;
export function rewardaddress_new(a: number, b: number): number;
export function __wbg_bip32privatekey_free(a: number): void;
export function bip32privatekey_derive(a: number, b: number): number;
export function bip32privatekey_from_128_xprv(a: number, b: number, c: number): void;
export function bip32privatekey_to_128_xprv(a: number, b: number): void;
export function bip32privatekey_generate_ed25519_bip32(): number;
export function bip32privatekey_to_raw_key(a: number): number;
export function bip32privatekey_to_public(a: number): number;
export function bip32privatekey_from_raw_bytes(a: number, b: number, c: number): void;
export function bip32privatekey_to_raw_bytes(a: number, b: number): void;
export function bip32privatekey_from_bech32(a: number, b: number, c: number): void;
export function bip32privatekey_to_bech32(a: number, b: number): void;
export function bip32privatekey_from_bip39_entropy(a: number, b: number, c: number, d: number): number;
export function bip32privatekey_chaincode(a: number, b: number): void;
export function __wbg_bip32publickey_free(a: number): void;
export function bip32publickey_derive(a: number, b: number, c: number): void;
export function bip32publickey_to_raw_key(a: number): number;
export function bip32publickey_from_raw_bytes(a: number, b: number, c: number): void;
export function bip32publickey_to_raw_bytes(a: number, b: number): void;
export function bip32publickey_from_bech32(a: number, b: number, c: number): void;
export function bip32publickey_to_bech32(a: number, b: number): void;
export function bip32publickey_chaincode(a: number, b: number): void;
export function __wbg_privatekey_free(a: number): void;
export function privatekey_to_public(a: number): number;
export function privatekey_generate_ed25519(): number;
export function privatekey_generate_ed25519extended(): number;
export function privatekey_from_bech32(a: number, b: number, c: number): void;
export function privatekey_to_bech32(a: number, b: number): void;
export function privatekey_to_raw_bytes(a: number, b: number): void;
export function privatekey_from_extended_bytes(a: number, b: number, c: number): void;
export function privatekey_from_normal_bytes(a: number, b: number, c: number): void;
export function privatekey_sign(a: number, b: number, c: number): number;
export function __wbg_publickey_free(a: number): void;
export function publickey_from_bech32(a: number, b: number, c: number): void;
export function publickey_to_bech32(a: number, b: number): void;
export function publickey_to_raw_bytes(a: number, b: number): void;
export function publickey_from_bytes(a: number, b: number, c: number): void;
export function publickey_verify(a: number, b: number, c: number, d: number): number;
export function publickey_hash(a: number): number;
export function __wbg_ed25519signature_free(a: number): void;
export function ed25519signature_to_raw_bytes(a: number, b: number): void;
export function ed25519signature_to_bech32(a: number, b: number): void;
export function ed25519signature_to_hex(a: number, b: number): void;
export function ed25519signature_from_bech32(a: number, b: number, c: number): void;
export function ed25519signature_from_hex(a: number, b: number, c: number): void;
export function ed25519signature_from_raw_bytes(a: number, b: number, c: number): void;
export function __wbg_ed25519keyhash_free(a: number): void;
export function ed25519keyhash_to_raw_bytes(a: number, b: number): void;
export function ed25519keyhash_to_bech32(a: number, b: number, c: number, d: number): void;
export function ed25519keyhash_to_hex(a: number, b: number): void;
export function ed25519keyhash_from_bech32(a: number, b: number, c: number): void;
export function ed25519keyhash_from_hex(a: number, b: number, c: number): void;
export function ed25519keyhash_from_raw_bytes(a: number, b: number, c: number): void;
export function __wbg_scripthash_free(a: number): void;
export function scripthash_to_raw_bytes(a: number, b: number): void;
export function scripthash_to_bech32(a: number, b: number, c: number, d: number): void;
export function scripthash_to_hex(a: number, b: number): void;
export function scripthash_from_bech32(a: number, b: number, c: number): void;
export function scripthash_from_hex(a: number, b: number, c: number): void;
export function scripthash_from_raw_bytes(a: number, b: number, c: number): void;
export function __wbg_transactionhash_free(a: number): void;
export function transactionhash_to_raw_bytes(a: number, b: number): void;
export function transactionhash_to_bech32(a: number, b: number, c: number, d: number): void;
export function transactionhash_to_hex(a: number, b: number): void;
export function transactionhash_from_bech32(a: number, b: number, c: number): void;
export function transactionhash_from_hex(a: number, b: number, c: number): void;
export function transactionhash_from_raw_bytes(a: number, b: number, c: number): void;
export function __wbg_genesisdelegatehash_free(a: number): void;
export function genesisdelegatehash_to_raw_bytes(a: number, b: number): void;
export function genesisdelegatehash_to_bech32(a: number, b: number, c: number, d: number): void;
export function genesisdelegatehash_to_hex(a: number, b: number): void;
export function genesisdelegatehash_from_bech32(a: number, b: number, c: number): void;
export function genesisdelegatehash_from_hex(a: number, b: number, c: number): void;
export function genesisdelegatehash_from_raw_bytes(a: number, b: number, c: number): void;
export function __wbg_genesishash_free(a: number): void;
export function genesishash_to_raw_bytes(a: number, b: number): void;
export function genesishash_to_bech32(a: number, b: number, c: number, d: number): void;
export function genesishash_to_hex(a: number, b: number): void;
export function genesishash_from_bech32(a: number, b: number, c: number): void;
export function genesishash_from_hex(a: number, b: number, c: number): void;
export function genesishash_from_raw_bytes(a: number, b: number, c: number): void;
export function __wbg_auxiliarydatahash_free(a: number): void;
export function auxiliarydatahash_to_raw_bytes(a: number, b: number): void;
export function auxiliarydatahash_to_bech32(a: number, b: number, c: number, d: number): void;
export function auxiliarydatahash_to_hex(a: number, b: number): void;
export function auxiliarydatahash_from_bech32(a: number, b: number, c: number): void;
export function auxiliarydatahash_from_hex(a: number, b: number, c: number): void;
export function auxiliarydatahash_from_raw_bytes(a: number, b: number, c: number): void;
export function __wbg_poolmetadatahash_free(a: number): void;
export function poolmetadatahash_to_raw_bytes(a: number, b: number): void;
export function poolmetadatahash_to_bech32(a: number, b: number, c: number, d: number): void;
export function poolmetadatahash_to_hex(a: number, b: number): void;
export function poolmetadatahash_from_bech32(a: number, b: number, c: number): void;
export function poolmetadatahash_from_hex(a: number, b: number, c: number): void;
export function poolmetadatahash_from_raw_bytes(a: number, b: number, c: number): void;
export function __wbg_vrfkeyhash_free(a: number): void;
export function vrfkeyhash_to_raw_bytes(a: number, b: number): void;
export function vrfkeyhash_to_bech32(a: number, b: number, c: number, d: number): void;
export function vrfkeyhash_to_hex(a: number, b: number): void;
export function vrfkeyhash_from_bech32(a: number, b: number, c: number): void;
export function vrfkeyhash_from_hex(a: number, b: number, c: number): void;
export function vrfkeyhash_from_raw_bytes(a: number, b: number, c: number): void;
export function __wbg_blockbodyhash_free(a: number): void;
export function blockbodyhash_to_raw_bytes(a: number, b: number): void;
export function blockbodyhash_to_bech32(a: number, b: number, c: number, d: number): void;
export function blockbodyhash_to_hex(a: number, b: number): void;
export function blockbodyhash_from_bech32(a: number, b: number, c: number): void;
export function blockbodyhash_from_hex(a: number, b: number, c: number): void;
export function blockbodyhash_from_raw_bytes(a: number, b: number, c: number): void;
export function __wbg_blockheaderhash_free(a: number): void;
export function blockheaderhash_to_raw_bytes(a: number, b: number): void;
export function blockheaderhash_to_bech32(a: number, b: number, c: number, d: number): void;
export function blockheaderhash_to_hex(a: number, b: number): void;
export function blockheaderhash_from_bech32(a: number, b: number, c: number): void;
export function blockheaderhash_from_hex(a: number, b: number, c: number): void;
export function blockheaderhash_from_raw_bytes(a: number, b: number, c: number): void;
export function __wbg_datumhash_free(a: number): void;
export function datumhash_to_raw_bytes(a: number, b: number): void;
export function datumhash_to_bech32(a: number, b: number, c: number, d: number): void;
export function datumhash_to_hex(a: number, b: number): void;
export function datumhash_from_bech32(a: number, b: number, c: number): void;
export function datumhash_from_hex(a: number, b: number, c: number): void;
export function datumhash_from_raw_bytes(a: number, b: number, c: number): void;
export function __wbg_scriptdatahash_free(a: number): void;
export function scriptdatahash_to_raw_bytes(a: number, b: number): void;
export function scriptdatahash_to_bech32(a: number, b: number, c: number, d: number): void;
export function scriptdatahash_to_hex(a: number, b: number): void;
export function scriptdatahash_from_bech32(a: number, b: number, c: number): void;
export function scriptdatahash_from_hex(a: number, b: number, c: number): void;
export function scriptdatahash_from_raw_bytes(a: number, b: number, c: number): void;
export function __wbg_vrfvkey_free(a: number): void;
export function vrfvkey_to_raw_bytes(a: number, b: number): void;
export function vrfvkey_to_bech32(a: number, b: number, c: number, d: number): void;
export function vrfvkey_to_hex(a: number, b: number): void;
export function vrfvkey_from_bech32(a: number, b: number, c: number): void;
export function vrfvkey_from_hex(a: number, b: number, c: number): void;
export function vrfvkey_from_raw_bytes(a: number, b: number, c: number): void;
export function __wbg_kesvkey_free(a: number): void;
export function kesvkey_to_raw_bytes(a: number, b: number): void;
export function kesvkey_to_bech32(a: number, b: number, c: number, d: number): void;
export function kesvkey_to_hex(a: number, b: number): void;
export function kesvkey_from_bech32(a: number, b: number, c: number): void;
export function kesvkey_from_hex(a: number, b: number, c: number): void;
export function kesvkey_from_raw_bytes(a: number, b: number, c: number): void;
export function __wbg_noncehash_free(a: number): void;
export function noncehash_to_raw_bytes(a: number, b: number): void;
export function noncehash_to_bech32(a: number, b: number, c: number, d: number): void;
export function noncehash_to_hex(a: number, b: number): void;
export function noncehash_from_bech32(a: number, b: number, c: number): void;
export function noncehash_from_hex(a: number, b: number, c: number): void;
export function noncehash_from_raw_bytes(a: number, b: number, c: number): void;
export function __wbg_anchordochash_free(a: number): void;
export function anchordochash_to_raw_bytes(a: number, b: number): void;
export function anchordochash_to_bech32(a: number, b: number, c: number, d: number): void;
export function anchordochash_to_hex(a: number, b: number): void;
export function anchordochash_from_bech32(a: number, b: number, c: number): void;
export function anchordochash_from_hex(a: number, b: number, c: number): void;
export function anchordochash_from_raw_bytes(a: number, b: number, c: number): void;
export function __wbg_legacydaedalusprivatekey_free(a: number): void;
export function legacydaedalusprivatekey_chaincode(a: number, b: number): void;
export function emip3_encrypt_with_password(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function emip3_decrypt_with_password(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_int_free(a: number): void;
export function int_to_cbor_bytes(a: number, b: number): void;
export function int_from_cbor_bytes(a: number, b: number, c: number): void;
export function int_to_json(a: number, b: number): void;
export function int_to_json_value(a: number, b: number): void;
export function int_from_json(a: number, b: number, c: number): void;
export function int_new(a: number): number;
export function int_to_str(a: number, b: number): void;
export function int_from_str(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_free(a: number, b: number): void;
