// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:collection/collection.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `derive_xprivate_key_helper`, `mnemonic_to_xprv_helper`

/// Generate a new extended private key (`XPrv`) from a mnemonic and passphrase.
/// This function works with BIP-0039 mnemonics.
/// For more information: Cardano Icarus master node derivation
/// https://github.com/satoshilabs/slips/blob/master/slip-0023.md
///
/// # Arguments
///
/// - `mnemonic`: A string representing the mnemonic.
/// - `passphrase`: An optional string representing the passphrase.
///
/// # Returns
///
/// Returns the `XPrv` extended private key as a `Result`.
/// If the conversion is successful, it returns `Ok` with the extended private key
/// (`XPrv`).
Future<U8Array96> mnemonicToXprv(
        {required String mnemonic, String? passphrase}) =>
    RustLib.instance.api.crateApiKeyDerivationMnemonicToXprv(
        mnemonic: mnemonic, passphrase: passphrase);

/// Derive a new extended private key from the given extended private key.
/// - V2 derivation scheme is used as it is mention in [SLIP-0023](https://github.com/satoshilabs/slips/blob/master/slip-0023.md).
/// - More information about child key derivation can be found in [BIP32-Ed25519](https://input-output-hk.github.io/adrestia/static/Ed25519_BIP.pdf).
///
/// # Arguments
///
/// - `xprivate_key`: An extended private key of type `XPrv`.
/// - `path`: Derivation path. eg. m/0/2'/3 where ' represents hardened derivation.
///
/// # Returns
///
/// Returns the `XPrv` extended private key as a `Result`.
/// If the derivation path is successful, it returns `Ok` with the extended private key
/// (`XPrv`).
Future<U8Array96> deriveXprivateKey(
        {required U8Array96 xprivateKey, required String path}) =>
    RustLib.instance.api.crateApiKeyDerivationDeriveXprivateKey(
        xprivateKey: xprivateKey, path: path);

class U8Array96 extends NonGrowableListView<int> {
  static const arraySize = 96;

  @internal
  Uint8List get inner => _inner;
  final Uint8List _inner;

  U8Array96(this._inner)
      : assert(_inner.length == arraySize),
        super(_inner);

  U8Array96.init() : this(Uint8List(arraySize));
}
