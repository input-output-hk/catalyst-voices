VERSION 0.8

IMPORT github.com/input-output-hk/catalyst-ci/earthly/rust:v3.2.21 AS rust-ci

#cspell: words rustfmt toolsets USERARCH stdcfgs

# COPY_SRC:
#   Copies the source code into the builder.
COPY_SRC:
    FUNCTION

    COPY --keep-ts --dir \
        .cargo .config Cargo.toml clippy.toml deny.toml rustfmt.toml \
        bin \
        .

# builder : Set up our target toolchains, and copy our files.
builder:
    DO rust-ci+SETUP

# sync-cfg: Synchronize local config with CI version.
# Must be run by the developer manually.
sync-cfg:
    FROM +builder
    DO rust-ci+SYNC_STD_CFG

builder-src:
    FROM +builder

    # Don't build the src in the home directory itself, because it contains stuff.
    WORKDIR $HOME/build
    RUN rm -rf *

    # Cached copy of the source we build.
    DO +COPY_SRC

    # Generate Checksums of the source
    DO rust-ci+FINGERPRINT_SRC
    SAVE ARTIFACT ../src_fingerprint.txt

## -----------------------------------------------------------------------------
##
## Standard CI targets.
##
## These targets are discovered and executed automatically by CI.

# check : Run check using the most efficient host tooling
# CI Automated Entry point.
check:
    FROM +builder-src

    DO rust-ci+EXECUTE --cmd="/scripts/std_checks.py"

# all-hosts-check : Test which runs check with all supported host tooling.  Needs qemu or rosetta to run.
# Only used to validate tooling is working across host toolsets.
all-hosts-check:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +check

# build : Build the catalyst-gateway service
build:
    # Build the service
    FROM +builder-src

    DO rust-ci+EXECUTE \
        --cmd="/scripts/std_build.py" \
        --args1="--bins=cat-gateway/cat-gateway" \
        --args2="--cov_report=$HOME/build/coverage-report.info" \
        --output="release/cat-gateway" \
        --junit="cat-gateway.junit-report.xml" \
        --coverage="cat-gateway.coverage.info" \
        --docs="true"

    # Generate the OpenAPI doc from the cat-gateway executable itself.
    RUN ./target/release/cat-gateway docs ./target/doc/cat-gateway-api.json

    SAVE ARTIFACT target/doc doc
    SAVE ARTIFACT target/release/cat-gateway cat-gateway

# all-hosts-build : Test which runs check with all supported host tooling.  Needs qemu or rosetta to run.
# Only used to validate tooling is working across host toolsets.
all-hosts-build:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +build

# package : Create a deployable container for catalyst-gateway
package:
    FROM debian:12.7-slim
    WORKDIR /cat-gateway
    COPY +build/cat-gateway .
    ENTRYPOINT [ "./cat-gateway", "run" ]

# Publish cat-gateway
docker:
   FROM +package

   ARG container="cat-gateway"
   ARG tag="latest"

   SAVE IMAGE ${container}:${tag}

# get-api-locally : Get a copy of the OpenAPI json document locally.
get-api-locally:
    FROM scratch
    COPY +build/doc/cat-gateway-api.json cat-gateway-api.json
    SAVE ARTIFACT cat-gateway-api.json AS LOCAL cat-gateway-api.json

# build-src-check: Check for any caching issues with the source we are building against.
check-builder-src-cache:
    FROM +builder

    # Don't build the src in the home directory itself, because it contains stuff.
    WORKDIR $HOME/build
    RUN rm -rf *

    COPY +builder-src/src_fingerprint.txt ..

    RUN --no-cache echo "Cache Disabled"

    # Uncached copy of the source we build.
    DO +COPY_SRC

    # Generate Checksums of the source
    DO rust-ci+FINGERPRINT_SRC --FINGERPRINT=src_fingerprint_uncached.txt

    RUN diff ../src_fingerprint.txt ../src_fingerprint_uncached.txt \
        || (echo "ERROR: Source fingerprints do not match. Caching Error Detected!!" && exit 1) \
        && echo "Source fingerprints match. Caching OK."
