VERSION 0.8

IMPORT github.com/input-output-hk/catalyst-ci/earthly/rust:v3.00.1 AS rust-ci
IMPORT github.com/input-output-hk/catalyst-ci/earthly/mithril_snapshot:v3.00.1 AS mithril-snapshot-ci

#cspell: words rustfmt toolsets USERARCH

# builder : Set up our target toolchains, and copy our files.
builder:
    DO rust-ci+SETUP

    COPY --dir .cargo .config Cargo.* clippy.toml deny.toml rustfmt.toml bin crates .

## -----------------------------------------------------------------------------
##
## Standard CI targets.
##
## These targets are discovered and executed automatically by CI.

# check : Run check using the most efficient host tooling
# CI Automated Entry point.
check:
    FROM +builder

    DO rust-ci+EXECUTE --cmd="/scripts/std_checks.py"

# all-hosts-check : Test which runs check with all supported host tooling.  Needs qemu or rosetta to run.
# Only used to validate tooling is working across host toolsets.
all-hosts-check:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +check

# build : Build the catalyst-gateway service
build:
    # Build the service
    FROM +builder

    DO rust-ci+EXECUTE \
        --cmd="/scripts/std_build.py" \
        --args1="--bins=cat-gateway/cat-gateway" \
        --args2="--cov_report=$HOME/coverage-report.info" \
        --args3="--verbose" \
        --output="release/cat-gateway" \
        --junit="cat-gateway.junit-report.xml" \
        --coverage="cat-gateway.coverage-report.info" \
        --docs="true"

    # Generate the OpenAPI doc from the cat-gateway executable itself.
    RUN ./target/release/cat-gateway docs ./target/doc/cat-gateway-api.json

    SAVE ARTIFACT target/doc doc
    SAVE ARTIFACT target/release/cat-gateway cat-gateway

# all-hosts-build : Test which runs check with all supported host tooling.  Needs qemu or rosetta to run.
# Only used to validate tooling is working across host toolsets.
all-hosts-build:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +build

# package-cat-gateway : Create a deployable container for catalyst-gateway
package-cat-gateway:
    ARG tag="latest"

    FROM alpine:3.19
    WORKDIR /cat-gateway

    RUN apk add --no-cache gcc bash

    COPY +build/cat-gateway .
    COPY ./scripts/entry.sh .

    ENTRYPOINT ./entry.sh
    SAVE IMAGE cat-gateway:$tag

# package-cat-gateway : Create a deployable container for catalyst-gateway
# And bundle a Mithril snapshot of cardano preprod
package-cat-gateway-with-preprod-snapshot:
    ARG tag="latest"

    FROM +package-cat-gateway

    # copy preprod mithril snapshot to /tmp/preprod dir
    COPY mithril-snapshot-ci+package-preprod-snapshot/snapshot /tmp/preprod

    SAVE IMAGE cat-gateway:$tag

# Publish packages if all integration tests have passed. (Failure to pass tests will prevent packages being published.)
# publish:
#    FROM scratch
