# This is a Dockerfile for building a container image for the Catalyst Event Database.
# The container image is built from scratch and includes the necessary files for running
# the database and its associated software.
VERSION 0.8

IMPORT github.com/input-output-hk/catalyst-ci/earthly/postgresql:v3.2.10 AS postgresql-ci

# cspell: words

# Internal: builder is our Event db builder target. Prepares all necessary artifacts.
#   CI target : dependency
builder:
    DO postgresql-ci+BUILDER

    # override setup-db.sql
    COPY setup-db.sql /sql/

    COPY --dir json_schemas .

# build - an event db docker image.
#   CI target : true
build:
    FROM +builder

    DO postgresql-ci+BUILD --image_name=event-db
    DO postgresql-ci+DOCS

# local : Make a locally run-able container that can serve the db.
#   --push will cause this image to be pushed to the local development cluster
#   --local_registry : Set this to the hostname of your local registry or "" to inhibit.
local:
    # Change this to point to another local registry, OR set to "" to disable
    # pushing to a local registry even if `--push` is passed.
    # this should be "registry.cluster.test:5000" but Earthly can not reliably locate it in a hosts file.
    ARG local_registry="192.168.58.10:5000"

    FROM +build

    # Publish to the local development cluster
    IF [ "$local_registry" != "" ]
        SAVE IMAGE --push --insecure $local_registry/event-db:latest
    END


# test the event db database schema
#   CI target : true
#test:
#    FROM github.com/input-output-hk/catalyst-ci/earthly/postgresql:v2.9.2+postgres-base

#    COPY github.com/input-output-hk/catalyst-ci/earthly/utils:v2.9.2+shell-assert/assert.sh .

#    COPY ./docker-compose.yml .
#    WITH DOCKER \
#        --compose docker-compose.yml \
#        --load event-db:latest=(+build --with_historic_data=false) \
#        --service event-db \
#        --allow-privileged
#        RUN sleep 65;\
#            res=$(psql postgresql://catalyst-event-dev:CHANGE_ME@0.0.0.0:5432/CatalystEventDev -c "SELECT COUNT(*) FROM event");\

#            source assert.sh;\
#            expected=$(printf " count \n-------\n     5\n(1 row)");\
#            assert_eq "$expected" "$res"
#    END
