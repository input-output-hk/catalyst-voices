# This is a Dockerfile for building a container image for the Catalyst Event Database.
# The container image is built from scratch and includes the necessary files for running
# the database and its associated software.

VERSION 0.7

# cspell: words

# Internal: builder is our Event db builder target. Prepares all necessary artifacts.
#   CI target : dependency
# Arguments:
#  * with_historic_data: add historic data from the `historic_data` dir (default `true`).
#  * with_test_data: add test data from the `test_data` dir (default `true`).
# It does not need to be run directly, and is used by the other targets.
builder:
    FROM github.com/input-output-hk/catalyst-ci/earthly/postgresql:fix/postgres-builders+postgres-base

    ARG with_historic_data=true
    ARG with_test_data=true

    WORKDIR /build

    COPY .sqlfluffignore .
    COPY ./../../+repo-config/repo/.sqlfluff .
    COPY refinery.toml .
    COPY --dir migrations .
    RUN mkdir data
    
    IF [ $with_historic_data = true ]
        COPY --dir historic_data .

        RUN python3 historic_data/fund_2/mk_fund2_sql.py historic_data/fund_2/fund2_database_encrypted.sqlite3 >> historic_data/fund_2.sql
        RUN python3 historic_data/fund_3/mk_fund3_sql.py historic_data/fund_3/fund3_database_encrypted.sqlite3 >> historic_data/fund_3.sql
        RUN python3 historic_data/fund_4/mk_fund4_sql.py historic_data/fund_4/fund4_database_encrypted.sqlite3 >> historic_data/fund_4.sql
        RUN python3 historic_data/fund_5/mk_fund5_sql.py historic_data/fund_5/fund5_database_encrypted.sqlite3 >> historic_data/fund_5.sql
        RUN python3 historic_data/fund_6/mk_fund6_sql.py historic_data/fund_6/fund6_database_encrypted.sqlite3 >> historic_data/fund_6.sql
        RUN python3 historic_data/fund_7/mk_fund7_sql.py historic_data/fund_7/fund7_database_encrypted.sqlite3 >> historic_data/fund_7.sql
        RUN python3 historic_data/fund_8/mk_fund8_sql.py historic_data/fund_8/fund8_database_encrypted.sqlite3 >> historic_data/fund_8.sql
        RUN python3 historic_data/fund_9/mk_fund9_sql.py historic_data/fund_9/fund9_database_encrypted.sqlite3 >> historic_data/fund_9.sql
        RUN python3 historic_data/fund_9/mk_fund9_voteplan_sql.py historic_data/fund_9/fund9_database_encrypted.sqlite3 >> historic_data/fund_9.sql
        
        RUN mv ./historic_data/*.sql ./data
    END

    IF [ $with_test_data = true ]
        COPY --dir test_data .

        RUN mv ./test_data/*.sql ./data
    END

    DO github.com/input-output-hk/catalyst-ci/earthly/postgresql:fix/postgres-builders+BUILDER

# check if the sqlfiles are properly formatted and pass lint quality checks.
#   CI target : true
check:
    FROM +builder

    DO github.com/input-output-hk/catalyst-ci/earthly/postgresql:fix/postgres-builders+CHECK

# Internal: build-sqlfluff is a target to build the necessary `sqlfluff` tool container.
#   CI target : false
# This allows us to run sqlfluff commands locally without needing to install it locally.
# It does not need to be run directly, it is used by the `format` target.
build-sqlfluff:
    BUILD github.com/input-output-hk/catalyst-ci/earthly/postgresql:fix/postgres-builders+sqlfluff-image   

# format all SQL files in the current project.  Local developers tool.
#   CI target : false
format:
    LOCALLY

    # This is a trick.  Earthly can NOT build and run a container in the same invocation.
    # Because this target is running LOCALLY, and we know earthly must be installed, we can
    # call earthly locally to build and publish the local target we need to run the sqlfluff linter.
    # By recursively running earthly, we sidestep the limitation which prevents us from building 
    # a container and running it in the same invocation.
    RUN earthly +build-sqlfluff

    DO github.com/input-output-hk/catalyst-ci/earthly/postgresql:fix/postgres-builders+FORMAT --src=$(echo ${PWD}/../../)   

# build an event db docker image.
#   CI target : true
# Arguments:
#  * tag: docker image `tag`.
#  * with_historic_data: add historic data from the `historic_data` dir (default `true`).
#  * with_test_data: add test data from the `test_data` dir (default `true`).
build:
    ARG with_historic_data=true
    ARG with_test_data=true
    ARG tag="latest"

    FROM +builder --with_historic_data=$with_historic_data --with_test_data=$with_test_data

    DO github.com/input-output-hk/catalyst-ci/earthly/postgresql:fix/postgres-builders+BUILD --tag=$tag --image_name=event-db

# test the event db database schema
#   CI target : true
test:
    FROM github.com/input-output-hk/catalyst-ci/earthly/postgresql:fix/postgres-builders+postgres-base

    COPY github.com/input-output-hk/catalyst-ci/earthly/utils:fix/postgres-builders+shell-assert/assert.sh .

    COPY ./docker-compose.yml .
    WITH DOCKER \
        --compose docker-compose.yml \
        --load event-db:latest=(+build --with_historic_data=false) \
        --service event-db \
        --allow-privileged
        RUN sleep 65;\
            res=$(psql postgresql://catalyst-event-dev:CHANGE_ME@0.0.0.0:5432/CatalystEventDev -c "SELECT COUNT(*) FROM event");\

            source assert.sh;\
            expected=$(printf " count \n-------\n     5\n(1 row)");\
            assert_eq "$expected" "$res"
    END
