# This is a Dockerfile for building a container image for the Catalyst Event Database.
# The container image is built from scratch and includes the necessary files for running
# the database and its associated software.

VERSION 0.7

# cspell: words

# Internal: builder is our Event db builder target. Prepares all necessary artifacts.
#   CI target : dependency
builder:
    DO github.com/input-output-hk/catalyst-ci/earthly/postgresql:v2.10.0+BUILDER \
        --sqlfluff_cfg=./../../+repo-config/repo/.sqlfluff

    COPY ./../../+repo-config/repo/.sqlfluff .
    # override setup-db.sql
    COPY setup-db.sql /sql/

    COPY --dir ./queries .
    COPY --dir json_schemas .

# check if the sql files are properly formatted and pass lint quality checks.
#   CI target : true
check:
    FROM +builder

    DO github.com/input-output-hk/catalyst-ci/earthly/postgresql:v2.10.0+CHECK


# format all SQL files in the current project.  Local developers tool.
#   CI target : false
format:
    LOCALLY

    DO github.com/input-output-hk/catalyst-ci/earthly/postgresql:v2.10.0+FORMAT --src=$(echo ${PWD}/../../)

# build - an event db docker image.
#   CI target : true
build:
    FROM +builder

    DO github.com/input-output-hk/catalyst-ci/earthly/postgresql:v2.10.0+BUILD --image_name=event-db
    DO github.com/input-output-hk/catalyst-ci/earthly/postgresql:v2.10.0+DOCS --image_name=event-db

# test the event db database schema
#   CI target : true
#test:
#    FROM github.com/input-output-hk/catalyst-ci/earthly/postgresql:v2.9.2+postgres-base

#    COPY github.com/input-output-hk/catalyst-ci/earthly/utils:v2.9.2+shell-assert/assert.sh .

#    COPY ./docker-compose.yml .
#    WITH DOCKER \
#        --compose docker-compose.yml \
#        --load event-db:latest=(+build --with_historic_data=false) \
#        --service event-db \
#        --allow-privileged
#        RUN sleep 65;\
#            res=$(psql postgresql://catalyst-event-dev:CHANGE_ME@0.0.0.0:5432/CatalystEventDev -c "SELECT COUNT(*) FROM event");\

#            source assert.sh;\
#            expected=$(printf " count \n-------\n     5\n(1 row)");\
#            assert_eq "$expected" "$res"
#    END
