//! Generic Responses are all contained in their own modules, grouped by response codes.

use std::{
    collections::HashSet,
    hash::{Hash, Hasher},
};

use code_429_too_many_requests::TooManyRequests;
use code_503_service_unavailable::ServiceUnavailable;
use poem::IntoResponse;
use poem_openapi::{
    payload::Json,
    registry::{MetaHeader, MetaResponse, MetaResponses, Registry},
    ApiResponse,
};
use tracing::error;

mod code_429_too_many_requests;
pub(crate) mod code_500_internal_server_error;
mod code_503_service_unavailable;
pub(crate) mod types;

use code_500_internal_server_error::InternalServerError;
use types::{
    retry_after::RetryAfterHeader,
    string_types::{AccessControlAllowOriginHeader, RateLimitHeader},
};

/// Default error responses
#[derive(ApiResponse)]
pub(crate) enum ErrorResponses {
    /// ## Too Many Requests
    ///
    /// The client has sent too many requests in a given amount of time.
    #[oai(status = 429)]
    TooManyRequests(
        Json<TooManyRequests>,
        #[oai(header = "Retry-After")] RetryAfterHeader,
    ),

    /// ## Internal Server Error.
    ///
    /// An internal server error occurred.
    ///
    /// *The contents of this response should be reported to the projects issue tracker.*
    #[oai(status = 500)]
    ServerError(Json<InternalServerError>),
    /// ## Service Unavailable
    ///
    /// The service is not available, do not send other requests.
    ///
    /// *This is returned when the service either has not started,
    /// or has become unavailable.*
    #[oai(status = 503)]
    ServiceUnavailable(
        Json<ServiceUnavailable>,
        #[oai(header = "Retry-After")] Option<RetryAfterHeader>,
    ),
}

/// Combine provided responses type with the default responses under one type.
pub(crate) enum WithErrorResponses<T> {
    /// Provided responses
    With(T),
    /// Error responses
    Error(ErrorResponses),
}

impl<T> WithErrorResponses<T> {
    /// Handle a 5xx response.
    /// Returns a Server Error or a Service Unavailable response.
    pub(crate) fn handle_error(err: &anyhow::Error) -> Self {
        match err {
            err if err.is::<bb8::RunError<tokio_postgres::Error>>() => {
                let error = ServiceUnavailable::new(None);
                WithErrorResponses::Error(ErrorResponses::ServiceUnavailable(
                    Json(error),
                    Some(RetryAfterHeader::default()),
                ))
            },
            err => {
                let error = InternalServerError::new(None);
                error!(id=%error.id(), error=?err);
                WithErrorResponses::Error(ErrorResponses::ServerError(Json(error)))
            },
        }
    }

    /// Handle a 429 rate limiting response.
    ///
    /// Returns a 429 Rate limit response.
    /// Its OK if we actually never call this.  Required for the API.
    /// May be generated by the ingress.
    #[allow(dead_code)]
    pub(crate) fn rate_limit(retry_after: Option<RetryAfterHeader>) -> Self {
        let retry_after = retry_after.unwrap_or_default();
        let error = TooManyRequests::new(None);
        WithErrorResponses::Error(ErrorResponses::TooManyRequests(Json(error), retry_after))
    }
}

impl<T: ApiResponse> From<T> for WithErrorResponses<T> {
    fn from(val: T) -> Self {
        Self::With(val)
    }
}

impl<T: ApiResponse> ApiResponse for WithErrorResponses<T> {
    fn meta() -> MetaResponses {
        let t_meta = T::meta();
        let default_meta = ErrorResponses::meta();

        let mut responses = HashSet::new();
        responses.extend(
            t_meta
                .responses
                .into_iter()
                .map(FilteredByStatusCodeResponse),
        );
        responses.extend(
            default_meta
                .responses
                .into_iter()
                .map(FilteredByStatusCodeResponse),
        );

        let responses =
            responses
                .into_iter()
                .map(|val| {
                    let mut response = val.0;
                    // Make modifications to the responses to set common headers
                    if let Some(status) = response.status {
                        // Only 2xx and 4xx responses get RateLimit Headers.
                        if (200..300).contains(&status) || (400..500).contains(&status) {
                            response.headers.insert(0usize, MetaHeader {
                                name: "RateLimit".to_string(),
                                description: Some("RateLimit Header.".to_string()),
                                required: false,
                                deprecated: false,
                                schema: <RateLimitHeader as poem_openapi::types::Type>::schema_ref(),
                            });
                        }

                        // All responses get Access-Control-Allow-Origin headers
                        response.headers.insert(0usize, MetaHeader {
                            name: "Access-Control-Allow-Origin".to_string(),
                            description: Some("Access-Control-Allow-Origin Header.".to_string()),
                            required: false,
                            deprecated: false,
                            schema: <AccessControlAllowOriginHeader as poem_openapi::types::Type>::schema_ref(),
                        });
                    }
                    response
                })
                .collect();

        // Add Rate limiting headers to ALL 2xx and 4xx responses
        // for response in responses.iter_mut() {
        //    response.
        //    debug!(response = response);
        //}

        MetaResponses { responses }
    }

    fn register(registry: &mut Registry) {
        ErrorResponses::register(registry);
        T::register(registry);
    }
}

impl<T: IntoResponse + Send> IntoResponse for WithErrorResponses<T> {
    fn into_response(self) -> poem::Response {
        match self {
            Self::With(t) => t.into_response(),
            Self::Error(default) => default.into_response(),
        }
    }
}

/// `FilteredByStatusCodeResponse` is used to filter out duplicate responses by status
/// code.
struct FilteredByStatusCodeResponse(MetaResponse);

impl PartialEq for FilteredByStatusCodeResponse {
    fn eq(&self, other: &Self) -> bool {
        self.0.status.eq(&other.0.status)
    }
}
impl Eq for FilteredByStatusCodeResponse {}
impl Hash for FilteredByStatusCodeResponse {
    fn hash<H: Hasher>(&self, state: &mut H) {
        self.0.status.hash(state);
    }
}
