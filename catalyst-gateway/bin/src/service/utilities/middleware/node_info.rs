//! Adds an information about the running cat-gateway instance for each response headers.

use poem::{Endpoint, Middleware, Request, Result};

/// Middleware type that returns a response with 503 status code
/// if any DB stops responding before returning the wrapped endpoint.
pub(crate) struct CatGatewayInfo;

impl<E: Endpoint> Middleware<E> for CatGatewayInfo {
    type Output = CatGatewayInfoImpl<E>;

    fn transform(&self, ep: E) -> Self::Output {
        CatGatewayInfoImpl { ep }
    }
}

/// The new endpoint type generated by the `CatGatewayInfo`.
pub(crate) struct CatGatewayInfoImpl<E> {
    /// Endpoint wrapped by the middleware.
    ep: E,
}

impl<E: Endpoint> Endpoint for CatGatewayInfoImpl<E> {
    type Output = E::Output;

    async fn call(&self, req: Request) -> Result<Self::Output> {
        let resp = self.ep.call(req).await?;
        Ok(resp)
    }
}
