// FIXME - Restructuring, return type

// ANS.1 tags BER-encoded
// Reference: https://www.oss.com/asn1/resources/asn1-made-simple/asn1-quick-reference.html
// Encoding rules reference: https://en.wikipedia.org/wiki/X.690#Encoding
// pub const ASN1_BOOL: u8 = 0x01;
// pub const ASN1_INT: u8 = 0x02;
// pub const ASN1_BIT_STR: u8 = 0x03;
// pub const ASN1_OCTET_STR: u8 = 0x04;
// pub const ASN1_OID: u8 = 0x06;
// pub const ASN1_UTF8_STR: u8 = 0x0C;
// pub const ASN1_PRINT_STR: u8 = 0x13;
// pub const ASN1_IA5_SRT: u8 = 0x16;
// pub const ASN1_UTC_TIME: u8 = 0x17;
// pub const ASN1_GEN_TIME: u8 = 0x18;
// pub const ASN1_SEQ: u8 = 0x30; // Tag 16, but is a constructed form
// pub const ASN1_SET: u8 = 0x31; // Tag 17, but is a constructed form
// pub const ASN1_INDEX_ZERO: u8 = 0xa0;
// pub const ASN1_INDEX_ONE: u8 = 0xa1;

#[allow(unused)]
pub fn extract_der_value_by_tag(b: &[u8], tag: u8) {
    // The first byte should match the tag
    if b[0] != tag {
        // return Err(Error::InvalidData);
        println!("Error");
    }
}

// Extracting the length of TLV
// Length in TLV can be in 2 form - short form and long form.
// - Short form: the 8th bit is set to 0, and the remaining 7 bits are the actual length.
// - Long form: the 8th bit is set to 1, and the remaining 7 bits are the number of octet N.
// - Indefinite form: the byte is equal to 0x80.

// For TLV Long form, it does not have a fixed length, so in this lib, the maximum length of N is 3 octet.
// - 0x81 represent N = 1 octet
// - 0x82 represent N = 2 octet
// - 0x83 represent N = 3 octet
// If the length is more than 3 octet, it is not supported in this lib.
#[allow(unused)]
fn extract_value_by_length(b: &[u8]) {
    let length = b[1];

    // Length should not exceed 4 octet.
    if length >= 0x84 {
        // return  Err(Error::InvalidData);
        println!("Error");
    }

    let (start, end) = match length {
        0x80 => {
            // Indefinite form
            // return Err(Error::InvalidData);
            println!("Error");
            (0, 0)
        },
        // Long form
        0x81 => (3, 3 + b[2] as usize),
        0x82 => (4, 4 + bytes_to_u64(&b[2..4]) as usize),
        0x83 => (5, 5 + bytes_to_u64(&b[2..5]) as usize),
        // Short form
        _ => (2, 2 + length as usize),
    };

    let result = (&b[start..end], &b[end..]);
    println!("{:?}", result);
}

#[allow(unused)]
fn bytes_to_u64(bytes: &[u8]) -> u64 {
    let mut result = 0u64;
    for &byte in bytes {
        result = (result << 8) | u64::from(byte);
    }
    result
}

#[cfg(test)]
#[allow(unused)]
mod tests {

    use super::*;
    const CERT: [u8; 316] = [
        0x30, 0x82, 0x01, 0x38, 0x30, 0x81, 0xde, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x03, 0x01,
        0xf5, 0x0d, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30,
        0x16, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0b, 0x52, 0x46, 0x43,
        0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x43, 0x41, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x33, 0x30,
        0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0x0d, 0x32, 0x36, 0x30,
        0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x30, 0x22, 0x31, 0x20, 0x30,
        0x1e, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x17, 0x30, 0x31, 0x2d, 0x32, 0x33, 0x2d, 0x34,
        0x35, 0x2d, 0x46, 0x46, 0x2d, 0x46, 0x45, 0x2d, 0x36, 0x37, 0x2d, 0x38, 0x39, 0x2d, 0x41,
        0x42, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06,
        0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xb1, 0x21,
        0x6a, 0xb9, 0x6e, 0x5b, 0x3b, 0x33, 0x40, 0xf5, 0xbd, 0xf0, 0x2e, 0x69, 0x3f, 0x16, 0x21,
        0x3a, 0x04, 0x52, 0x5e, 0xd4, 0x44, 0x50, 0xb1, 0x01, 0x9c, 0x2d, 0xfd, 0x38, 0x38, 0xab,
        0xac, 0x4e, 0x14, 0xd8, 0x6c, 0x09, 0x83, 0xed, 0x5e, 0x9e, 0xef, 0x24, 0x48, 0xc6, 0x86,
        0x1c, 0xc4, 0x06, 0x54, 0x71, 0x77, 0xe6, 0x02, 0x60, 0x30, 0xd0, 0x51, 0xf7, 0x79, 0x2a,
        0xc2, 0x06, 0xa3, 0x0f, 0x30, 0x0d, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04,
        0x03, 0x02, 0x07, 0x80, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03,
        0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0xd4, 0x32, 0x0b, 0x1d, 0x68, 0x49,
        0xe3, 0x09, 0x21, 0x9d, 0x30, 0x03, 0x7e, 0x13, 0x81, 0x66, 0xf2, 0x50, 0x82, 0x47, 0xdd,
        0xda, 0xe7, 0x6c, 0xce, 0xea, 0x55, 0x05, 0x3c, 0x10, 0x8e, 0x90, 0x02, 0x21, 0x00, 0xd5,
        0x51, 0xf6, 0xd6, 0x01, 0x06, 0xf1, 0xab, 0xb4, 0x84, 0xcf, 0xbe, 0x62, 0x56, 0xc1, 0x78,
        0xe4, 0xac, 0x33, 0x14, 0xea, 0x19, 0x19, 0x1e, 0x8b, 0x60, 0x7d, 0xa5, 0xae, 0x3b, 0xda,
        0x16,
    ];

    #[test]
    fn test_extract_value_by_length() {
        extract_value_by_length(&CERT);
    }
}
