name: catalyst_voices
repository: https://github.com/input-output-hk/catalyst-voices

packages:
  - apps/**
  - packages/internal/**
  - packages/libs/**
  - utilities/**

ignore:
  # ignore flutter_rust_bridge packages that are non-conformant with melos
  - packages/libs/catalyst_key_derivation/example/**
  # ignore temporary packages that are non-conformant with melos
  - apps/voices/build/**

permittedLicenses:
  - MIT
  - Apache-2.0
  - Unicode-DFS-2016
  - BSD-3-Clause
  - BSD-2-Clause
  - BlueOak-1.0.0
  - Apache-2.0 WITH LLVM-exception
  - CC0-1.0

packageLicenseOverride:
  fuchsia_remote_debug_protocol: BSD-3-Clause
  flutter_driver: BSD-3-Clause
  flutter_localizations: BSD-3-Clause
  flutter_test: BSD-3-Clause
  flutter_web_plugins: BSD-3-Clause
  integration_test: BSD-3-Clause
  rxdart: Apache-2.0
  vector_math: Apache-2.0
  sky_engine: Apache-2.0
  flutter_gen: MIT
  # catalyst packages
  catalyst_analysis: Apache-2.0
  catalyst_cose: Apache-2.0
  catalyst_cardano_serialization: Apache-2.0
  catalyst_cardano_platform_interface: Apache-2.0
  catalyst_compression: Apache-2.0
  catalyst_compression_web: Apache-2.0
  catalyst_cardano_web: Apache-2.0
  catalyst_compression_platform_interface: Apache-2.0
  catalyst_key_derivation: Apache-2.0
  catalyst_key_derivation_web: Apache-2.0
  catalyst_key_derivation_platform_interface: Apache-2.0
  catalyst_voices_assets: Apache-2.0
  catalyst_voices_assets_example: Apache-2.0
  catalyst_cardano: Apache-2.0
  catalyst_cardano_example: Apache-2.0
  catalyst_voices_localization: Apache-2.0
  catalyst_voices_models: Apache-2.0
  example: Apache-2.0
  remote_widgets: Apache-2.0
  remote_widgets_example: Apache-2.0
  catalyst_voices_view_models: Apache-2.0
  catalyst_voices_blocs: Apache-2.0
  catalyst_voices_driver: Apache-2.0
  catalyst_voices_shared: Apache-2.0
  catalyst_voices_brands: Apache-2.0
  catalyst_voices_services: Apache-2.0
  poc_local_storage: Apache-2.0
  catalyst_voices_repositories: Apache-2.0
  catalyst_voices: Apache-2.0
  uikit_example: Apache-2.0

packageSourceOverride:
  fuchsia_remote_debug_protocol: https://github.com/flutter/flutter/blob/main/LICENSE
  flutter_driver: https://github.com/flutter/flutter/blob/main/LICENSE
  flutter_localizations: https://github.com/flutter/flutter/blob/main/LICENSE
  flutter_test: https://github.com/flutter/flutter/blob/main/LICENSE
  flutter_web_plugins: https://github.com/flutter/flutter/blob/main/LICENSE
  integration_test: https://github.com/flutter/flutter/blob/main/LICENSE
  rxdart: https://github.com/ReactiveX/rxdart/blob/master/LICENSE
  vector_math: https://github.com/google/vector_math.dart/blob/master/LICENSE
  sky_engine: https://github.com/flutter/engine/blob/main/sky/packages/sky_engine/LICENSE
  flutter_gen: https://github.com/FlutterGen/flutter_gen/blob/main/LICENSE

command:
  version:
    linkToCommits: true
    workspaceChangelog: true
  bootstrap:
    runPubGetInParallel: true
    environment:
      sdk: ">=3.5.0 <4.0.0"
      flutter: ">=3.29.0"
    dependencies:
      auto_size_text: ^3.0.0
      async: ^2.11.0
      asn1lib: ^1.5.3
      bip39: ^1.0.6
      bloc_concurrency: ^0.2.2
      chopper: ^8.0.3
      collection: ^1.19.0
      cryptography: ^2.7.0
      dotted_border: ^2.1.0
      ed25519_hd_key: ^2.3.0
      email_validator: ^3.0.0
      equatable: ^2.0.7
      fake_async: ^1.3.1
      ffi: ^2.1.0
      ffigen: ^11.0.0
      file_picker: ^8.0.7
      flutter_bloc: ^8.1.5
      # TODO(dtscalac): depend on latest stable version when https://github.com/deakjahn/flutter_dropzone/issues/95 is solved,
      # don't depend on flutter_dropzone_platform_interface and flutter_dropzone_web, they should be pulled in transitively
      flutter_dropzone: 4.0.3
      flutter_dropzone_platform_interface: 2.0.6
      flutter_dropzone_web: 4.0.2
      flutter_localized_locales: ^2.0.5
      flutter_markdown: ^0.7.4+3
      flutter_native_splash: ^2.4.6
      # TODO(minikin): We use our forks as a temporary workaround for F14.
      flutter_quill:
        git:
          url: https://github.com/input-output-hk/flutter-quill
          ref: 532172254c3cee957bbdbb08be922f2c870b7fff
      flutter_quill_extensions:
        git:
          url: https://github.com/input-output-hk/flutter-quill
          path: flutter_quill_extensions
          ref: 532172254c3cee957bbdbb08be922f2c870b7fff
      flutter_rust_bridge: 2.5.1
      flutter_secure_storage: ^9.2.2
      formz: ^0.7.0
      go_router: ^14.8.0
      intl: ^0.19.0
      logging: ^1.3.0
      lottie: ^3.3.1
      markdown: ^7.2.2
      # TODO(minikin): We use our forks as a temporary workaround for F14.
      markdown_quill:
        git:
          url: https://github.com/input-output-hk/markdown_quill
          ref: a523a6128e6b2677739ac5d68d1d9c65a2af8b98
      meta: ^1.16.0
      result_type: ^0.2.0
      rxdart: ^0.27.7
      password_strength: ^0.2.0
      plugin_platform_interface: ^2.1.7
      bech32: ^0.2.2
      bip32_ed25519: ^0.6.0
      cbor: ^6.2.0
      convert: ^3.1.1
      path: ^1.9.1
      pinenacl: ^0.6.0
      uuid_plus: ^0.1.0
      sentry_flutter: ^8.8.0
      scrollable_positioned_list: ^0.3.8
      shared_preferences: ^2.3.3
      shared_preferences_platform_interface: ^2.4.1
      skeletonizer: ^1.4.3
      synchronized: ^3.3.0+3
      # TODO(dtscalac): win32 dependency is just a transitive dependency and shouldn't be imported
      # but here we import it explicitly to make sure the latest version is used which addresses
      # the problem from here: https://github.com/jonataslaw/get_cli/issues/263
      win32: ^5.5.4
      web: ^1.1.0
      webdriver: ^3.0.3
    dev_dependencies:
      test: ^1.24.9
      build_runner: ^2.4.12
      chopper_generator: ^8.0.4
      flutter_gen_runner: ^5.10.0
      mocktail: ^1.0.1

scripts:
  l10n:
    run: |
      melos exec -c 1 --scope="catalyst_voices_localization" -- flutter gen-l10n
    description: |
      Run `flutter gen-l10n` in catalyst_voices_localization package to generate l10n bindings.

  build_runner:
    run: |
      melos exec -c 1 \
      --depends-on="build_runner" \
      --ignore="catalyst_voices_repositories" -- \
          dart run build_runner build --delete-conflicting-outputs
    description: |
      Run `build_runner` in every package which contains the build_runner dependency.
      The catalyst_voices_repositories is skipped because to run a build_runner there you
      must generate first swagger docs (see related Earthfile).

  build_runner_repository:
    run: |
      melos exec -c 1 --depends-on="build_runner" --scope="catalyst_voices_repositories" -- dart run build_runner clean && \
      melos exec -c 1 --scope="catalyst_voices_repositories" -- dart run process_openapi.dart && \
      melos exec -c 1 \
      --depends-on="build_runner" \
      --scope="catalyst_voices_repositories" -- dart run build_runner build --delete-conflicting-outputs
    description: |
      Run `build_runner` in catalyst_voices_repositories package

  db-make-migration:
    run: |
      melos exec -c 1 \
      --depends-on="build_runner" \
      --scope="catalyst_voices_repositories" -- \
          dart run drift_dev make-migrations
    description: |
      Run `make-migrations` in catalyst_voices_repositories package and generates schema migration
      classes

  metrics:
    run: |
      melos exec -c 1 -- \
        flutter pub run dart_code_metrics:metrics analyze
    description: |
      Run `dart_code_metrics` in all packages.
      - Note: you can also rely on your IDEs Dart Analysis / Issues window.

  format-apply:
    run: |
      melos exec -c 1 --dir-exists="lib" -- "find lib -name '*.dart' ! -name '*.g.dart' ! -path '*/generated/*' ! -path '*/.dart_tool/*' -exec dart format {} +" &&
      melos exec -c 1 --dir-exists="test" -- "find test -name '*.dart' ! -name '*.g.dart' ! -path '*/generated/*' ! -path '*/.dart_tool/*' -exec dart format {} +" &&
      melos exec -c 1 --dir-exists="integration_test" -- "find integration_test -name '*.dart' ! -name '*.g.dart' ! -path '*/generated/*' ! -path '*/.dart_tool/*' -exec dart format {} +"
    description: Run `dart format` for all packages.

  format-check:
    run: |
      melos exec -c 1 --dir-exists="lib" -- "find lib -name '*.dart' ! -name '*.g.dart' ! -path '*/generated/*' ! -path '*/.dart_tool/*' -exec dart format --output none --set-exit-if-changed {} +" &&
      melos exec -c 1 --dir-exists="test" -- "find test -name '*.dart' ! -name '*.g.dart' ! -path '*/generated/*' ! -path '*/.dart_tool/*' -exec dart format --output none --set-exit-if-changed {} +" &&
      melos exec -c 1 --dir-exists="integration_test" -- "find integration_test -name '*.dart' ! -name '*.g.dart' ! -path '*/generated/*' ! -path '*/.dart_tool/*' -exec dart format --output none --set-exit-if-changed {} +"
    description: Run `dart format` checks for all packages.

  license-check:
    run: |
      melos exec -- lic_ck check-licenses -c $MELOS_ROOT_PATH/melos.yaml -i
    description: Run `lic_ck` checks for all packages.

  test:select:
    run: |
      melos exec -c 1 --dir-exists="test" -- flutter test
    description: Run `flutter test` for selected packages.

  test-native:
    run: |
      melos run test:select --no-select
    description: Run `flutter test` for all packages.

  # TODO(kukkok3):
  # catalyst_voices: this package should contain only widget tests
  # catalyst_voices_repositories: enable when https://github.com/input-output-hk/catalyst-voices/issues/1980 is fixed
  # catalyst_voices_assets: enable when https://github.com/input-output-hk/catalyst-voices/issues/1979 is fixed
  test-web:
    run: |
      melos exec -c 1 --dir-exists="test" --ignore="catalyst_voices,catalyst_voices_repositories,catalyst_voices_assets" -- flutter test --platform chrome
    description: Run `flutter test --platform chrome` for all packages.

  test-report-web:
    run: |
      # cleanup from previous build and create empty folder where test reports will be stored
      rm -fR $MELOS_ROOT_PATH/test_reports
      mkdir $MELOS_ROOT_PATH/test_reports

      # cleanup old coverage files and create empty folder where coverage files will be stored
      find . -type d -name coverage -prune -exec rm -rf {} \;
      mkdir $MELOS_ROOT_PATH/coverage
      # run tests, generate junit reports in /test_reports/ & code coverage report
      melos exec -c 1 --dir-exists="test" --ignore="catalyst_voices" -- \
      ' TESTS_OUTPUT_FILE="$MELOS_ROOT_PATH/test_reports/$MELOS_PACKAGE_NAME.tests-output.json"
        JUNIT_REPORT_FILE="$MELOS_ROOT_PATH/test_reports/$MELOS_PACKAGE_NAME.junit-report.xml"
        flutter test --platform chrome --reporter github --file-reporter=json:$TESTS_OUTPUT_FILE --coverage ; \
        EXIT_CODE=$? ; \
        cat $TESTS_OUTPUT_FILE | tojunit --output $JUNIT_REPORT_FILE ; \
        exit $EXIT_CODE'

      # store the exit code after running the tests,
      # this is the exit code for the whole script
      EXIT_CODE=$?

      # removes code coverage for generated code
      find . -name "*.lcov.info" -exec \
        lcov --remove {} -o {} --ignore-errors unused,unused \
        '*.g.dart' \
        '*.freezed.dart' \
        '*.chopper.dart' \
        '*.swagger.dart' \
        '*.openapi.dart' \
        '*.gen.dart' \
        '*.swagger.*.dart' \
        '*.drift.dart' \
        'lib/generated/**' \;

      # merges all coverage reports into a single one and puts it in /coverage/lcov.info
      dart pub global run combine_coverage --repo-path=.
      mv ./coverage/lcov.info ./coverage/lcov.coverage.info

      exit $EXIT_CODE

    description: |
      Run `flutter test --platform chrome` for all packages and generate junit and coverage reports.
      The test reports are saved in /test_reports folder.
      The coverages are saved in coverage/lcov.info file for each tested package.
      The combined coverage is saved in the /coverage/lcov.coverage.info file.

  test-report-native:
    run: |
      # cleanup from previous build and create empty folder where test reports will be stored
      rm -fR $MELOS_ROOT_PATH/test_reports
      mkdir $MELOS_ROOT_PATH/test_reports

      # cleanup old coverage files and create empty folder where coverage files will be stored
      find . -type d -name coverage -prune -exec rm -rf {} \;
      mkdir $MELOS_ROOT_PATH/coverage
      # run tests, generate junit reports in /test_reports/ & code coverage report
      melos exec -c 1 --dir-exists="test" -- \
      ' TESTS_OUTPUT_FILE="$MELOS_ROOT_PATH/test_reports/$MELOS_PACKAGE_NAME.tests-output.json"
        JUNIT_REPORT_FILE="$MELOS_ROOT_PATH/test_reports/$MELOS_PACKAGE_NAME.junit-report.xml"
        flutter test --reporter github --file-reporter=json:$TESTS_OUTPUT_FILE --coverage ; \
        EXIT_CODE=$? ; \
        cat $TESTS_OUTPUT_FILE | tojunit --output $JUNIT_REPORT_FILE ; \
        exit $EXIT_CODE'

      # store the exit code after running the tests,
      # this is the exit code for the whole script
      EXIT_CODE=$?

      # removes code coverage for generated code
      find . -name "*.lcov.info" -exec \
        lcov --remove {} -o {} --ignore-errors unused,unused \
        '*.g.dart' \
        '*.freezed.dart' \
        '*.chopper.dart' \
        '*.swagger.dart' \
        '*.openapi.dart' \
        '*.gen.dart' \
        '*.swagger.*.dart' \
        '*.drift.dart' \
        'lib/generated/**' \;

      # merges all coverage reports into a single one and puts it in /coverage/lcov.info
      dart pub global run combine_coverage --repo-path=.
      mv ./coverage/lcov.info ./coverage/lcov.coverage.info

      exit $EXIT_CODE

    description: |
      Run `flutter test` for all packages and generate junit and coverage reports.
      The test reports are saved in /test_reports folder.
      The coverages are saved in coverage/lcov.info file for each tested package.
      The combined coverage is saved in the /coverage/lcov.coverage.info file.
