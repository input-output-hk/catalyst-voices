VERSION 0.8

IMPORT ../catalyst-gateway AS catalyst-gateway
IMPORT github.com/input-output-hk/catalyst-ci/earthly/flutter:v3.3.1 AS flutter-ci

# repo-catalyst-voices - Creates artifacts of all configuration files,
# packages and folders related to catalyst_voices frontend.
repo-catalyst-voices:
    FROM scratch
    WORKDIR /repo
    COPY --dir . .

    SAVE ARTIFACT /repo repo

# Copy all the necessary files and running bootstrap
builder:
    DO flutter-ci+SETUP
    COPY +repo-catalyst-voices/repo .
    DO flutter-ci+BOOTSTRAP

# Generates flutter code.
# Generates codes for Catalyst Gateway OpenAPI, Voices Localization and
# VoicesAssets and other packages that depend on code-generator.
# It accepts [save_locally] ARG that when true place the artifacts in the
# proper folders
code-generator:
    ARG save_locally=false
    FROM +builder

    LET gen_code_path = lib/generated/api
    LET local_gen_code_path = packages/internal/catalyst_voices_repositories/lib/generated/api/
    LET openapi_spec_path = packages/internal/catalyst_voices_repositories/openapi/cat-gateway.json

    WORKDIR packages/internal/catalyst_voices_repositories

    COPY catalyst-gateway+build/doc/cat-gateway-api.json openapi/cat-gateway.json

    WORKDIR /frontend

    RUN melos l10n
    RUN melos build_runner
    RUN melos build_runner_repository

    IF [ $save_locally = true ]
        # This step saves generated files other then OpenApi Services
        RUN find . \
          \( -name "*.g.dart" \
          -o -name "*.chopper.dart" \
          -o -name "*.gen.dart" \
          -o -name "catalyst_voices_localizations*.dart" \
          -o -name "*.drift.dart" \)

        FOR generated_file IN $(find . \
                                          \( -name "*.g.dart" \
                                          -o -name "*.chopper.dart" \
                                          -o -name "*.gen.dart" \
                                          -o -name "catalyst_voices_localizations*.dart" \
                                          -o -name "*.drift.dart" \))
           SAVE ARTIFACT $generated_file AS LOCAL $generated_file
        END
    ELSE
       SAVE ARTIFACT .
    END

    WORKDIR packages/internal/catalyst_voices_repositories

    # Saves locally openapi json specs. Useful for local diagnostic.
    IF [ $save_locally = true ]
        SAVE ARTIFACT openapi/cat-gateway.json AS LOCAL $openapi_spec_path
    ELSE
        SAVE ARTIFACT openapi/cat-gateway.json
    END

    # Saves generated OpenApi Services
    IF [ $save_locally = true ]
        SAVE ARTIFACT "$gen_code_path/*" AS LOCAL $local_gen_code_path
    ELSE
        SAVE ARTIFACT $gen_code_path
    END

    # restore current working directory to the root of the project
    WORKDIR /frontend

# Runs code formatting checks.
check-code-formatting:
    FROM +builder
    DO flutter-ci+FORMAT

# Runs dry-run publish to verify that publishable packages can be published.
check-package-publishing:
    FROM +builder
    DO flutter-ci+PUBLISH_DRY_RUN

# Runs the license checks for Catalyst Voices.
check-license:
    FROM +builder
    RUN melos run license-check

# Run unit tests
test-unit-native:
    FROM +code-generator
    DO flutter-ci+UNIT_TESTS --PLATFORM=native --REPORT=true

test-unit-web:
    FROM +code-generator
    DO flutter-ci+UNIT_TESTS --PLATFORM=web --REPORT=false

# Runs static analysis on the code.
build-static-analysis:
    FROM +code-generator
    DO flutter-ci+ANALYZE

# Build web version of Catalyst Voices
build-web:
    FROM +code-generator
    ARG RUN_ON_PR=true
    ARG SENTRY_DSN

    ARG WORKDIR=/frontend/apps/voices
    IF [ $RUN_ON_PR = true ]
        DO flutter-ci+BUILD_WEB --WORKDIR=$WORKDIR --BUILD_MODE='--profile' --TARGET=lib/configs/main_web.dart
    ELSE
        DO flutter-ci+BUILD_WEB --WORKDIR=$WORKDIR --TARGET=lib/configs/main_web.dart --SENTRY_DSN=$SENTRY_DSN
        SAVE ARTIFACT web
    END

package:
    FROM nginx:alpine3.20-slim
    ARG tag='latest'

    COPY +build-web/web /app
    COPY ./nginx.conf /etc/nginx/nginx.conf
    EXPOSE 80

    SAVE IMAGE voices-frontend:$tag

docker:
   FROM +package

   ARG container="voices"
   ARG tag="latest"

   SAVE IMAGE ${container}:${tag}
