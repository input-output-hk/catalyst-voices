VERSION 0.8

IMPORT ../ AS repo-ci
IMPORT ../catalyst-gateway AS catalyst-gateway
IMPORT github.com/input-output-hk/catalyst-ci/earthly/flutter:feat/catalyst-compression-setup AS flutter-ci

# repo-catalyst-voices - Creates artifacts of all configuration files,
# packages and folders related to catalyst_voices frontend.
repo-catalyst-voices:
    FROM scratch
    WORKDIR /repo
    COPY --keep-ts --dir . .
    # Copy docs as some doc files are used for test inputs
    COPY repo-ci+copy-docs/docs ./docs

    SAVE ARTIFACT /repo repo

# Copy all the necessary files and running bootstrap
builder:
    DO flutter-ci+SETUP
    COPY +repo-catalyst-voices/repo .
    DO flutter-ci+BOOTSTRAP

# Generates flutter code.
# Generates codes for Catalyst Gateway OpenAPI, Voices Localization and
# VoicesAssets and other packages that depend on code-generator.
# It accepts [save_locally] ARG that when true place the artifacts in the
# proper folders
code-generator:
    ARG save_locally=false
    FROM +builder

    LET gen_code_path = lib/generated/api
    LET local_gen_code_path = packages/internal/catalyst_voices_repositories/lib/generated/api/
    LET openapi_spec_path = packages/internal/catalyst_voices_repositories/openapi/cat-gateway.json

    WORKDIR packages/internal/catalyst_voices_repositories

    COPY catalyst-gateway+build/doc/cat-gateway-api.json openapi/cat-gateway.json

    WORKDIR /frontend

    RUN melos l10n
    RUN melos build_runner
    RUN melos build_runner_repository

    IF [ $save_locally = true ]
        # This step saves generated files other then OpenApi Services
        RUN find . \
          \( -name "*.g.dart" \
          -o -name "*.chopper.dart" \
          -o -name "*.gen.dart" \
          -o -name "catalyst_voices_localizations*.dart" \
          -o -name "*.drift.dart" \)

        FOR generated_file IN $(find . \
                                          \( -name "*.g.dart" \
                                          -o -name "*.chopper.dart" \
                                          -o -name "*.gen.dart" \
                                          -o -name "catalyst_voices_localizations*.dart" \
                                          -o -name "*.drift.dart" \))
           SAVE ARTIFACT $generated_file AS LOCAL $generated_file
        END
    ELSE
       SAVE ARTIFACT .
    END

    WORKDIR packages/internal/catalyst_voices_repositories

    # Saves locally openapi json specs. Useful for local diagnostic.
    IF [ $save_locally = true ]
        SAVE ARTIFACT openapi/cat-gateway.json AS LOCAL $openapi_spec_path
    ELSE
        SAVE ARTIFACT openapi/cat-gateway.json
    END

    # Saves generated OpenApi Services
    IF [ $save_locally = true ]
        SAVE ARTIFACT "$gen_code_path/*" AS LOCAL $local_gen_code_path
    ELSE
        SAVE ARTIFACT $gen_code_path
    END

    # restore current working directory to the root of the project
    WORKDIR /frontend

# Runs code formatting checks.
check-code-formatting:
    FROM +builder
    DO flutter-ci+FORMAT

# Runs dry-run publish to verify that publishable packages can be published.
check-package-publishing:
    FROM +builder
    DO flutter-ci+PUBLISH_DRY_RUN

# Runs the license checks for Catalyst Voices.
check-license:
    FROM +builder
    RUN melos run license-check

generate-internal-docs:
    FROM +code-generator
    RUN melos docs-generate

    SAVE ARTIFACT docs/dartdoc AS LOCAL docs/dartdoc

# Run unit tests
test-unit-native:
    FROM +code-generator
    DO flutter-ci+UNIT_TESTS --PLATFORM=native --REPORT=true

test-unit-web:
    FROM +code-generator
    DO flutter-ci+UNIT_TESTS --PLATFORM=web --REPORT=false

# Runs static analysis on the code.
build-static-analysis:
    FROM +code-generator
    DO flutter-ci+ANALYZE

# Build web version of Catalyst Voices
build-web:
    FROM +code-generator
    ARG WORKDIR=/frontend/apps/voices
    ARG UPLOAD_DEBUG_SYMBOLS=false
    ARG tag='latest'

    DO +PARSE_BUILD_ARGS --tag=$tag

    DO flutter-ci+BUILD_WEB \
        --WORKDIR=$WORKDIR \
        --BUILD_MODE='--release' \
        --BUILD_NAME=$(cat build_name) \
        --BUILD_NUMBER=$(cat build_number) \
        --TARGET=lib/configs/main_web.dart \
        --UPLOAD_DEBUG_SYMBOLS=$UPLOAD_DEBUG_SYMBOLS \
        --SENTRY_ORG='iohk-j4' \
        --SENTRY_PROJECT='catalyst-voices'
    SAVE ARTIFACT --keep-ts web

package:
    FROM harbor.shared-services.projectcatalyst.io/dockerhub/caddy:2.10
    ARG tag='latest'

    COPY --keep-ts (+build-web/web --secret SENTRY_AUTH_TOKEN=SENTRY_AUTH_TOKEN --UPLOAD_DEBUG_SYMBOLS=true) /app

    # Note this is only used for local development, a different Caddyfile is
    # used during deployment. See the blueprint.cue file.
    COPY ./Caddyfile /etc/caddy/Caddyfile

    EXPOSE 8080
    EXPOSE 8081

    SAVE IMAGE voices-frontend:$tag

docker:
   FROM +package

   ARG container="voices"
   ARG tag="latest"

   SAVE IMAGE ${container}:${tag}

# This function centralizes logic behind parsing tag into build_name and build_number.
#
# Defaults:
# - build_name -> 0.1.0
# - build_number -> timestamp
#
# It follows conditions:
# - if tag has prefix <project>/vx.x.x but prefix is different then voices, uses defaults.
# - extracts build_name out of vx.x.x, for v0.0.1 it will be 0.0.1
# - extracts build_number from part after "+". eg v0.0.1+10 will result with 10
# - if allow_build_name_suffix is true, looks for suffixes after build_number and appends to name
#
# Saves build_name and build_number inside respective files.
PARSE_BUILD_ARGS:
    FUNCTION
    ARG tag='latest'
    ARG allow_build_name_suffix=true

    RUN bash -c '\
        set -e; \

        _build_name=""
        _build_number=""

        if echo "$tag" | grep -q "/" && ! echo "$tag" | grep -q "^voices/"; then
            echo "Invalid prefix found in tag '\''$tag'\''. Using default values."
        else
            _build_name=$(echo "$tag" | sed -n "s|.*v\([0-9]\+\.[0-9]\+\.[0-9]\+\).*|\1|p"); \

            if echo "$tag" | grep -q "+"; then \
                _build_number=$(echo "$tag" | cut -d"+" -f2 | cut -d"-" -f1); \
            fi; \

            if [ "$allow_build_name_suffix" = "true" ]; then
                _suffix=$(echo "$tag" | sed -n "s/.*\(-\S\+\)/\1/p");
                _build_name="${_build_name}${_suffix}";
            fi; \
        fi

        FINAL_BUILD_NAME=${_build_name:-"0.1.0"}; \
        FINAL_BUILD_NUMBER=${_build_number:-$(date +%s)}; \
        echo -n "$FINAL_BUILD_NAME" > build_name; \
        echo -n "$FINAL_BUILD_NUMBER" > build_number; \
    '
