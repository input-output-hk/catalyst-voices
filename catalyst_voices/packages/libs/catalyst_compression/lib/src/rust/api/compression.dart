// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `brotli_compress_helper`, `brotli_decompress_helper`, `zstd_compress_helper`, `zstd_decompress_helper`

/// Compress the bytes with brotli compression algorithm.
/// Runs the computation by a shared thread poll to avoid blocking the main thread.
///
/// # Arguments
///
/// - `bytes`: uncompressed bytes.
///
/// # Returns
///
/// Returns compressed bytes as a `Result`.
Future<Uint8List> brotliCompress({required List<int> bytes}) =>
    RustLib.instance.api.crateApiCompressionBrotliCompress(bytes: bytes);

/// Decompress the bytes with brotli compression algorithm.
/// Runs the computation by a shared thread poll to avoid blocking the main thread.
///
/// # Arguments
///
/// - `bytes`: brotli compressed bytes.
///
/// # Returns
///
/// Returns uncompressed bytes as `Result`.
Future<Uint8List> brotliDecompress({required List<int> bytes}) =>
    RustLib.instance.api.crateApiCompressionBrotliDecompress(bytes: bytes);

/// Compress the bytes with zstd compression algorithm.
/// Runs the computation by a shared thread poll to avoid blocking the main thread.
///
/// # Arguments
///
/// - `bytes`: uncompressed bytes.
///
/// # Returns
///
/// Returns compressed bytes as a `Result`.
Future<Uint8List> zstdCompress({required List<int> bytes}) =>
    RustLib.instance.api.crateApiCompressionZstdCompress(bytes: bytes);

/// Decompress the bytes with zstd compression algorithm.
/// Runs the computation by a shared thread poll to avoid blocking the main thread.
///
/// # Arguments
///
/// - `bytes`: zstd compressed bytes.
///
/// # Returns
///
/// Returns uncompressed bytes as `Result`.
Future<Uint8List> zstdDecompress({required List<int> bytes}) =>
    RustLib.instance.api.crateApiCompressionZstdDecompress(bytes: bytes);
