extension IterableExt<T> on Iterable<T> {
  /// Syntax sugar for [separatedByIndexed] when index or value does not
  /// matter.
  ///
  /// One common example is Column children separated by SizedBox.
  ///
  /// ```dart
  ///       Column(
  ///         children: <Widget>[
  ///           const Text('Title'),
  ///           const Text('Subtitle'),
  ///           const Text('Body'),
  ///         ].separatedBy(const SizedBox(height: 8)).toList(),
  ///       );
  /// ```
  Iterable<T> separatedBy(T value) => separatedByIndexed((_, __) => value);

  /// Inserts a value generated by the provided [builder] function between each
  /// element of the iterable.
  ///
  /// The builder function receives the index of the current element and
  /// the element itself.
  /// Returns a new iterable containing the original elements separated by the
  /// values generated by the builder function.
  Iterable<T> separatedByIndexed(T Function(int index, T value) builder) sync* {
    for (var index = 0; index < length; index++) {
      final value = elementAt(index);
      final isLast = index == length - 1;

      // Yield the current value and the separator if it's not the last element.
      if (isLast) {
        yield* [value];
      } else {
        yield* [value, builder(index, value)];
      }
    }
  }
}
