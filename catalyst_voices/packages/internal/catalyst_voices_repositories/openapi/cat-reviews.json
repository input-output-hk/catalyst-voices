{
  "openapi": "3.1.0",
  "info": {
    "title": "Catalyst Reviews",
    "version": "0.1.0"
  },
  "paths": {
    "/api/moderations/": {
      "post": {
        "tags": [
          "moderations"
        ],
        "summary": "Moderations:Create-Moderation",
        "description": "Create a new moderation.",
        "operationId": "moderations_create_moderation_api_moderations__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_moderations_create_moderation_api_moderations__post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModerationPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/moderations/{id}/": {
      "put": {
        "tags": [
          "moderations"
        ],
        "summary": "Moderations:Update-Moderation-By-Id",
        "description": "Update a moderation given an id.",
        "operationId": "moderations_update_moderation_by_id_api_moderations__id___put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "The ID of the moderation to update."
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_moderations_update_moderation_by_id_api_moderations__id___put"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModerationPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "moderations"
        ],
        "summary": "Moderations:Delete-Moderation-By-Id",
        "description": "Delete a moderation given an id.",
        "operationId": "moderations_delete_moderation_by_id_api_moderations__id___delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "The ID of the moderation to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "title": "Response Moderations Delete Moderation By Id Api Moderations  Id   Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/moderations/stats/": {
      "get": {
        "tags": [
          "moderations"
        ],
        "summary": "Moderations:Get-Stats",
        "description": "Get the stats for the moderations.",
        "operationId": "moderations_get_stats_api_moderations_stats__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModerationStatsPublic"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/moderations/moderator-stats/": {
      "get": {
        "tags": [
          "moderations"
        ],
        "summary": "Moderations:Get-Moderator-Stats",
        "description": "Get the stats for the moderators.",
        "operationId": "moderations_get_moderator_stats_api_moderations_moderator_stats__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ModeratorStatsPublic"
                  },
                  "type": "array",
                  "title": "Response Moderations Get Moderator Stats Api Moderations Moderator Stats  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/moderations/export/csv": {
      "get": {
        "tags": [
          "moderations"
        ],
        "summary": "Moderations:Csv Export",
        "description": "Export the reviews with moderation info.",
        "operationId": "moderations_csv_export_api_moderations_export_csv_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ModerationInDB"
                  },
                  "type": "array",
                  "title": "Response Moderations Csv Export Api Moderations Export Csv Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/moderations/by-review/{review_id}/": {
      "get": {
        "tags": [
          "moderations"
        ],
        "summary": "Moderations:Get-Moderations-By-Review",
        "description": "Get all moderations for a specific review.",
        "operationId": "moderations_get_moderations_by_review_api_moderations_by_review__review_id___get",
        "parameters": [
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "The ID of the review to get moderations for."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModerationPublic"
                  },
                  "title": "Response Moderations Get Moderations By Review Api Moderations By Review  Review Id   Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/moderations/generate-allocations": {
      "post": {
        "tags": [
          "moderations"
        ],
        "summary": "Moderations:Generate-Allocations",
        "description": "Generate moderation allocations.",
        "operationId": "moderations_generate_allocations_api_moderations_generate_allocations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_moderations_generate_allocations_api_moderations_generate_allocations_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModerationAllocationStats"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/categories/": {
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "Categories:Get-All-Categories",
        "description": "Get all categories.",
        "operationId": "categories_get_all_categories_api_categories__get",
        "parameters": [
          {
            "name": "event_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Used to determine the page to display",
              "title": "Event Id"
            },
            "description": "Used to determine the page to display"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryPublic"
                  },
                  "title": "Response Categories Get All Categories Api Categories  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/proposals/count/": {
      "get": {
        "tags": [
          "proposals"
        ],
        "summary": "Proposals:Get-All-Proposals-Count",
        "description": "Get count of all proposals.",
        "operationId": "proposals_get_all_proposals_count_api_proposals_count__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "title": "Response Proposals Get All Proposals Count Api Proposals Count  Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/proposals/{id}/": {
      "get": {
        "tags": [
          "proposals"
        ],
        "summary": "Proposals:Get-Proposal-By-Id",
        "description": "Get a proposal by id.",
        "operationId": "proposals_get_proposal_by_id_api_proposals__id___get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "The ID of the proposal to get."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/proposals/{id}/submitted-review/": {
      "get": {
        "tags": [
          "proposals"
        ],
        "summary": "Proposals:Get-Submitted-Review-By-Proposal-Id",
        "description": "Get a review submitted for a proposal by proposal_id.",
        "operationId": "proposals_get_submitted_review_by_proposal_id_api_proposals__id__submitted_review__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "The ID of the proposal to get the review for."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalReviewPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/proposals/": {
      "get": {
        "tags": [
          "proposals"
        ],
        "summary": "Proposals:Get-All-Proposals",
        "description": "Get all proposals.",
        "operationId": "proposals_get_all_proposals_api_proposals__get",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "description": "Used to determine how many proposals returns in the response",
              "default": 20,
              "title": "Size"
            },
            "description": "Used to determine how many proposals returns in the response"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Used to determine the page to display",
              "default": 0,
              "title": "Page"
            },
            "description": "Used to determine the page to display"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposalPublic"
                  },
                  "title": "Response Proposals Get All Proposals Api Proposals  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/proposals/allocated": {
      "get": {
        "tags": [
          "proposals"
        ],
        "summary": "Proposals:Get-Allocated-Proposals",
        "description": "Get all proposals allocated to the current user.",
        "operationId": "proposals_get_allocated_proposals_api_proposals_allocated_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "description": "Used to determine how many allocated proposals returns in the response",
              "default": 20,
              "title": "Size"
            },
            "description": "Used to determine how many allocated proposals returns in the response"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Used to determine the page to display",
              "default": 0,
              "title": "Page"
            },
            "description": "Used to determine the page to display"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposalPublic"
                  },
                  "title": "Response Proposals Get Allocated Proposals Api Proposals Allocated Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/proposals/allocated/count": {
      "get": {
        "tags": [
          "proposals"
        ],
        "summary": "Proposals:Get-Allocated-Proposals-Count",
        "description": "Get count of all proposals allocated to the current user.",
        "operationId": "proposals_get_allocated_proposals_count_api_proposals_allocated_count_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "title": "Response Proposals Get Allocated Proposals Count Api Proposals Allocated Count Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/proposal-reviews/": {
      "post": {
        "tags": [
          "proposal reviews"
        ],
        "summary": "Proposal-Reviews:Create-Proposal-Review",
        "description": "Create a new proposal_review.",
        "operationId": "proposal_reviews_create_proposal_review_api_proposal_reviews__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_proposal_reviews_create_proposal_review_api_proposal_reviews__post"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalReviewPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "proposal reviews"
        ],
        "summary": "Proposal-Reviews:Get-All-Proposal-Reviews",
        "description": "Get all proposal_reviews.",
        "operationId": "proposal_reviews_get_all_proposal_reviews_api_proposal_reviews__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "description": "Used to determine how many reviews returns in the response",
              "default": 20,
              "title": "Size"
            },
            "description": "Used to determine how many reviews returns in the response"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Used to determine the page to display",
              "default": 0,
              "title": "Page"
            },
            "description": "Used to determine the page to display"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposalReviewPublic"
                  },
                  "title": "Response Proposal Reviews Get All Proposal Reviews Api Proposal Reviews  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/proposal-reviews/count/": {
      "get": {
        "tags": [
          "proposal reviews"
        ],
        "summary": "Proposal-Reviews:Get-Proposal-Reviews-Count",
        "description": "Get the count of all proposal_reviews allocated for moderation to the current user.",
        "operationId": "proposal_reviews_get_proposal_reviews_count_api_proposal_reviews_count__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "title": "Response Proposal Reviews Get Proposal Reviews Count Api Proposal Reviews Count  Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/proposal-reviews/moderated/": {
      "get": {
        "tags": [
          "proposal reviews"
        ],
        "summary": "Proposal-Reviews:Get-Moderated-Proposal-Reviews",
        "description": "Get all proposal_reviews moderated by the current user.",
        "operationId": "proposal_reviews_get_moderated_proposal_reviews_api_proposal_reviews_moderated__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "description": "Used to determine how many reviews returns in the response",
              "default": 20,
              "title": "Size"
            },
            "description": "Used to determine how many reviews returns in the response"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Used to determine the page to display",
              "default": 0,
              "title": "Page"
            },
            "description": "Used to determine the page to display"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposalReviewPublic"
                  },
                  "title": "Response Proposal Reviews Get Moderated Proposal Reviews Api Proposal Reviews Moderated  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/proposal-reviews/moderated/count/": {
      "get": {
        "tags": [
          "proposal reviews"
        ],
        "summary": "Proposal-Reviews:Get-Moderated-Proposal-Reviews-Count",
        "description": "Get the count of all proposal_reviews moderated by the current user.",
        "operationId": "proposal_reviews_get_moderated_proposal_reviews_count_api_proposal_reviews_moderated_count__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "title": "Response Proposal Reviews Get Moderated Proposal Reviews Count Api Proposal Reviews Moderated Count  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/proposal-reviews/allocated/": {
      "get": {
        "tags": [
          "proposal reviews"
        ],
        "summary": "Proposal-Reviews:Get-Allocated-Proposal-Reviews",
        "description": "Get all proposal_reviews allocated to the current user for moderation.",
        "operationId": "proposal_reviews_get_allocated_proposal_reviews_api_proposal_reviews_allocated__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "description": "Used to determine how many reviews returns in the response",
              "default": 20,
              "title": "Size"
            },
            "description": "Used to determine how many reviews returns in the response"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Used to determine the page to display",
              "default": 0,
              "title": "Page"
            },
            "description": "Used to determine the page to display"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposalReviewPublic"
                  },
                  "title": "Response Proposal Reviews Get Allocated Proposal Reviews Api Proposal Reviews Allocated  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/proposal-reviews/allocated/count/": {
      "get": {
        "tags": [
          "proposal reviews"
        ],
        "summary": "Proposal-Reviews:Get-Allocated-Proposal-Reviews-Count",
        "description": "Get the count of all proposal_reviews allocated for moderation to the current user.",
        "operationId": "proposal_reviews_get_allocated_proposal_reviews_count_api_proposal_reviews_allocated_count__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "title": "Response Proposal Reviews Get Allocated Proposal Reviews Count Api Proposal Reviews Allocated Count  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/proposal-reviews/by-ids/": {
      "get": {
        "tags": [
          "proposal reviews"
        ],
        "summary": "Proposal-Reviews:Get-Proposal-Reviews-By-Ids",
        "description": "Get proposal_reviews by ids.",
        "operationId": "proposal_reviews_get_proposal_reviews_by_ids_api_proposal_reviews_by_ids__get",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Used to indicated the ids to fetch",
              "default": [],
              "title": "Ids"
            },
            "description": "Used to indicated the ids to fetch"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposalReviewPublic"
                  },
                  "title": "Response Proposal Reviews Get Proposal Reviews By Ids Api Proposal Reviews By Ids  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/proposal-reviews/filtered/": {
      "get": {
        "tags": [
          "proposal reviews"
        ],
        "summary": "Proposal-Reviews:Get-All-Proposal-Reviews-Filtered",
        "description": "Get all proposal_reviews.",
        "operationId": "proposal_reviews_get_all_proposal_reviews_filtered_api_proposal_reviews_filtered__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "description": "Used to determine how many reviews returns in the response",
              "default": 20,
              "title": "Size"
            },
            "description": "Used to determine how many reviews returns in the response"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Used to determine the page to display",
              "default": 0,
              "title": "Page"
            },
            "description": "Used to determine the page to display"
          },
          {
            "name": "assessor",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Used to filter by assessor",
              "title": "Assessor"
            },
            "description": "Used to filter by assessor"
          },
          {
            "name": "proposal",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Used to filter by proposal title",
              "title": "Proposal"
            },
            "description": "Used to filter by proposal title"
          },
          {
            "name": "proposal_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Used to filter by proposal ID",
              "title": "Proposal Id"
            },
            "description": "Used to filter by proposal ID"
          },
          {
            "name": "objective",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Used to filter by objective",
              "title": "Objective"
            },
            "description": "Used to filter by objective"
          },
          {
            "name": "include_excluded",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Used to filter by include excluded",
              "default": false,
              "title": "Include Excluded"
            },
            "description": "Used to filter by include excluded"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposalReviewPublic"
                  },
                  "title": "Response Proposal Reviews Get All Proposal Reviews Filtered Api Proposal Reviews Filtered  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/proposal-reviews/filtered/count/": {
      "get": {
        "tags": [
          "proposal reviews"
        ],
        "summary": "Proposal-Reviews:Get-All-Proposal-Reviews-Filtered-Count",
        "description": "Get all proposal_reviews.",
        "operationId": "proposal_reviews_get_all_proposal_reviews_filtered_count_api_proposal_reviews_filtered_count__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "assessor",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Used to filter by assessor",
              "title": "Assessor"
            },
            "description": "Used to filter by assessor"
          },
          {
            "name": "proposal",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Used to filter by proposal title",
              "title": "Proposal"
            },
            "description": "Used to filter by proposal title"
          },
          {
            "name": "proposal_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Used to filter by proposal ID",
              "title": "Proposal Id"
            },
            "description": "Used to filter by proposal ID"
          },
          {
            "name": "objective",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Used to filter by objective",
              "title": "Objective"
            },
            "description": "Used to filter by objective"
          },
          {
            "name": "include_excluded",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Used to filter by include excluded",
              "default": false,
              "title": "Include Excluded"
            },
            "description": "Used to filter by include excluded"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "title": "Response Proposal Reviews Get All Proposal Reviews Filtered Count Api Proposal Reviews Filtered Count  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/proposal-reviews/{id}/": {
      "get": {
        "tags": [
          "proposal reviews"
        ],
        "summary": "Proposal-Reviews:Get-Proposal-Review-By-Id",
        "description": "Get a proposal_review by id.",
        "operationId": "proposal_reviews_get_proposal_review_by_id_api_proposal_reviews__id___get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "The ID of the proposal_review to get."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalReviewPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "proposal reviews"
        ],
        "summary": "Proposal-Reviews:Update-Proposal-Review-By-Id",
        "description": "Update a proposal_review given an id.",
        "operationId": "proposal_reviews_update_proposal_review_by_id_api_proposal_reviews__id___put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "The ID of the proposal_review to update."
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_proposal_reviews_update_proposal_review_by_id_api_proposal_reviews__id___put"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalReviewPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "proposal reviews"
        ],
        "summary": "Proposal-Reviews:Delete-Proposal-Review-By-Id",
        "description": "Delete a proposal_review given an id.",
        "operationId": "proposal_reviews_delete_proposal_review_by_id_api_proposal_reviews__id___delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "The ID of the proposal review to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "title": "Response Proposal Reviews Delete Proposal Review By Id Api Proposal Reviews  Id   Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/proposal-reviews/export/csv": {
      "get": {
        "tags": [
          "proposal reviews"
        ],
        "summary": "Moderations:Csv Export",
        "description": "Export the reviews with moderation info.",
        "operationId": "moderations_csv_export_api_proposal_reviews_export_csv_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LightProposalReviewModerated"
                  },
                  "type": "array",
                  "title": "Response Moderations Csv Export Api Proposal Reviews Export Csv Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/proposal-reviews/export/full-csv": {
      "get": {
        "tags": [
          "proposal reviews"
        ],
        "summary": "Moderations:Csv Export",
        "description": "Export the full reviews with moderation info.",
        "operationId": "moderations_csv_export_api_proposal_reviews_export_full_csv_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProposalReviewModerated"
                  },
                  "type": "array",
                  "title": "Response Moderations Csv Export Api Proposal Reviews Export Full Csv Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/proposal-reviews/generate-allocations": {
      "post": {
        "tags": [
          "proposal reviews"
        ],
        "summary": "Proposal-Reviews:Generate-Allocations",
        "description": "Generate reviews allocations.",
        "operationId": "proposal_reviews_generate_allocations_api_proposal_reviews_generate_allocations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_proposal_reviews_generate_allocations_api_proposal_reviews_generate_allocations_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewsAllocationStats"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/users/": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Users:Register-New-User",
        "description": "Register a new user.",
        "operationId": "users_register_new_user_api_users__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_users_register_new_user_api_users__post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented."
          },
          "404": {
            "description": "CatalystID not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/token/login": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Users:Login-Email-And-Password",
        "description": "Login with email and password and return access token.",
        "operationId": "users_login_email_and_password_api_users_token_login_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_users_login_email_and_password_api_users_token_login_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/token/refresh": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Users:Refresh-Token",
        "description": "Get the refresh token for an authorized user.",
        "operationId": "users_refresh_token_api_users_token_refresh_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized."
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/users/me/": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Users:Get-Current-User",
        "description": "Get the currently authenticated user (if any).",
        "operationId": "users_get_current_user_api_users_me__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized."
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/users/password/update": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Users:Update-Password",
        "description": "Update the password of a user.",
        "operationId": "users_update_password_api_users_password_update_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_users_update_password_api_users_password_update_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/users/password/reset": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Users:Reset-Password",
        "description": "Update the password of a user.",
        "operationId": "users_reset_password_api_users_password_reset_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_users_reset_password_api_users_password_reset_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Users Reset Password Api Users Password Reset Post"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/activate": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Users:Activate",
        "description": "Activate the current user.",
        "operationId": "users_activate_api_users_activate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_users_activate_api_users_activate_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Users Activate Api Users Activate Post"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/password/reset-request": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Users:Password-Reset-Request",
        "description": "Request the password reset for a new user.",
        "operationId": "users_password_reset_request_api_users_password_reset_request_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_users_password_reset_request_api_users_password_reset_request_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Users Password Reset Request Api Users Password Reset Request Post"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/email/send/": {
      "post": {
        "tags": [
          "emails"
        ],
        "summary": "Emails:Send",
        "description": "Endpoint to be used to send out HTML emails. Acts as email gateway only for admins.",
        "operationId": "emails_send_api_email_send__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_emails_send_api_email_send__post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Emails Send Api Email Send  Post"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/configs/current-event/": {
      "get": {
        "tags": [
          "config"
        ],
        "summary": "Configs:Current-Event",
        "description": "Get the current active event.",
        "operationId": "configs_current_event_api_configs_current_event__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentEventPublic"
                }
              }
            }
          }
        }
      }
    },
    "/api/configs/current-event/{event}/": {
      "put": {
        "tags": [
          "config"
        ],
        "summary": "Configs:Edit-Current-Event",
        "description": "Edit current event config.",
        "operationId": "configs_edit_current_event_api_configs_current_event__event___put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "event",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "The event of the reviews config to get."
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentEventPublic"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/configs/reviews/{event}/": {
      "put": {
        "tags": [
          "config"
        ],
        "summary": "Configs:Edit-Reviews",
        "description": "Edit moderation config.",
        "operationId": "configs_edit_reviews_api_configs_reviews__event___put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "event",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "The event of the reviews config to update."
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_configs_edit_reviews_api_configs_reviews__event___put"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigPublic"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "config"
        ],
        "summary": "Configs:Get-Reviews",
        "description": "Get a proposal by id.",
        "operationId": "configs_get_reviews_api_configs_reviews__event___get",
        "parameters": [
          {
            "name": "event",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "The event of the reviews config to get."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/configs/reviews-level-qualifiers/{event}/": {
      "get": {
        "tags": [
          "config"
        ],
        "summary": "Configs:Get-Level-Qualifiers",
        "description": "Get a proposal by id.",
        "operationId": "configs_get_level_qualifiers_api_configs_reviews_level_qualifiers__event___get",
        "parameters": [
          {
            "name": "event",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "The event of the reviews config to get."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewsLevelQualifiersPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "config"
        ],
        "summary": "Configs:Edit-Reviews-Level-Qualifiers",
        "description": "Edit level qualifiers config.",
        "operationId": "configs_edit_reviews_level_qualifiers_api_configs_reviews_level_qualifiers__event___put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "event",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "The event of the reviews level qualifiers config to update."
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_configs_edit_reviews_level_qualifiers_api_configs_reviews_level_qualifiers__event___put"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigPublic"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/sumsub/webhook/": {
      "post": {
        "tags": [
          "sumsub"
        ],
        "summary": "Sumsub:Webhook",
        "description": "Endpoint to be used to receive Webhooks from SumSub.",
        "operationId": "sumsub_webhook_api_sumsub_webhook__post",
        "parameters": [
          {
            "name": "x-payload-digest-alg",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SumSubDigestAlg"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Payload-Digest-Alg"
            }
          },
          {
            "name": "x-payload-digest",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Payload-Digest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "401": {
            "description": "Not authorized."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/subscriptions/": {
      "post": {
        "tags": [
          "reviewers subscriptions"
        ],
        "summary": "Reviewer-Subscription:Create",
        "description": "Endpoint to be create a reviewer subscription.",
        "operationId": "reviewer_subscription_create_api_subscriptions__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_reviewer_subscription_create_api_subscriptions__post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ReviewerSubscriptionPublic"
                  },
                  "type": "array",
                  "title": "Response Reviewer Subscription Create Api Subscriptions  Post"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/catalyst-ids/me": {
      "get": {
        "tags": [
          "catalyst ids"
        ],
        "summary": "Catalyst-Ids:Get-By-Current-User",
        "description": "Get a catalyst id from request.",
        "operationId": "catalyst_ids_get_by_current_user_api_catalyst_ids_me_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-test-rbac-uri",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Test-Rbac-Uri"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalystIDPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "catalyst ids"
        ],
        "summary": "Catalyst-Ids:Post-Info",
        "description": "Update info associated with a catalyst id.",
        "operationId": "catalyst_ids_post_info_api_catalyst_ids_me_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-test-rbac-uri",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Test-Rbac-Uri"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalystIDCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalystIDPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/catalyst-ids/verify-email": {
      "post": {
        "tags": [
          "catalyst ids"
        ],
        "summary": "Catalyst-Ids:Verify-Email",
        "description": "Verify the email address for a user.",
        "operationId": "catalyst_ids_verify_email_api_catalyst_ids_verify_email_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_catalyst_ids_verify_email_api_catalyst_ids_verify_email_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Catalyst Ids Verify Email Api Catalyst Ids Verify Email Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "summary": "Endpoint",
        "operationId": "endpoint_healthz_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessToken": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "token_type"
        ],
        "title": "AccessToken",
        "description": "Access token model."
      },
      "AllocationStatsAverages": {
        "properties": {
          "avg": {
            "type": "number",
            "title": "Avg",
            "default": 0
          },
          "min": {
            "type": "integer",
            "title": "Min",
            "default": 0
          },
          "max": {
            "type": "integer",
            "title": "Max",
            "default": 0
          }
        },
        "type": "object",
        "title": "AllocationStatsAverages",
        "description": "Model for generic averages."
      },
      "AllocationStatsReviewers": {
        "properties": {
          "tot": {
            "type": "integer",
            "title": "Tot",
            "default": 0
          },
          "lv0": {
            "type": "integer",
            "title": "Lv0",
            "default": 0
          },
          "lv1": {
            "type": "integer",
            "title": "Lv1",
            "default": 0
          }
        },
        "type": "object",
        "title": "AllocationStatsReviewers",
        "description": "Model for stats of reviewers."
      },
      "Body_catalyst_ids_verify_email_api_catalyst_ids_verify_email_post": {
        "properties": {
          "email_verification": {
            "$ref": "#/components/schemas/UserActivation"
          }
        },
        "type": "object",
        "required": [
          "email_verification"
        ],
        "title": "Body_catalyst_ids_verify_email_api_catalyst_ids_verify_email_post"
      },
      "Body_configs_edit_reviews_api_configs_reviews__event___put": {
        "properties": {
          "record_update": {
            "$ref": "#/components/schemas/ReviewsConfigCreate"
          }
        },
        "type": "object",
        "required": [
          "record_update"
        ],
        "title": "Body_configs_edit_reviews_api_configs_reviews__event___put"
      },
      "Body_configs_edit_reviews_level_qualifiers_api_configs_reviews_level_qualifiers__event___put": {
        "properties": {
          "record_update": {
            "$ref": "#/components/schemas/ReviewsLevelQualifiersCreate"
          }
        },
        "type": "object",
        "required": [
          "record_update"
        ],
        "title": "Body_configs_edit_reviews_level_qualifiers_api_configs_reviews_level_qualifiers__event___put"
      },
      "Body_emails_send_api_email_send__post": {
        "properties": {
          "new_email": {
            "$ref": "#/components/schemas/EmailMsg"
          }
        },
        "type": "object",
        "required": [
          "new_email"
        ],
        "title": "Body_emails_send_api_email_send__post"
      },
      "Body_moderations_create_moderation_api_moderations__post": {
        "properties": {
          "new_moderation": {
            "$ref": "#/components/schemas/ModerationCreate"
          }
        },
        "type": "object",
        "required": [
          "new_moderation"
        ],
        "title": "Body_moderations_create_moderation_api_moderations__post"
      },
      "Body_moderations_generate_allocations_api_moderations_generate_allocations_post": {
        "properties": {
          "allocation_params": {
            "$ref": "#/components/schemas/ModerationAllocationCreate"
          }
        },
        "type": "object",
        "required": [
          "allocation_params"
        ],
        "title": "Body_moderations_generate_allocations_api_moderations_generate_allocations_post"
      },
      "Body_moderations_update_moderation_by_id_api_moderations__id___put": {
        "properties": {
          "record_update": {
            "$ref": "#/components/schemas/ModerationUpdate"
          }
        },
        "type": "object",
        "required": [
          "record_update"
        ],
        "title": "Body_moderations_update_moderation_by_id_api_moderations__id___put"
      },
      "Body_proposal_reviews_create_proposal_review_api_proposal_reviews__post": {
        "properties": {
          "new_proposal_review": {
            "$ref": "#/components/schemas/ProposalReviewCreate"
          }
        },
        "type": "object",
        "required": [
          "new_proposal_review"
        ],
        "title": "Body_proposal_reviews_create_proposal_review_api_proposal_reviews__post"
      },
      "Body_proposal_reviews_generate_allocations_api_proposal_reviews_generate_allocations_post": {
        "properties": {
          "allocation_params": {
            "$ref": "#/components/schemas/ReviewsAllocationCreate"
          }
        },
        "type": "object",
        "required": [
          "allocation_params"
        ],
        "title": "Body_proposal_reviews_generate_allocations_api_proposal_reviews_generate_allocations_post"
      },
      "Body_proposal_reviews_update_proposal_review_by_id_api_proposal_reviews__id___put": {
        "properties": {
          "proposal_review_update": {
            "$ref": "#/components/schemas/ProposalReviewUpdate"
          }
        },
        "type": "object",
        "required": [
          "proposal_review_update"
        ],
        "title": "Body_proposal_reviews_update_proposal_review_by_id_api_proposal_reviews__id___put"
      },
      "Body_reviewer_subscription_create_api_subscriptions__post": {
        "properties": {
          "new_subscription": {
            "$ref": "#/components/schemas/ReviewerSubscriptionCreate"
          }
        },
        "type": "object",
        "required": [
          "new_subscription"
        ],
        "title": "Body_reviewer_subscription_create_api_subscriptions__post"
      },
      "Body_users_activate_api_users_activate_post": {
        "properties": {
          "user_activation": {
            "$ref": "#/components/schemas/UserActivation"
          }
        },
        "type": "object",
        "required": [
          "user_activation"
        ],
        "title": "Body_users_activate_api_users_activate_post"
      },
      "Body_users_login_email_and_password_api_users_token_login_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "password"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_users_login_email_and_password_api_users_token_login_post"
      },
      "Body_users_password_reset_request_api_users_password_reset_request_post": {
        "properties": {
          "new_user": {
            "$ref": "#/components/schemas/UserRequestResetPassword"
          }
        },
        "type": "object",
        "required": [
          "new_user"
        ],
        "title": "Body_users_password_reset_request_api_users_password_reset_request_post"
      },
      "Body_users_register_new_user_api_users__post": {
        "properties": {
          "new_user": {
            "$ref": "#/components/schemas/UserCreate"
          }
        },
        "type": "object",
        "required": [
          "new_user"
        ],
        "title": "Body_users_register_new_user_api_users__post"
      },
      "Body_users_reset_password_api_users_password_reset_post": {
        "properties": {
          "user_reset": {
            "$ref": "#/components/schemas/UserResetPassword"
          }
        },
        "type": "object",
        "required": [
          "user_reset"
        ],
        "title": "Body_users_reset_password_api_users_password_reset_post"
      },
      "Body_users_update_password_api_users_password_update_post": {
        "properties": {
          "update_user": {
            "$ref": "#/components/schemas/UserUpdate"
          }
        },
        "type": "object",
        "required": [
          "update_user"
        ],
        "title": "Body_users_update_password_api_users_password_update_post"
      },
      "CatalystIDCreate": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "CatalystIDCreate",
        "description": "Model for the creation and the update of the email in DB."
      },
      "CatalystIDPublic": {
        "properties": {
          "_cid": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cid"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Username"
          },
          "status": {
            "$ref": "#/components/schemas/CatalystIDStatus",
            "default": 0
          }
        },
        "type": "object",
        "title": "CatalystIDPublic",
        "description": "Model for the CatalystID to expose publicly."
      },
      "CatalystIDStatus": {
        "type": "integer",
        "enum": [0, 1, 2, 3],
        "title": "CatalystIDStatus",
        "description": "Enum to describe the catalyst_id status."
      },
      "CategoryInDB": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "event": {
            "type": "integer",
            "title": "Event"
          },
          "category": {
            "$ref": "#/components/schemas/CategoryType",
            "default": "catalyst-simple"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "rewards_currency": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rewards Currency"
          },
          "proposers_rewards": {
            "type": "integer",
            "title": "Proposers Rewards",
            "default": 0
          },
          "row_id": {
            "type": "integer",
            "title": "Row Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "event",
          "title",
          "row_id"
        ],
        "title": "CategoryInDB",
        "description": "Category representation in DB."
      },
      "CategoryPublic": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "event": {
            "type": "integer",
            "title": "Event"
          },
          "category": {
            "$ref": "#/components/schemas/CategoryType",
            "default": "catalyst-simple"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "rewards_currency": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rewards Currency"
          },
          "proposers_rewards": {
            "type": "integer",
            "title": "Proposers Rewards",
            "default": 0
          },
          "row_id": {
            "type": "integer",
            "title": "Row Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "event",
          "title",
          "row_id"
        ],
        "title": "CategoryPublic",
        "description": "Publicly exposed attributes."
      },
      "CategoryType": {
        "type": "string",
        "enum": [
          "catalyst-simple"
        ],
        "title": "CategoryType",
        "description": "Enum for available category types."
      },
      "ClassificationType": {
        "type": "integer",
        "enum": [0, 1],
        "title": "ClassificationType",
        "description": "Enum to describe possible classification types."
      },
      "ConfigPublic": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "id2": {
            "type": "string",
            "title": "Id2"
          },
          "value": {
            "$ref": "#/components/schemas/ReviewsSwitches",
            "default": {
              "user_registration_enabled": false,
              "reviewer_subscription_enabled": false,
              "review_submission_enabled": false,
              "moderation_submission_enabled": false
            }
          },
          "row_id": {
            "type": "integer",
            "title": "Row Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "id2",
          "row_id"
        ],
        "title": "ConfigPublic",
        "description": "Attributes for the creation/update of configs."
      },
      "CurrentEventPublic": {
        "properties": {
          "row_id": {
            "type": "integer",
            "title": "Row Id"
          },
          "config_type": {
            "type": "string",
            "title": "Config Type"
          },
          "value": {
            "type": "integer",
            "title": "Value",
            "default": 9
          }
        },
        "type": "object",
        "required": [
          "row_id",
          "config_type"
        ],
        "title": "CurrentEventPublic",
        "description": "Attributes for CurrentEvent public model in responses."
      },
      "DueDiligence": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/DueDiligenceStatus",
            "default": 0
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          },
          "applicant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Applicant Id"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id"
          }
        },
        "type": "object",
        "title": "DueDiligence",
        "description": "Submodel to store data related to the Due Diligence."
      },
      "DueDiligencePublic": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/DueDiligenceStatus",
            "default": 0
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          }
        },
        "type": "object",
        "title": "DueDiligencePublic",
        "description": "Submodel to store data related to the Due Diligence."
      },
      "DueDiligenceStatus": {
        "type": "integer",
        "enum": [0, 1, 2, 3, 4],
        "title": "DueDiligenceStatus",
        "description": "Enum to describe possible user roles."
      },
      "EmailMsg": {
        "properties": {
          "subject": {
            "type": "string",
            "title": "Subject"
          },
          "text": {
            "type": "string",
            "title": "Text"
          },
          "html": {
            "type": "string",
            "title": "Html"
          },
          "recipients": {
            "items": {
              "type": "string",
              "format": "email"
            },
            "type": "array",
            "title": "Recipients"
          }
        },
        "type": "object",
        "required": [
          "subject",
          "text",
          "html",
          "recipients"
        ],
        "title": "EmailMsg",
        "description": "Represents an email message."
      },
      "EventPublic": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "row_id": {
            "type": "integer",
            "title": "Row Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "row_id"
        ],
        "title": "EventPublic",
        "description": "Publicly exposed attributes."
      },
      "FlagType": {
        "type": "integer",
        "enum": [0, 1, 2],
        "title": "FlagType",
        "description": "Enum to describe possible flag types."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HistoricStats": {
        "properties": {
          "reviews": {
            "$ref": "#/components/schemas/ReviewHistoricStats",
            "default": {
              "active_funds": 0,
              "submitted": 0,
              "blank": 0,
              "valid": 0
            }
          },
          "moderations": {
            "$ref": "#/components/schemas/ModerationsHistoricStats",
            "default": {
              "active_funds": 0,
              "submitted": 0
            }
          }
        },
        "type": "object",
        "title": "HistoricStats",
        "description": "Submodel to describe the historic stats."
      },
      "LevelQualifier": {
        "properties": {
          "min_valid_reviews": {
            "type": "integer",
            "title": "Min Valid Reviews",
            "default": 0
          },
          "max_valid_reviews": {
            "type": "integer",
            "title": "Max Valid Reviews",
            "default": 10
          },
          "min_perc_valid_reviews": {
            "type": "number",
            "title": "Min Perc Valid Reviews",
            "default": 0.8
          },
          "max_perc_valid_reviews": {
            "type": "number",
            "title": "Max Perc Valid Reviews",
            "default": 1
          },
          "min_active_funds": {
            "type": "integer",
            "title": "Min Active Funds",
            "default": 0
          },
          "max_active_funds": {
            "type": "integer",
            "title": "Max Active Funds",
            "default": 10
          }
        },
        "type": "object",
        "title": "LevelQualifier",
        "description": "Submodel to store a single level qualifier."
      },
      "LightProposalReviewModerated": {
        "properties": {
          "row_id": {
            "type": "integer",
            "title": "Row Id"
          },
          "moderations_tot": {
            "type": "integer",
            "title": "Moderations Tot"
          },
          "moderations_as_valid": {
            "type": "integer",
            "title": "Moderations As Valid"
          }
        },
        "type": "object",
        "required": [
          "row_id",
          "moderations_tot",
          "moderations_as_valid"
        ],
        "title": "LightProposalReviewModerated",
        "description": "Attributes used to export moderated results."
      },
      "ModeratedStatsPublic": {
        "properties": {
          "by_0": {
            "type": "integer",
            "title": "By 0"
          },
          "by_1": {
            "type": "integer",
            "title": "By 1"
          },
          "by_2": {
            "type": "integer",
            "title": "By 2"
          },
          "by_3": {
            "type": "integer",
            "title": "By 3"
          },
          "by_more": {
            "type": "integer",
            "title": "By More"
          }
        },
        "type": "object",
        "required": [
          "by_0",
          "by_1",
          "by_2",
          "by_3",
          "by_more"
        ],
        "title": "ModeratedStatsPublic",
        "description": "Attributes for the statistic of progressing moderation stage."
      },
      "ModerationAllocationCreate": {
        "properties": {
          "event_id": {
            "type": "integer",
            "title": "Event Id"
          },
          "moderation_seed": {
            "type": "integer",
            "title": "Moderation Seed",
            "default": 42
          },
          "nr_of_moderations_per_review": {
            "type": "integer",
            "title": "Nr Of Moderations Per Review",
            "default": 5
          },
          "min_spot_check_per_reviewer": {
            "type": "integer",
            "title": "Min Spot Check Per Reviewer",
            "default": 10
          },
          "dry_run": {
            "type": "boolean",
            "title": "Dry Run",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "event_id"
        ],
        "title": "ModerationAllocationCreate",
        "description": "Model for the creation of moderators allocation."
      },
      "ModerationAllocationStats": {
        "properties": {
          "tot": {
            "type": "integer",
            "title": "Tot"
          },
          "nr_of_moderators": {
            "type": "integer",
            "title": "Nr Of Moderators"
          },
          "per_reviewer": {
            "$ref": "#/components/schemas/AllocationStatsAverages",
            "default": {
              "avg": 0,
              "min": 0,
              "max": 0
            }
          },
          "per_review": {
            "$ref": "#/components/schemas/AllocationStatsAverages",
            "default": {
              "avg": 0,
              "min": 0,
              "max": 0
            }
          },
          "per_moderator": {
            "$ref": "#/components/schemas/AllocationStatsAverages",
            "default": {
              "avg": 0,
              "min": 0,
              "max": 0
            }
          }
        },
        "type": "object",
        "required": [
          "tot",
          "nr_of_moderators"
        ],
        "title": "ModerationAllocationStats",
        "description": "Model for stats of the allocation for moderators."
      },
      "ModerationCreate": {
        "properties": {
          "review_id": {
            "type": "integer",
            "title": "Review Id"
          },
          "classification": {
            "$ref": "#/components/schemas/ClassificationType"
          },
          "rationale": {
            "type": "string",
            "title": "Rationale"
          }
        },
        "type": "object",
        "required": [
          "review_id",
          "classification",
          "rationale"
        ],
        "title": "ModerationCreate",
        "description": "Attributes required to create a new Moderation.\n\nUsed at POST request."
      },
      "ModerationInDB": {
        "properties": {
          "review_id": {
            "type": "integer",
            "title": "Review Id"
          },
          "classification": {
            "$ref": "#/components/schemas/ClassificationType"
          },
          "rationale": {
            "type": "string",
            "title": "Rationale"
          },
          "row_id": {
            "type": "integer",
            "title": "Row Id"
          },
          "user_id": {
            "type": "integer",
            "title": "User Id"
          }
        },
        "type": "object",
        "required": [
          "review_id",
          "classification",
          "rationale",
          "row_id",
          "user_id"
        ],
        "title": "ModerationInDB",
        "description": "Attributes on any ProposalReview coming from Database."
      },
      "ModerationPublic": {
        "properties": {
          "review_id": {
            "type": "integer",
            "title": "Review Id"
          },
          "classification": {
            "$ref": "#/components/schemas/ClassificationType"
          },
          "rationale": {
            "type": "string",
            "title": "Rationale"
          },
          "row_id": {
            "type": "integer",
            "title": "Row Id"
          }
        },
        "type": "object",
        "required": [
          "review_id",
          "classification",
          "rationale",
          "row_id"
        ],
        "title": "ModerationPublic",
        "description": "Attributes that will be returned at any public request."
      },
      "ModerationStatsPublic": {
        "properties": {
          "moderations": {
            "type": "integer",
            "title": "Moderations"
          },
          "allocations": {
            "type": "integer",
            "title": "Allocations"
          },
          "flagged_reviews": {
            "type": "integer",
            "title": "Flagged Reviews"
          },
          "reviews_moderated": {
            "$ref": "#/components/schemas/ModeratedStatsPublic"
          }
        },
        "type": "object",
        "required": [
          "moderations",
          "allocations",
          "flagged_reviews",
          "reviews_moderated"
        ],
        "title": "ModerationStatsPublic",
        "description": "Stats for the moderation status."
      },
      "ModerationUpdate": {
        "properties": {
          "review_id": {
            "type": "integer",
            "title": "Review Id"
          },
          "classification": {
            "$ref": "#/components/schemas/ClassificationType"
          },
          "rationale": {
            "type": "string",
            "title": "Rationale"
          }
        },
        "type": "object",
        "required": [
          "review_id",
          "classification",
          "rationale"
        ],
        "title": "ModerationUpdate",
        "description": "Attributes required to update a Moderation.\n\nUsed at PUT request."
      },
      "ModerationsHistoricStats": {
        "properties": {
          "active_funds": {
            "type": "integer",
            "title": "Active Funds",
            "default": 0
          },
          "submitted": {
            "type": "integer",
            "title": "Submitted",
            "default": 0
          }
        },
        "type": "object",
        "title": "ModerationsHistoricStats",
        "description": "Submodel to describe the historic stats as a reviewer."
      },
      "ModeratorStatsPublic": {
        "properties": {
          "user_id": {
            "type": "integer",
            "title": "User Id"
          },
          "reviews_moderated": {
            "type": "integer",
            "title": "Reviews Moderated"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "reviews_moderated"
        ],
        "title": "ModeratorStatsPublic",
        "description": "Stats for the moderation status."
      },
      "PolicyAcknowledgment": {
        "properties": {
          "privacy_policy": {
            "type": "boolean",
            "title": "Privacy Policy",
            "default": false
          },
          "terms_and_conditions": {
            "type": "boolean",
            "title": "Terms And Conditions",
            "default": false
          }
        },
        "type": "object",
        "title": "PolicyAcknowledgment",
        "description": "Submodel to store the policy acknowledgments."
      },
      "ProposalInDB": {
        "properties": {
          "pr_id": {
            "type": "integer",
            "title": "Pr Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "summary": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Summary"
          },
          "objective": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Objective"
          },
          "objective_title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Objective Title"
          },
          "public_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Public Key"
          },
          "funds": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Funds"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          },
          "files_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Files Url"
          },
          "row_id": {
            "type": "integer",
            "title": "Row Id"
          }
        },
        "type": "object",
        "required": [
          "pr_id",
          "title",
          "row_id"
        ],
        "title": "ProposalInDB",
        "description": "Attributes on any Proposal coming from Database."
      },
      "ProposalPublic": {
        "properties": {
          "pr_id": {
            "type": "integer",
            "title": "Pr Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "summary": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Summary"
          },
          "objective": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Objective"
          },
          "objective_title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Objective Title"
          },
          "public_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Public Key"
          },
          "funds": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Funds"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          },
          "files_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Files Url"
          },
          "row_id": {
            "type": "integer",
            "title": "Row Id"
          }
        },
        "type": "object",
        "required": [
          "pr_id",
          "title",
          "row_id"
        ],
        "title": "ProposalPublic",
        "description": "Attributes that will be returned at any public request."
      },
      "ProposalReviewCreate": {
        "properties": {
          "proposal_id": {
            "type": "integer",
            "title": "Proposal Id"
          },
          "impact_alignment_rating_given": {
            "type": "integer",
            "maximum": 5,
            "minimum": 1,
            "title": "Impact Alignment Rating Given"
          },
          "impact_alignment_note": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 200,
            "title": "Impact Alignment Note"
          },
          "feasibility_rating_given": {
            "type": "integer",
            "maximum": 5,
            "minimum": 1,
            "title": "Feasibility Rating Given"
          },
          "feasibility_note": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 200,
            "title": "Feasibility Note"
          },
          "auditability_rating_given": {
            "type": "integer",
            "maximum": 5,
            "minimum": 1,
            "title": "Auditability Rating Given"
          },
          "auditability_note": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 200,
            "title": "Auditability Note"
          }
        },
        "type": "object",
        "required": [
          "proposal_id",
          "impact_alignment_rating_given",
          "impact_alignment_note",
          "feasibility_rating_given",
          "feasibility_note",
          "auditability_rating_given",
          "auditability_note"
        ],
        "title": "ProposalReviewCreate",
        "description": "Attributes required to create a new ProposalReview.\n\nUsed at POST request."
      },
      "ProposalReviewFlag": {
        "properties": {
          "flag_type": {
            "$ref": "#/components/schemas/FlagType"
          },
          "score": {
            "type": "number",
            "title": "Score"
          },
          "related_reviews": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Related Reviews"
          },
          "related_criteria": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Related Criteria"
          }
        },
        "type": "object",
        "required": [
          "flag_type",
          "score",
          "related_reviews"
        ],
        "title": "ProposalReviewFlag",
        "description": "Submodel to store reviews flags."
      },
      "ProposalReviewModerated": {
        "properties": {
          "row_id": {
            "type": "integer",
            "title": "Row Id"
          },
          "moderations_tot": {
            "type": "integer",
            "title": "Moderations Tot"
          },
          "moderations_as_valid": {
            "type": "integer",
            "title": "Moderations As Valid"
          },
          "proposal_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Proposal Id"
          },
          "assessor": {
            "type": "string",
            "title": "Assessor"
          },
          "impact_alignment_rating_given": {
            "type": "integer",
            "title": "Impact Alignment Rating Given"
          },
          "impact_alignment_note": {
            "type": "string",
            "title": "Impact Alignment Note"
          },
          "feasibility_rating_given": {
            "type": "integer",
            "title": "Feasibility Rating Given"
          },
          "feasibility_note": {
            "type": "string",
            "title": "Feasibility Note"
          },
          "auditability_rating_given": {
            "type": "integer",
            "title": "Auditability Rating Given"
          },
          "auditability_note": {
            "type": "string",
            "title": "Auditability Note"
          },
          "assessor_level": {
            "type": "integer",
            "title": "Assessor Level"
          },
          "ranking": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ranking"
          },
          "proposal": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ProposalInDB"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "row_id",
          "moderations_tot",
          "moderations_as_valid",
          "assessor",
          "impact_alignment_rating_given",
          "impact_alignment_note",
          "feasibility_rating_given",
          "feasibility_note",
          "auditability_rating_given",
          "auditability_note",
          "assessor_level"
        ],
        "title": "ProposalReviewModerated",
        "description": "Attributes used to export full review with moderation results."
      },
      "ProposalReviewPublic": {
        "properties": {
          "proposal_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Proposal Id"
          },
          "assessor": {
            "type": "string",
            "title": "Assessor"
          },
          "impact_alignment_rating_given": {
            "type": "integer",
            "title": "Impact Alignment Rating Given"
          },
          "impact_alignment_note": {
            "type": "string",
            "title": "Impact Alignment Note"
          },
          "feasibility_rating_given": {
            "type": "integer",
            "title": "Feasibility Rating Given"
          },
          "feasibility_note": {
            "type": "string",
            "title": "Feasibility Note"
          },
          "auditability_rating_given": {
            "type": "integer",
            "title": "Auditability Rating Given"
          },
          "auditability_note": {
            "type": "string",
            "title": "Auditability Note"
          },
          "assessor_level": {
            "type": "integer",
            "title": "Assessor Level"
          },
          "ranking": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ranking"
          },
          "row_id": {
            "type": "integer",
            "title": "Row Id"
          },
          "flags": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ProposalReviewFlag"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Flags"
          },
          "moderation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModerationPublic"
              },
              {
                "type": "null"
              }
            ]
          },
          "proposal": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ProposalPublic"
              },
              {
                "type": "null"
              }
            ]
          },
          "moderated": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Moderated"
          },
          "allocated": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allocated"
          },
          "next_allocation": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Allocation"
          }
        },
        "type": "object",
        "required": [
          "assessor",
          "impact_alignment_rating_given",
          "impact_alignment_note",
          "feasibility_rating_given",
          "feasibility_note",
          "auditability_rating_given",
          "auditability_note",
          "assessor_level",
          "row_id"
        ],
        "title": "ProposalReviewPublic",
        "description": "Attributes that will be returned at any public request."
      },
      "ProposalReviewUpdate": {
        "properties": {
          "impact_alignment_rating_given": {
            "type": "integer",
            "maximum": 5,
            "minimum": 1,
            "title": "Impact Alignment Rating Given"
          },
          "impact_alignment_note": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 200,
            "title": "Impact Alignment Note"
          },
          "feasibility_rating_given": {
            "type": "integer",
            "maximum": 5,
            "minimum": 1,
            "title": "Feasibility Rating Given"
          },
          "feasibility_note": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 200,
            "title": "Feasibility Note"
          },
          "auditability_rating_given": {
            "type": "integer",
            "maximum": 5,
            "minimum": 1,
            "title": "Auditability Rating Given"
          },
          "auditability_note": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 200,
            "title": "Auditability Note"
          }
        },
        "type": "object",
        "required": [
          "impact_alignment_rating_given",
          "impact_alignment_note",
          "feasibility_rating_given",
          "feasibility_note",
          "auditability_rating_given",
          "auditability_note"
        ],
        "title": "ProposalReviewUpdate",
        "description": "Attributes required to update a ProposalReview.\n\nUsed at PUT request."
      },
      "ReviewHistoricStats": {
        "properties": {
          "active_funds": {
            "type": "integer",
            "title": "Active Funds",
            "default": 0
          },
          "submitted": {
            "type": "integer",
            "title": "Submitted",
            "default": 0
          },
          "blank": {
            "type": "integer",
            "title": "Blank",
            "default": 0
          },
          "valid": {
            "type": "integer",
            "title": "Valid",
            "default": 0
          }
        },
        "type": "object",
        "title": "ReviewHistoricStats",
        "description": "Submodel to describe the historic stats as a reviewer."
      },
      "ReviewerSubscriptionCreate": {
        "properties": {
          "fund_rules_acceptance": {
            "type": "boolean",
            "title": "Fund Rules Acceptance"
          },
          "preferred_categories": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Preferred Categories"
          }
        },
        "type": "object",
        "required": [
          "fund_rules_acceptance",
          "preferred_categories"
        ],
        "title": "ReviewerSubscriptionCreate",
        "description": "Attributes for the creation of a Reviewer Subscription."
      },
      "ReviewerSubscriptionExtra": {
        "properties": {
          "anonymous_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Anonymous Id"
          },
          "subscribed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Subscribed At",
            "default": "2025-03-03T13:15:38.075120"
          },
          "preferred_categories": {
            "items": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/CategoryInDB"
                }
              ]
            },
            "type": "array",
            "title": "Preferred Categories",
            "default": []
          }
        },
        "type": "object",
        "title": "ReviewerSubscriptionExtra",
        "description": "Extra attributes for a reviewer subscription."
      },
      "ReviewerSubscriptionPublic": {
        "properties": {
          "event_id": {
            "type": "integer",
            "title": "Event Id"
          },
          "user_id": {
            "type": "integer",
            "title": "User Id"
          },
          "role": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ReviewerSubscriptionRole"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "$ref": "#/components/schemas/ReviewerSubscriptionStatus",
            "default": 0
          },
          "extra": {
            "$ref": "#/components/schemas/ReviewerSubscriptionExtra",
            "default": {
              "subscribed_at": "2025-03-03T13:15:38.075120",
              "preferred_categories": []
            }
          },
          "row_id": {
            "type": "integer",
            "title": "Row Id"
          },
          "event": {
            "$ref": "#/components/schemas/EventPublic"
          }
        },
        "type": "object",
        "required": [
          "event_id",
          "user_id",
          "row_id",
          "event"
        ],
        "title": "ReviewerSubscriptionPublic",
        "description": "Publicly exposed attributes."
      },
      "ReviewerSubscriptionRole": {
        "type": "integer",
        "enum": [0, 1, 2],
        "title": "ReviewerSubscriptionRole",
        "description": "List of possible roles for Reviewers."
      },
      "ReviewerSubscriptionStatus": {
        "type": "integer",
        "enum": [0, 1, 2],
        "title": "ReviewerSubscriptionStatus",
        "description": "List of possible status for ReviewerSubscription."
      },
      "ReviewsAllocationCreate": {
        "properties": {
          "event_id": {
            "type": "integer",
            "title": "Event Id"
          },
          "allocation_seed": {
            "type": "integer",
            "title": "Allocation Seed",
            "default": 42
          },
          "nr_of_proposals_lv0": {
            "type": "integer",
            "title": "Nr Of Proposals Lv0",
            "default": 30
          },
          "nr_of_proposals_lv1": {
            "type": "integer",
            "title": "Nr Of Proposals Lv1",
            "default": 80
          },
          "categories": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Categories",
            "default": []
          },
          "dry_run": {
            "type": "boolean",
            "title": "Dry Run",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "event_id"
        ],
        "title": "ReviewsAllocationCreate",
        "description": "Model for the creation of reviewers allocation."
      },
      "ReviewsAllocationStats": {
        "properties": {
          "tot": {
            "type": "integer",
            "title": "Tot",
            "default": 0
          },
          "nr_of_reviewers": {
            "$ref": "#/components/schemas/AllocationStatsReviewers",
            "default": {
              "tot": 0,
              "lv0": 0,
              "lv1": 0
            }
          },
          "per_reviewer": {
            "$ref": "#/components/schemas/AllocationStatsAverages",
            "default": {
              "avg": 0,
              "min": 0,
              "max": 0
            }
          },
          "per_proposal": {
            "$ref": "#/components/schemas/AllocationStatsAverages",
            "default": {
              "avg": 0,
              "min": 0,
              "max": 0
            }
          }
        },
        "type": "object",
        "title": "ReviewsAllocationStats",
        "description": "Model for stats of the allocation for reviewers."
      },
      "ReviewsConfigCreate": {
        "properties": {
          "user_registration_enabled": {
            "type": "boolean",
            "title": "User Registration Enabled",
            "default": false
          },
          "reviewer_subscription_enabled": {
            "type": "boolean",
            "title": "Reviewer Subscription Enabled",
            "default": false
          },
          "review_submission_enabled": {
            "type": "boolean",
            "title": "Review Submission Enabled",
            "default": false
          },
          "moderation_submission_enabled": {
            "type": "boolean",
            "title": "Moderation Submission Enabled",
            "default": false
          },
          "reviewer_subscription_starts_at": {
            "type": "string",
            "format": "date-time",
            "title": "Reviewer Subscription Starts At"
          },
          "reviewer_subscription_ends_at": {
            "type": "string",
            "format": "date-time",
            "title": "Reviewer Subscription Ends At"
          },
          "review_submission_starts_at": {
            "type": "string",
            "format": "date-time",
            "title": "Review Submission Starts At"
          },
          "review_submission_ends_at": {
            "type": "string",
            "format": "date-time",
            "title": "Review Submission Ends At"
          },
          "moderation_submission_starts_at": {
            "type": "string",
            "format": "date-time",
            "title": "Moderation Submission Starts At"
          },
          "moderation_submission_ends_at": {
            "type": "string",
            "format": "date-time",
            "title": "Moderation Submission Ends At"
          }
        },
        "type": "object",
        "title": "ReviewsConfigCreate",
        "description": "Attributes for the creation/update of reviews configs."
      },
      "ReviewsLevelQualifiers": {
        "properties": {
          "lv1": {
            "$ref": "#/components/schemas/LevelQualifier",
            "default": {
              "min_valid_reviews": 0,
              "max_valid_reviews": 10,
              "min_perc_valid_reviews": 0.8,
              "max_perc_valid_reviews": 1,
              "min_active_funds": 0,
              "max_active_funds": 10
            }
          },
          "lv2": {
            "$ref": "#/components/schemas/LevelQualifier",
            "default": {
              "min_valid_reviews": 0,
              "max_valid_reviews": 10,
              "min_perc_valid_reviews": 0.8,
              "max_perc_valid_reviews": 1,
              "min_active_funds": 0,
              "max_active_funds": 10
            }
          }
        },
        "type": "object",
        "title": "ReviewsLevelQualifiers",
        "description": "Submodel to store config values for the level qualifiers of the reviews."
      },
      "ReviewsLevelQualifiersCreate": {
        "properties": {
          "lv1": {
            "$ref": "#/components/schemas/LevelQualifier",
            "default": {
              "min_valid_reviews": 0,
              "max_valid_reviews": 10,
              "min_perc_valid_reviews": 0.8,
              "max_perc_valid_reviews": 1,
              "min_active_funds": 0,
              "max_active_funds": 10
            }
          },
          "lv2": {
            "$ref": "#/components/schemas/LevelQualifier",
            "default": {
              "min_valid_reviews": 0,
              "max_valid_reviews": 10,
              "min_perc_valid_reviews": 0.8,
              "max_perc_valid_reviews": 1,
              "min_active_funds": 0,
              "max_active_funds": 10
            }
          }
        },
        "type": "object",
        "title": "ReviewsLevelQualifiersCreate",
        "description": "Attributes for the creation/update of reviews level qualifiers configs."
      },
      "ReviewsLevelQualifiersPublic": {
        "properties": {
          "row_id": {
            "type": "integer",
            "title": "Row Id"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "id2": {
            "type": "string",
            "title": "Id2"
          },
          "value": {
            "$ref": "#/components/schemas/ReviewsLevelQualifiers",
            "default": {
              "lv1": {
                "max_active_funds": 10,
                "max_perc_valid_reviews": 1,
                "max_valid_reviews": 10,
                "min_active_funds": 0,
                "min_perc_valid_reviews": 0.8,
                "min_valid_reviews": 0
              },
              "lv2": {
                "max_active_funds": 10,
                "max_perc_valid_reviews": 1,
                "max_valid_reviews": 10,
                "min_active_funds": 0,
                "min_perc_valid_reviews": 0.8,
                "min_valid_reviews": 0
              }
            }
          }
        },
        "type": "object",
        "required": [
          "row_id",
          "id",
          "id2"
        ],
        "title": "ReviewsLevelQualifiersPublic",
        "description": "Attributes for ReviewsLevelQualifiers public model in responses."
      },
      "ReviewsSwitches": {
        "properties": {
          "user_registration_enabled": {
            "type": "boolean",
            "title": "User Registration Enabled",
            "default": false
          },
          "reviewer_subscription_enabled": {
            "type": "boolean",
            "title": "Reviewer Subscription Enabled",
            "default": false
          },
          "review_submission_enabled": {
            "type": "boolean",
            "title": "Review Submission Enabled",
            "default": false
          },
          "moderation_submission_enabled": {
            "type": "boolean",
            "title": "Moderation Submission Enabled",
            "default": false
          },
          "reviewer_subscription_starts_at": {
            "type": "string",
            "format": "date-time",
            "title": "Reviewer Subscription Starts At"
          },
          "reviewer_subscription_ends_at": {
            "type": "string",
            "format": "date-time",
            "title": "Reviewer Subscription Ends At"
          },
          "review_submission_starts_at": {
            "type": "string",
            "format": "date-time",
            "title": "Review Submission Starts At"
          },
          "review_submission_ends_at": {
            "type": "string",
            "format": "date-time",
            "title": "Review Submission Ends At"
          },
          "moderation_submission_starts_at": {
            "type": "string",
            "format": "date-time",
            "title": "Moderation Submission Starts At"
          },
          "moderation_submission_ends_at": {
            "type": "string",
            "format": "date-time",
            "title": "Moderation Submission Ends At"
          }
        },
        "type": "object",
        "title": "ReviewsSwitches",
        "description": "Submodel to store config values for the statuses of the Reviews."
      },
      "SumSubDigestAlg": {
        "type": "string",
        "enum": [
          "HMAC_SHA1_HEX",
          "HMAC_SHA256_HEX",
          "HMAC_SHA512_HEX"
        ],
        "title": "SumSubDigestAlg",
        "description": "Enum for signature verification algorithms."
      },
      "UserActivation": {
        "properties": {
          "confirmation_token": {
            "type": "string",
            "title": "Confirmation Token"
          }
        },
        "type": "object",
        "required": [
          "confirmation_token"
        ],
        "title": "UserActivation",
        "description": "Model to complete user activation."
      },
      "UserCreate": {
        "properties": {
          "password": {
            "type": "string",
            "maxLength": 100,
            "minLength": 7,
            "title": "Password"
          },
          "password_confirmation": {
            "type": "string",
            "maxLength": 100,
            "minLength": 7,
            "title": "Password Confirmation"
          },
          "extra": {
            "$ref": "#/components/schemas/UserCreateExtra"
          },
          "catalyst_id": {
            "type": "string",
            "title": "Catalyst Id"
          }
        },
        "type": "object",
        "required": [
          "password",
          "password_confirmation",
          "extra",
          "catalyst_id"
        ],
        "title": "UserCreate",
        "description": "Attributes required to create a new User.\n\nUsed at POST request."
      },
      "UserCreateExtra": {
        "properties": {
          "policy_acknowledgments": {
            "$ref": "#/components/schemas/PolicyAcknowledgment",
            "default": {
              "privacy_policy": false,
              "terms_and_conditions": false
            }
          },
          "due_diligence": {
            "$ref": "#/components/schemas/DueDiligence",
            "default": {
              "status": 0
            }
          },
          "historic_stats": {
            "$ref": "#/components/schemas/HistoricStats",
            "default": {
              "reviews": {
                "active_funds": 0,
                "blank": 0,
                "submitted": 0,
                "valid": 0
              },
              "moderations": {
                "active_funds": 0,
                "submitted": 0
              }
            }
          }
        },
        "type": "object",
        "title": "UserCreateExtra",
        "description": "Submodel to store the extra at user creation."
      },
      "UserExtraPublic": {
        "properties": {
          "force_reset": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Force Reset",
            "default": false
          },
          "role": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserRole"
              },
              {
                "type": "null"
              }
            ],
            "default": 0
          },
          "due_diligence": {
            "$ref": "#/components/schemas/DueDiligencePublic",
            "default": {
              "status": 0
            }
          },
          "policy_acknowledgments": {
            "$ref": "#/components/schemas/PolicyAcknowledgment",
            "default": {
              "privacy_policy": false,
              "terms_and_conditions": false
            }
          },
          "historic_stats": {
            "$ref": "#/components/schemas/HistoricStats",
            "default": {
              "reviews": {
                "active_funds": 0,
                "blank": 0,
                "submitted": 0,
                "valid": 0
              },
              "moderations": {
                "active_funds": 0,
                "submitted": 0
              }
            }
          },
          "subscriptions": {
            "items": {
              "$ref": "#/components/schemas/ReviewerSubscriptionPublic"
            },
            "type": "array",
            "title": "Subscriptions",
            "default": []
          },
          "registered_at": {
            "type": "string",
            "format": "date-time",
            "title": "Registered At",
            "default": "2025-03-03T13:15:38.091013"
          }
        },
        "type": "object",
        "title": "UserExtraPublic",
        "description": "Submodel to store user extra."
      },
      "UserInfo": {
        "properties": {
          "extra": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserExtraPublic"
              },
              {
                "type": "null"
              }
            ]
          },
          "catalyst_id": {
            "$ref": "#/components/schemas/CatalystIDPublic"
          }
        },
        "type": "object",
        "required": [
          "catalyst_id"
        ],
        "title": "UserInfo",
        "description": "Attributes for generic user info."
      },
      "UserPublic": {
        "properties": {
          "extra": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserExtraPublic"
              },
              {
                "type": "null"
              }
            ]
          },
          "row_id": {
            "type": "integer",
            "title": "Row Id"
          },
          "access_token": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AccessToken"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "row_id"
        ],
        "title": "UserPublic",
        "description": "Attributes that will be returned at any public request."
      },
      "UserRequestResetPassword": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "UserRequestResetPassword",
        "description": "Attributes required to create a new password request User.\n\nUsed at POST request."
      },
      "UserResetPassword": {
        "properties": {
          "password": {
            "type": "string",
            "maxLength": 100,
            "minLength": 7,
            "title": "Password"
          },
          "password_confirmation": {
            "type": "string",
            "maxLength": 100,
            "minLength": 7,
            "title": "Password Confirmation"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "confirmation_token": {
            "type": "string",
            "title": "Confirmation Token"
          }
        },
        "type": "object",
        "required": [
          "password",
          "password_confirmation",
          "email",
          "confirmation_token"
        ],
        "title": "UserResetPassword",
        "description": "Fields accepted to allow users to change their info."
      },
      "UserRole": {
        "type": "integer",
        "enum": [0, 100],
        "title": "UserRole",
        "description": "Enum to describe possible user roles."
      },
      "UserUpdate": {
        "properties": {
          "password": {
            "type": "string",
            "maxLength": 100,
            "minLength": 7,
            "title": "Password"
          },
          "password_confirmation": {
            "type": "string",
            "maxLength": 100,
            "minLength": 7,
            "title": "Password Confirmation"
          },
          "old_password": {
            "type": "string",
            "maxLength": 100,
            "minLength": 7,
            "title": "Old Password"
          }
        },
        "type": "object",
        "required": [
          "password",
          "password_confirmation",
          "old_password"
        ],
        "title": "UserUpdate",
        "description": "Fields accepted to allow users to change their info."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {

            },
            "tokenUrl": "/api/users/token/login"
          }
        }
      },
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}