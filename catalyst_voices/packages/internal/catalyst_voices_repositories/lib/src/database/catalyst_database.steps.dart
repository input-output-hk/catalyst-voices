// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'dart:typed_data' as i2;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema4 extends i0.VersionedSchema {
  Schema4({required super.database}) : super(version: 4);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    documents,
    documentsMetadata,
    documentsFavorites,
    drafts,
    documentsV2,
    documentsLocalMetadata,
    localDocumentsDrafts,
    idxDocType,
    idxUniqueVer,
    idxDocMetadataKeyValue,
    idxFavType,
    idxFavUniqueId,
    idxDraftType,
    idxDocumentsV2TypeId,
    idxDocumentsV2TypeIdVer,
    idxDocumentsV2TypeRefId,
    idxDocumentsV2TypeRefIdVer,
    idxDocumentsV2RefIdVer,
    idxDocumentsV2TypeCreatedAt,
  ];
  late final Shape0 documents = Shape0(
    source: i0.VersionedTable(
      entityName: 'documents',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id_hi, id_lo, ver_hi, ver_lo)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 documentsMetadata = Shape1(
    source: i0.VersionedTable(
      entityName: 'documents_metadata',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(ver_hi, ver_lo, field_key)'],
      columns: [_column_2, _column_3, _column_8, _column_9],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape2 documentsFavorites = Shape2(
    source: i0.VersionedTable(
      entityName: 'documents_favorites',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id_hi, id_lo)'],
      columns: [_column_0, _column_1, _column_10, _column_6],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape3 drafts = Shape3(
    source: i0.VersionedTable(
      entityName: 'drafts',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id_hi, id_lo, ver_hi, ver_lo)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_11,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape4 documentsV2 = Shape4(
    source: i0.VersionedTable(
      entityName: 'documents_v2',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id, ver)'],
      columns: [
        _column_4,
        _column_12,
        _column_13,
        _column_14,
        _column_15,
        _column_16,
        _column_17,
        _column_18,
        _column_19,
        _column_20,
        _column_21,
        _column_22,
        _column_6,
        _column_23,
        _column_7,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape5 documentsLocalMetadata = Shape5(
    source: i0.VersionedTable(
      entityName: 'documents_local_metadata',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id)'],
      columns: [_column_15, _column_10],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape4 localDocumentsDrafts = Shape4(
    source: i0.VersionedTable(
      entityName: 'local_documents_drafts',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id, ver)'],
      columns: [
        _column_4,
        _column_12,
        _column_13,
        _column_14,
        _column_15,
        _column_16,
        _column_17,
        _column_18,
        _column_19,
        _column_20,
        _column_21,
        _column_22,
        _column_6,
        _column_23,
        _column_7,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Index idxDocType = i1.Index(
    'idx_doc_type',
    'CREATE INDEX idx_doc_type ON documents (type)',
  );
  final i1.Index idxUniqueVer = i1.Index(
    'idx_unique_ver',
    'CREATE UNIQUE INDEX idx_unique_ver ON documents (ver_hi, ver_lo)',
  );
  final i1.Index idxDocMetadataKeyValue = i1.Index(
    'idx_doc_metadata_key_value',
    'CREATE INDEX idx_doc_metadata_key_value ON documents_metadata (field_key, field_value)',
  );
  final i1.Index idxFavType = i1.Index(
    'idx_fav_type',
    'CREATE INDEX idx_fav_type ON documents_favorites (type)',
  );
  final i1.Index idxFavUniqueId = i1.Index(
    'idx_fav_unique_id',
    'CREATE UNIQUE INDEX idx_fav_unique_id ON documents_favorites (id_hi, id_lo)',
  );
  final i1.Index idxDraftType = i1.Index(
    'idx_draft_type',
    'CREATE INDEX idx_draft_type ON drafts (type)',
  );
  final i1.Index idxDocumentsV2TypeId = i1.Index(
    'idx_documents_v2_type_id',
    'CREATE INDEX idx_documents_v2_type_id ON documents_v2 (type, id)',
  );
  final i1.Index idxDocumentsV2TypeIdVer = i1.Index(
    'idx_documents_v2_type_id_ver',
    'CREATE INDEX idx_documents_v2_type_id_ver ON documents_v2 (type, id, ver)',
  );
  final i1.Index idxDocumentsV2TypeRefId = i1.Index(
    'idx_documents_v2_type_ref_id',
    'CREATE INDEX idx_documents_v2_type_ref_id ON documents_v2 (type, ref_id)',
  );
  final i1.Index idxDocumentsV2TypeRefIdVer = i1.Index(
    'idx_documents_v2_type_ref_id_ver',
    'CREATE INDEX idx_documents_v2_type_ref_id_ver ON documents_v2 (type, ref_id, ver)',
  );
  final i1.Index idxDocumentsV2RefIdVer = i1.Index(
    'idx_documents_v2_ref_id_ver',
    'CREATE INDEX idx_documents_v2_ref_id_ver ON documents_v2 (ref_id, ver)',
  );
  final i1.Index idxDocumentsV2TypeCreatedAt = i1.Index(
    'idx_documents_v2_type_created_at',
    'CREATE INDEX idx_documents_v2_type_created_at ON documents_v2 (type, created_at)',
  );
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<BigInt> get idHi =>
      columnsByName['id_hi']! as i1.GeneratedColumn<BigInt>;
  i1.GeneratedColumn<BigInt> get idLo =>
      columnsByName['id_lo']! as i1.GeneratedColumn<BigInt>;
  i1.GeneratedColumn<BigInt> get verHi =>
      columnsByName['ver_hi']! as i1.GeneratedColumn<BigInt>;
  i1.GeneratedColumn<BigInt> get verLo =>
      columnsByName['ver_lo']! as i1.GeneratedColumn<BigInt>;
  i1.GeneratedColumn<i2.Uint8List> get content =>
      columnsByName['content']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<i2.Uint8List> get metadata =>
      columnsByName['metadata']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<String> get type =>
      columnsByName['type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<BigInt> _column_0(String aliasedName) =>
    i1.GeneratedColumn<BigInt>(
      'id_hi',
      aliasedName,
      false,
      type: i1.DriftSqlType.bigInt,
    );
i1.GeneratedColumn<BigInt> _column_1(String aliasedName) =>
    i1.GeneratedColumn<BigInt>(
      'id_lo',
      aliasedName,
      false,
      type: i1.DriftSqlType.bigInt,
    );
i1.GeneratedColumn<BigInt> _column_2(String aliasedName) =>
    i1.GeneratedColumn<BigInt>(
      'ver_hi',
      aliasedName,
      false,
      type: i1.DriftSqlType.bigInt,
    );
i1.GeneratedColumn<BigInt> _column_3(String aliasedName) =>
    i1.GeneratedColumn<BigInt>(
      'ver_lo',
      aliasedName,
      false,
      type: i1.DriftSqlType.bigInt,
    );
i1.GeneratedColumn<i2.Uint8List> _column_4(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>(
      'content',
      aliasedName,
      false,
      type: i1.DriftSqlType.blob,
    );
i1.GeneratedColumn<i2.Uint8List> _column_5(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>(
      'metadata',
      aliasedName,
      false,
      type: i1.DriftSqlType.blob,
    );
i1.GeneratedColumn<String> _column_6(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'type',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<DateTime> _column_7(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'created_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
    );

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<BigInt> get verHi =>
      columnsByName['ver_hi']! as i1.GeneratedColumn<BigInt>;
  i1.GeneratedColumn<BigInt> get verLo =>
      columnsByName['ver_lo']! as i1.GeneratedColumn<BigInt>;
  i1.GeneratedColumn<String> get fieldKey =>
      columnsByName['field_key']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get fieldValue =>
      columnsByName['field_value']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_8(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'field_key',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_9(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'field_value',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<BigInt> get idHi =>
      columnsByName['id_hi']! as i1.GeneratedColumn<BigInt>;
  i1.GeneratedColumn<BigInt> get idLo =>
      columnsByName['id_lo']! as i1.GeneratedColumn<BigInt>;
  i1.GeneratedColumn<bool> get isFavorite =>
      columnsByName['is_favorite']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get type =>
      columnsByName['type']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<bool> _column_10(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_favorite',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_favorite" IN (0, 1))',
      ),
    );

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<BigInt> get idHi =>
      columnsByName['id_hi']! as i1.GeneratedColumn<BigInt>;
  i1.GeneratedColumn<BigInt> get idLo =>
      columnsByName['id_lo']! as i1.GeneratedColumn<BigInt>;
  i1.GeneratedColumn<BigInt> get verHi =>
      columnsByName['ver_hi']! as i1.GeneratedColumn<BigInt>;
  i1.GeneratedColumn<BigInt> get verLo =>
      columnsByName['ver_lo']! as i1.GeneratedColumn<BigInt>;
  i1.GeneratedColumn<i2.Uint8List> get content =>
      columnsByName['content']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<i2.Uint8List> get metadata =>
      columnsByName['metadata']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<String> get type =>
      columnsByName['type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get title =>
      columnsByName['title']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_11(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'title',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<i2.Uint8List> get content =>
      columnsByName['content']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<String> get authors =>
      columnsByName['authors']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get categoryId =>
      columnsByName['category_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get categoryVer =>
      columnsByName['category_ver']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get refId =>
      columnsByName['ref_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get refVer =>
      columnsByName['ref_ver']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get replyId =>
      columnsByName['reply_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get replyVer =>
      columnsByName['reply_ver']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get section =>
      columnsByName['section']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get templateId =>
      columnsByName['template_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get templateVer =>
      columnsByName['template_ver']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get type =>
      columnsByName['type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get ver =>
      columnsByName['ver']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_12(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'authors',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_13(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'category_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_14(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'category_ver',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_15(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_16(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'ref_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_17(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'ref_ver',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_18(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'reply_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_19(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'reply_ver',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_20(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'section',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_21(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'template_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_22(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'template_ver',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_23(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'ver',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isFavorite =>
      columnsByName['is_favorite']! as i1.GeneratedColumn<bool>;
}

i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 3:
        final schema = Schema4(database: database);
        final migrator = i1.Migrator(database, schema);
        await from3To4(migrator, schema);
        return 4;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
}) => i0.VersionedSchema.stepByStepHelper(
  step: migrationSteps(from3To4: from3To4),
);
