searchState.loadedDescShard("cat_gateway", 0, "Catalyst Data Gateway\nBinary build info\nLogic for orchestrating followers\nCLI interpreter for the service\nDatabase Interfaces\n<code>minijinja</code> static global variables\nSetup for logging for the service.\nThis module contains submodules related to metrics report …\nMain entrypoint to the service\nCommand line and environment variable settings for the …\nGeneral Purpose utility functions\nFormatted Binary build info\nLog Build Info to our logs.\nThe range we generate random backoffs within given a base …\nHow long we wait between checks for connection to the …\nData we return from a sync task.\nThe synchronisation task, and its state. There should ONLY …\nGet where this sync run actually needs to start from.\nDo the backoff delay processing.\nThe number of retries so far on this sync task.\nChain follower configuration.\nWhat blockchain are we syncing.\nHow many immutable chain follower sync tasks we are …\nConvert Params into the result of the sync.\nThe ending point of this sync.\nEvent types for Chain Indexer.\nEvent sender during the process of sync tasks.\nThe first block we successfully synced.\nIs the starting point immutable? (True = immutable, false …\nChain follower roll forward.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if the requested range has already been indexed. If …\nThe immutable tip slot.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of blocks we successfully synced, in the last …\nThe last block we successfully synced.\nIs the ending point immutable? (True = immutable, false = …\nThe live tip slot.\nCreate a new <code>SyncTask</code>.\nCreate a new <code>SyncParams</code>.\nIf the sync completed without error or not.\nThe number of retries so far on this sync task.\nConvert a result back into parameters for a retry.\nPrimary Chain Follower task.\nThe starting point of this sync.\nStart followers as per defined in the config\nStart immutable followers, if we can\nStart for the next block we would sync.\nStart syncing a particular network\nCurrent Sync Status.\nSync a portion of the blockchain. Set end to <code>Point::TIP</code> to …\nThe current running sync tasks.\nThe number of blocks we successfully synced overall.\nUpdate block related state.\nBlock stream parsing and filtering utils\nEvent triggered when backward data is purged.\nRepresents various events that can occur in the chain …\nA trait that allows adding and dispatching events to …\nEvent triggered when forward data is purged.\nEvent triggered when the immutable tip slot changes.\nEvent triggered when the indexed slot progresses.\nEvent triggered when the live tip slot changes.\nEvent triggered when the synchronization process completes.\nEvent triggered when the synchronization process starts.\nEvent triggered when the number of current synchronization …\nAdds an event listener to the target.\nDispatches an event to all registered listeners.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe current number of synchronization tasks.\nNumber of purged slots.\nThe new live tip slot.\nThe new immutable tip slot.\nThe latest indexed slot.\nAssets\nParsed Assets\nStake credential hash from the certificate\nCorrect stake credential key in hex\nWitness pub key hashed with blake2b\nWitness pub key in hex\nAmount in lovelace\nAll policy assets\nExtract stake credentials from certificates. Stake …\nMatch hashed witness pub keys with hashed stake …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAsset name\nParse child assets\nExtract assets\nPolicy identifier\nPolicy id\nEras before staking should be ignored\nSimple service CLI options\nBuild API docs of the service in the JSON format\nRun the service\nExecute the specified operation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe output path to the generated docs file, if omitted …\nCatalyst Election Database crate\nBlockchain Index Database\nWrappers over commonly used types that can be stored to …\nDatabase version this crate matches. Must equal the last …\nIs Deep Query Analysis enabled or not?\nFailed to get a DB Pool\nPostgres Connection Manager DB Pool Instance\n<code>EventDB</code> Errors\nThe Catalyst Event SQL Database\nPostgres Connection Manager DB Pool\nReusable common database objects\nConfiguration query\nChecks that connection to <code>EventDB</code> is available.\nDatabase Errors\nEstablish a connection to the database, and check the …\nPrepend <code>EXPLAIN ANALYZE</code> to the query.\nPrepend <code>EXPLAIN ANALYZE</code> to the query, and commit the …\nPrepend <code>EXPLAIN ANALYZE</code> to the query, and rollback the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermine if deep query inspection is enabled.\nModify the database.\nModify the deep query inspection setting.\nQuery the database.\nQuery the database for a single row.\nQuery the database and return a async stream of rows.\nCheck if the schema is up-to-date.\nCheck the schema version. return the current schema …\nSigned docs queries\n<code>EqOrRangedUuid</code> query conditional stmt object.\n<code>QueryLimits</code> query argument object.\nSearch by the exact UUID\nSearch either by a singe UUID, or a Range of UUIDs\nSearch in this UUID’s range\nReturn a sql conditional statement by the provided …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaximum UUID to find (inclusive)\nMinimum UUID to find (inclusive)\nCreate a <code>QueryLimits</code> object without the any limits.\nReturn all entries without any <code>LIMIT</code> and <code>OFFSET</code> parameters\nSpecifies <code>LIMIT</code> parameter\nSpecifies <code>LIMIT</code> and <code>OFFSET</code> parameters\nCreate a <code>QueryLimits</code> object with the limit equals to <code>1</code>.\nA query limits struct.\n<code>QueryLimits</code> inner enum representation.\nCalculate the offset value from page and limit. offset = …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>QueryLimits</code> object from the service <code>Limit</code> and <code>Page</code>…\nConfiguration struct\nSQL get configuration.\nSQL update if exist or else insert configuration.\nReturns the argument unchanged.\nRetrieve configuration based on the given <code>ConfigKey</code>.\nCalls <code>U::from(self)</code>.\nConfiguration Key\nSet the configuration for the given <code>ConfigKey</code>.\nConfiguration key\nFrontend general configuration.\nFrontend configuration for a specific IP address.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert a <code>ConfigKey</code> to its corresponding IDs.\nDB not found error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSchema in database does not match schema supported by the …\n<code>select_max_version.sql</code>\nThe expected DB schema version.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe current DB schema version.\nDocument Reference filtering object.\n<code>FullSignedDoc</code> struct implementation.\n<code>DocsQueryFilter</code> struct implementation.\n<code>SignedDocBody</code> struct implementation.\nDocument Reference filtering struct.\nReturn a sql conditional statement by the provided …\nReturns the argument unchanged.\nDocument id filtering\nCalls <code>U::from(self)</code>.\nDocument ver filtering\nFull signed doc event db struct\nInsert sql query\nSelect sql query jinja template\n<code>FullSignedDoc::store</code> method error.\nReturns the <code>SignedDocBody</code>.\nSigned doc body\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a  <code>FullSignedDoc</code> from postgresql row object.\nReturns the document id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the document metadata.\nCreates a  <code>FullSignedDoc</code> instance.\n<code>signed_doc</code> table <code>payload</code> field\nReturns all signed document fields for the event db queries\nReturns the document raw bytes.\n<code>signed_doc</code> table <code>raw</code> field\nLoads a <code>FullSignedDoc</code> from the event db.\nUploads a <code>FullSignedDoc</code> to the event db. Returns <code>true</code> if …\nReturns the document version.\nA <code>select_signed_docs</code> query filtering argument. If all …\nCreates an empty filter stmt, so the query will retrieve …\n<code>metadata-&gt;&#39;brand_id&#39;</code> field\n<code>metadata-&gt;&#39;campaign_id&#39;</code> field\n<code>metadata-&gt;&#39;category_id&#39;</code> field\n<code>metadata-&gt;&#39;ref&#39;</code> field\n<code>type</code> field\nReturns the argument unchanged.\n<code>id</code> field\nCalls <code>U::from(self)</code>.\n<code>metadata-&gt;&#39;reply&#39;</code> field\n<code>metadata-&gt;&#39;template&#39;</code> field\n<code>ver</code> field\nSet the <code>metadata-&gt;&#39;brand_id&#39;</code> field filter condition\nSet the <code>metadata-&gt;&#39;campaign_id&#39;</code> field filter condition\nSet the <code>metadata-&gt;&#39;category_id&#39;</code> field filter condition\nSet the <code>id</code> field filter condition\nSet the <code>metadata-&gt;&#39;ref&#39;</code> field filter condition\nSet the <code>metadata-&gt;&#39;reply&#39;</code> field filter condition\nSet the <code>metadata-&gt;&#39;template&#39;</code> field filter condition\nSet the <code>type</code> field filter condition\nSet the <code>ver</code> field filter condition\nFiltered count sql query jinja template\nFiltered select sql query jinja template\nSigned doc body event db struct\nReturns the document authors.\n<code>signed_doc</code> table <code>authors</code> field\nReturns the document type.\n<code>signed_doc</code> table <code>type</code> field\nReturns the argument unchanged.\nCreates a  <code>SignedDocBody</code> from postgresql row object.\nReturns the document id.\n<code>signed_doc</code> table <code>id</code> field\nCalls <code>U::from(self)</code>.\nReturns the document metadata.\n<code>signed_doc</code> table <code>metadata</code> field\nCreates a  <code>SignedDocBody</code> instance.\nReturns all signed document fields for the event db queries\nLoads a async stream of <code>SignedDocBody</code> from the event db.\nLoads a count of <code>SignedDocBody</code> from the event db.\nReturns the document version.\n<code>signed_doc</code> table <code>ver</code> field\nIndex a block Primary Data Indexing - Upsert operations\nPre-prepare queries for a given session.\nIndex Schema\nSession creation and storage\nIndex certs found in a transaction.\nIndex CIP-36 Registrations.\nAdd all data needed from the block into the indexes.\nIndex Role-Based Access Control (RBAC) Registration.\nImmutable Roll Forward logic.\nInsert TXI Index Data Queries.\nInsert TXO Indexed Data Queries.\nInsert Cert Queries\nInsert stake registration\nInsert stake registration query\nIs the stake address contains CIP36 registration?\nIs the Cardano Certificate Deregistered\nExecute the Certificate Indexing Queries.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex the certificates in a transaction.\nIndex an Alonzo Era certificate into the database.\nIndex a certificate from a conway transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new data set for Cert Insert Query Batch.\nCreate a new Insert Query.\nPool Delegation Address\nPrepare Batch of Insert TXI Index Data Queries\nPrepare Batch of Insert stake registration.\nIs the Cardano Certificate Registered\nIs the stake address a script or not.\nSlot Number the cert is in.\nGet the stake address for a hash, return an empty address …\nStake address (29 bytes).\nFull Stake Public Key (32 byte Ed25519 Public key, not …\nStake Registration Data captured during indexing.\nTransaction Index.\nInsert CIP-36 Registration Queries\nExecute the CIP-36 Registration Indexing Queries.\nStake Registration Data captured during indexing.\nReturns the argument unchanged.\nIndex the CIP-36 registrations in a transaction.\nInsert CIP36 Registration Query\nInsert CIP36 Registration Query\nInsert CIP36 Registration Query (Invalid Records)\nCalls <code>U::from(self)</code>.\nStake Registration Data captured during indexing.\nCreate new data set for CIP-36 Registrations Insert Query …\nPrepare Batch of Insert Cip36 Registration Data Queries\nStake Registration Data captured during indexing.\nStake Registration Data captured during indexing.\nIndex Registration by Stake Address\nInsert CIP-36 Registration Query Parameters\nIs the Registration CIP36 format, or CIP15\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIs the stake address a script or not.\nCreate a new Insert Query.\nNonce value after normalization.\nFull Payment Address (not hashed, 32 byte ED25519 Public …\nPrepare Batch of Insert CIP-36 Registration Index Data …\nRaw nonce value.\nSlot Number the cert is in.\nFull Stake Address (not hashed, 32 byte ED25519 Public …\nTransaction Index.\nVoting Public Key\nIndex Registration by Vote Key\nInsert CIP-36 Registration Invalid Query Parameters\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Insert Query.\nPrepare Batch of Insert CIP-36 Registration Index Data …\nSlot Number the cert is in.\nFull Stake Address (not hashed, 32 byte ED25519 Public …\nTransaction Index.\nIs the registration Valid or not.\nVoting Public Key\nIndex Registration by Stake Address (Invalid Registrations)\nInsert CIP-36 Registration Invalid Query Parameters\nStrict Catalyst validated.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIs the stake address a script or not.\nCreate a new Insert Query.\nNonce value after normalization.\nFull Payment Address (not hashed, 32 byte ED25519 Public …\nPrepare Batch of Insert CIP-36 Registration Index Data …\nList of serialization errors.\nRaw nonce value.\nSignature validates.\nSlot Number the cert is in.\nFull Stake Address (not hashed, 32 byte ED25519 Public …\nTransaction Index.\nVoting Public Key\nIndex RBAC 509 Registration Query Parameters\nReturns a Catalyst ID of the given registration.\nA Catalyst ID for stake address data captured during …\nA Catalyst ID for transaction ID Data captured during …\nConverts a list of <code>Cip0134Uri</code> to a list of stake addresses.\nExecute the RBAC 509 Registration Indexing Queries.\nReturns the argument unchanged.\nIndex the RBAC 509 registrations in a transaction.\nIndex RBAC Catalyst ID for Stake Address Insert Query.\nIndex RBAC Catalyst ID For Transaction ID Insert Query.\nInsert RBAC 509 Registration Query.\nInsert invalid RBAC 509 Registration Query.\nCalls <code>U::from(self)</code>.\nAn invalid RBAC registration data.\nCreates new data set for RBAC 509 Registrations Insert …\nPrepare Batch of Insert RBAC 509 Registration Data Queries\nQueries a Catalyst ID from the database by the given …\nRBAC Registration Data captured during indexing.\nReturns stake addresses of the role 0.\nInsert Catalyst ID For Stake Address Query Parameters\nIndex RBAC Catalyst ID by Stake Address.\nA Catalyst short identifier.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new record for this transaction.\nPrepare Batch of RBAC Registration Index Data Queries\nA block slot number.\nA stake address.\nInsert Catalyst ID For Transaction ID Query Parameters\nIndex RBAC Catalyst ID by TX ID.\nA Catalyst short identifier.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new record for this transaction.\nPrepares a Batch of RBAC Registration Index Data Queries.\nA transaction hash.\nInsert RBAC Registration Query Parameters\nRBAC Registration Indexing query\nA Catalyst short identifier.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new record for this transaction.\nPrepare Batch of RBAC Registration Index Data Queries\nHash of Previous Transaction. Is <code>None</code> for the first …\nPurpose.<code>UUIDv4</code>. 16 bytes.\nA block slot number.\nA transaction hash\nA transaction offset inside the block.\nInsert an invalid RBAC registration query parameters.\nA RBAC registration indexing query.\nA Catalyst short identifier.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new record for this transaction.\nPrepare Batch of RBAC Registration Index Data Queries\nJSON encoded <code>ProblemReport</code>.\nA Hash of the previous transaction.\nA registration purpose.\nA block slot number.\nA transaction hash of this registration.\nA transaction offset inside the block.\nPurge all data before the provided slot number (including)\nPurge condition option\nPurge all data after the provided slot number (including)\nA filtering condition of the <code>PurgeOption</code> and provided <code>slot</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPurges the data from <code>catalyst_id_for_stake_addr</code>.\nPurges the data from <code>catalyst_id_for_txn_id</code>.\nPurge data from <code>cip36_registration</code>.\nPurge data from <code>cip36_registration_for_vote_key</code>.\nPurge data from <code>cip36_registration_invalid</code>.\nPurges the data from <code>rbac509_invalid_registration</code>.\nPurge cardano Live Index data from the volatile db session\nPurge data from <code>rbac509_registration</code>.\nPurge data from <code>stake_registration</code>.\nPurge data from <code>txi_by_hash</code>.\nPurge data from <code>txo_ada</code>.\nPurge data from <code>txo_assets</code>.\nPurge data from <code>unstaked_txo_ada</code>.\nPurge data from <code>unstaked_txo_assets</code>.\nTXI by Txn hash Index\nInsert TXI Query and Parameters\nInsert TXI Query and Parameters\nExecute the Certificate Indexing Queries.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex the transaction Inputs.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new record for this transaction.\nCreate a new record for this transaction.\nPrepare Batch of Insert TXI Index Data Queries\nBlock Slot Number when spend occurred.\nTransaction Input Data to be inserted.\nSpent Transactions Hash\nTXO Index spent.\nInsert TXO Query and Parameters\nIndex the transaction Inputs.\nExtracts a stake address from a TXO if possible. Returns …\nReturns the argument unchanged.\nIndex the transaction Inputs.\nInsert TXO Indexed Data Queries.\nInsert TXO Native Assets into the DB.\nInsert Unstaked TXOs into the DB.\nInsert Unstaked TXO Native Assets into the DB.\nCalls <code>U::from(self)</code>.\nCreate a new Insert TXO Query Batch\nPrepare Batch of Insert TXI Index Data Queries\nStaked TXO Data Parameters\nStaked TXO Asset Data Parameters\nUnstaked TXO Data Parameters\nUnstaked TXO Asset Data Parameters\nTXO by Stake Address Indexing query\nInsert TXO Query Parameters (Superset of data to support …\nActual full TXO Address\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new record for this transaction.\nPrepare Batch of Staked Insert TXO Asset Index Data Queries\nBlock Slot Number\nStake Address - Binary 29 bytes.\nTransactions hash.\nTransaction Offset inside the block.\nTransaction Output Offset inside the transaction.\nActual TXO Value in lovelace\nTXO Asset by Stake Address Indexing Query\nInsert TXO Asset Query Parameters (Superset of data to …\nName of the asset, within the Policy.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new record for this transaction.\nPolicy hash of the asset\nPrepare Batch of Staked Insert TXO Asset Index Data Queries\nBlock Slot Number\nStake Address - Binary 29 bytes.\nTransaction Offset inside the block.\nTransaction Output Offset inside the transaction.\nValue of the asset\nUnstaked TXO by Stake Address Indexing query\nInsert TXO Unstaked Query Parameters (Superset of data to …\nActual full TXO Address\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new record for this transaction.\nPrepare Batch of Staked Insert TXO Asset Index Data Queries\nBlock Slot Number\nTransactions hash.\nTransaction Offset inside the block.\nTransaction Output Offset inside the transaction.\nActual TXO Value in lovelace\nUnstaked TXO Asset by Stake Address Indexing Query\nInsert TXO Asset Query Parameters (Superset of data to …\nPolicy name of the asset\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new record for this transaction.\nPolicy hash of the asset\nPrepare Batch of Staked Insert TXO Asset Index Data Queries\nBlock Slot Number\nTransactions hash.\nTransaction Offset inside the block.\nTransaction Output Offset inside the transaction.\nValue of the asset\nGet native assets by stake address query.\nGet Catalyst ID by stake address.\nGet Catalyst ID by transaction ID.\nA Catalyst ID for stake address insert query.\nA Catalyst ID for transaction ID insert query.\nCIP 36 Registration for voting key Insert query.\nCIP 36 Registration Error Insert query.\nCIP 36 Registration Insert Query.\nContains the error value\nA set of query responses that can fail.\nA set of query responses from tasks that can fail.\nGet all invalid registrations for snapshot\nGet all registrations for snapshot\nGet invalid Registration\nContains the success value\nAll prepared queries for a session.\nAll Prepared insert Queries that we know about.\nAll prepared SELECT query statements (return data).\nAll prepared UPSERT query statements (inserts/updates a …\nRBAC 509 Registration Insert query.\nAn invalid RBAC 509 registration Insert query.\nGet invalid RBAC registrations by Catalyst ID.\nGet RBAC registrations by Catalyst ID.\nGet Registrations\nBatches of different sizes, prepared and ready for use.\nGet stake addr from stake hash\nGet stake addr from vote key\nGet stake address by Catalyst ID .\nStake Registration Insert query.\nSync Status Insert\nGet TXI by transaction hash query.\nTXI Insert query.\nTXO Insert query.\nTXO Asset Insert query.\nGet TXO by stake address query.\nTXO spent Update query.\nUnstaked TXO Insert query.\nUnstaked TXO Asset Insert query.\nGet Catalyst ID by stake address.\nGet Catalyst ID by transaction ID.\nCatalyst ID for stake address insert query.\nCatalyst ID for transaction ID insert query.\nCIP36 Registration errors.\nCIP36 Registration for Stake Address Insert query.\nCIP36 Registrations.\nExecute a Batch query with the given parameters.\nExecutes a select query with the given parameters.\nExecutes a single query with the given parameters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all invalid registrations for snapshot\nGet all registrations for snapshot\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet invalid registrations\nGet native assets by stake address query.\nCreate new prepared queries for a given session.\nPrepares a statement.\nPrepares all permutations of the batch from 1 to max. It …\nQueries for purging volatile data.\nRBAC queries.\nInvalid RBAC 509 registrations.\nRBAC 509 Registrations.\nGet invalid RBAC registrations by Catalyst ID.\nGet RBAC registrations by Catalyst ID.\nGet registrations\nRegistration related queries.\nExecute a Batch query with the given parameters.\nExecutes a select query with the given parameters.\nstake addr from stake hash\nstake addr from vote key\nGet stake address by Catalyst ID.\nTXI Insert query.\nStaked ADA related queries.\nsync status update and query.\nInsert Sync Status update.\nGet TXI by transaction hash.\nTXI Insert query.\nTXO Asset Insert query.\nGet TXO by stake address query.\nTXO Insert query.\nUpdate TXO spent query.\nUnstaked TXO Asset Insert query.\nUnstaked TXO Insert query.\nCatalyst ID For Stake Address Delete query.\nCatalyst ID For Stake Address Select query.\nCatalyst ID For Transaction ID Delete query.\nCatalyst ID For Transaction ID Select query.\nCIP 36 Registration Delete Query.\nCIP 36 Registration Select Query.\nCIP 36 Registration for vote key Delete query.\nCIP 36 Registration for vote key Select query.\nCIP 36 Registration Invalid Delete query.\nCIP 36 Registration Invalid Select query.\nNo parameters\nAll prepared DELETE query statements (purge DB table rows).\nAll prepared purge queries for a session.\nAll prepared SELECT query statements (primary keys from …\nRBAC 509 Registration Delete query.\nRBAC 509 Registration Select query.\nInvalid RBAC 509 Registration Delete query.\nInvalid RBAC 509 Registration Select query.\nStake Registration Delete query.\nStake Registration Select query.\nTXI by TXN Hash Delete query.\nTXI by TXN Hash Select query.\nTXO Delete query.\nTXO Select query.\nTXO Assets Delete query.\nTXO Asset Select query.\nUnstaked TXO Delete query.\nUnstaked TXO Select query.\nUnstaked TXO Asset Delete query.\nUnstaked TXO Asset Select query.\nCatalyst ID For Stake Address (RBAC 509 registrations) …\nCatalyst ID For TX ID (RBAC 509 registrations) Queries …\nCIP-36 registration Queries used in purging data.\nCIP-36 registration by Vote Key Queries used in purging …\nCIP-36 Registration (Invalid) Queries used in purging data.\nCatalyst ID for Stake Address Delete Query..\nCatalyst ID for TX ID Delete Query..\nCIP36 Registrations Delete Query.\nCIP36 Registration for Vote Key Delete Query.\nCIP36 Registration Invalid Delete Query.\nRBAC 509 invalid registrations Delete Query.\nRBAC 509 Registrations Delete Query.\nStake Registration Delete Query.\nTXI by TXN Hash Delete Query.\nTXO Delete Query.\nTXO Assets Delete Query.\nUnstaked TXO ADA Delete Query.\nUnstaked TXO Asset Delete Query.\nExecute a purge query with the given parameters.\nExecutes a select query with the given parameters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new prepared queries for a given session.\nPrepares a statement.\nPrepares all permutations of the batch from 1 to max. It …\nRBAC 509 Registration Queries used in purging data.\nRBAC 509 Registration Queries used in purging data.\nCatalyst ID for Stake Address Primary Key Query..\nCatalyst ID for TX ID Primary Key Query..\nCIP36 Registrations Primary Key Query.\nCIP36 Registration for Vote Key Primary Key Query.\nCIP36 Registration Invalid Primary Key Query.\nRBAC 509 invalid registrations Primary Key Query.\nRBAC 509 Registrations Primary Key Query.\nStake Registration Primary Key Query.\nTXI by TXN Hash by TXN Hash Primary Key Query.\nTXO ADA Primary Key Query.\nTXO Asset Primary Key Query.\nUnstaked TXO ADA Primary Key Query.\nUnstaked TXO Assets Primary Key Query.\nStake Registration Queries used in purging data.\nTransaction Inputs (ADA or a native asset) queries used in …\nTXO by Stake Address Queries used in purging data.\nTXO Assets by Stake Address Queries used in purging data.\nUnstaked Transaction Outputs (ADA), by their transaction …\nTXO Assets by TXN Hash Queries used in purging data.\nDelete Catalyst ID For Stake Address registration\nDelete Catalyst ID For Stake Address registration Query\nPrimary Key Value.\nGet primary key for Catalyst ID For Stake Address …\nSelect primary keys for Catalyst ID For Stake Address …\nExecutes a query to get all Catalyst ID For Stake Address …\nExecutes a DELETE Query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepares a query to get all Catalyst ID For Stake Address …\nPrepare Batch of Delete Queries\nReturn values for Catalyst ID For Stake Address …\nA stake address.\nPrimary Key Row\nDelete Catalyst ID For TX ID registration\nDelete Catalyst ID For TX ID registration Query\nPrimary Key Value.\nGet primary key for Catalyst ID For TX ID registration …\nSelect primary keys for Catalyst ID For TX ID registration.\nExecutes a query to get all Catalyst ID For TX ID …\nExecutes a DELETE Query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepares a query to get all Catalyst ID For TX ID …\nPrepare Batch of Delete Queries\nReturn values for Catalyst ID For TX ID registration purge …\nA transaction hash.\nPrimary Key Row\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA transaction hash.\nDelete CIP-36 registration\nDelete CIP-36 registration Query\nPrimary Key Value.\nGet primary key for CIP-36 registration query.\nSelect primary keys for CIP-36 registration.\nExecutes a query to get all CIP-36 registration primary …\nExecutes a DELETE Query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNonce that has been slot corrected.\nPrepares a query to get all CIP-36 registration primary …\nPrepare Batch of Delete Queries\nReturn values for CIP-36 registration purge queries.\nBlock Slot Number\nFull Stake Address (not hashed, 32 byte ED25519 Public …\nTransaction Offset inside the block.\nPrimary Key Row\nDelete CIP-36 registration\nDelete CIP-36 registration by Vote key Query\nPrimary Key Value.\nGet primary key for CIP-36 registration by Vote key query.\nSelect primary keys for CIP-36 registration by Vote key.\nExecutes a query to get all CIP-36 registration by Vote …\nExecutes a DELETE Query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepares a query to get all CIP-36 registration by Vote …\nPrepare Batch of Delete Queries\nReturn values for CIP-36 registration by Vote key purge …\nBlock Slot Number\nFull Stake Address (not hashed, 32 byte ED25519 Public …\nTransaction Offset inside the block.\nTrue if registration is valid.\nVote key - Binary 32 bytes.\nPrimary Key Row\nDelete CIP-36 invalid registration\nDelete CIP-36 invalid registration Query\nPrimary Key Value.\nGet primary key for CIP-36 invalid registration query.\nSelect primary keys for CIP-36 invalid registration.\nExecutes a query to get all CIP-36 invalid registration …\nExecutes a DELETE Query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepares a query to get all CIP-36 invalid registration …\nPrepare Batch of Delete Queries\nReturn values for CIP-36 invalid registration purge …\nBlock Slot Number\nFull Stake Address (not hashed, 32 byte ED25519 Public …\nTransaction Offset inside the block.\nPrimary Key Row\nDelete RBAC 509 invalid registration\nDelete RBAC 509 invalid registration Query\nPrimary Key Value.\nGet primary key for RBAC 509 invalid registration query.\nSelect primary keys for RBAC 509 invalid registration.\nA short Catalyst ID.\nExecutes a query to get all RBAC 509 invalid registration …\nExecutes a DELETE Query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepares a query to get all RBAC 509 invalid registration …\nPrepare Batch of Delete Queries\nReturn values for RBAC 509 invalid registration purge …\nA transaction ID.\nPrimary Key Row\nDelete RBAC 509 registration\nDelete RBAC 509 registration Query\nPrimary Key Value.\nGet primary key for RBAC 509 registration query.\nSelect primary keys for RBAC 509 registration.\nA short Catalyst ID.\nExecutes a query to get all RBAC 509 registration primary …\nExecutes a DELETE Query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepares a query to get all RBAC 509 registration primary …\nPrepare Batch of Delete Queries\nReturn values for RBAC 509 registration purge queries.\nA transaction ID.\nPrimary Key Row\nDelete Stake Registration\nDelete Stake Registration Query\nPrimary Key Value.\nGet primary key for Stake Registration query.\nSelect primary keys for Stake Registration.\nExecutes a query to get all Stake Registration primary …\nExecutes a DELETE Query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepares a query to get all Stake Registration primary …\nPrepare Batch of Delete Queries\nReturn values for Stake Registration purge queries.\nIs the address a script address.\nBlock Slot Number\nStake hash - Binary 29 bytes.\nTransaction Offset inside the block.\nPrimary Key Row\nDelete TXI by hash Query\nDelete TXI by hash Query\nPrimary Key Value.\nGet primary key for TXI by hash query.\nSelect primary keys for TXI by hash.\nExecutes a query to get all TXI by hash primary keys.\nExecutes a DELETE Query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepares a query to get all TXI by hash primary keys.\nPrepare Batch of Delete Queries\nReturn values for TXI by hash purge queries.\n32 byte hash of this transaction.\nTransaction Output Offset inside the transaction.\nPrimary Key Row\nDelete TXO by Stake Address\nDelete TXO by Stake Address Query\nPrimary Key Value.\nGet primary key for TXO by Stake Address query.\nSelect primary keys for TXO by Stake Address.\nExecutes a query to get all TXO by stake address primary …\nExecutes a DELETE Query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepares a query to get all TXO by stake address primary …\nPrepare Batch of Delete Queries\nReturn values for TXO by Stake Address purge queries.\nBlock Slot Number\nStake Address - Binary 29 bytes.\nTransaction Offset inside the block.\nTransaction Output Offset inside the transaction.\nPrimary Key Row\nDelete TXO Assets by Stake Address\nDelete TXO Assets by Stake Address Query\nPrimary Key Value.\nGet primary key for TXO Assets by Stake Address query.\nSelect primary keys for TXO Assets by Stake Address.\nName of the asset, within the Policy.\nExecutes a query to get all TXO Assets by stake address …\nExecutes a DELETE Query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAsset Policy Hash - Binary 28 bytes.\nPrepares a query to get all TXO Assets by stake address …\nPrepare Batch of Delete Queries\nReturn values for TXO Assets by Stake Address purge …\nBlock Slot Number\nStake Address - Binary 29 bytes.\nTransaction Offset inside the block.\nTransaction Output Offset inside the transaction.\nPrimary Key Row\nDelete Unstaked TXO by Stake Address\nDelete TXO by Stake Address Query\nPrimary Key Value.\nGet primary key for Unstaked TXO ADA query.\nSelect primary keys for Unstaked TXO ADA.\nExecutes a query to get all Unstaked TXO ADA primary keys.\nExecutes a DELETE Query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepares a query to get all Unstaked TXO ADA primary keys.\nPrepare Batch of Delete Queries\nReturn values for Unstaked TXO ADA purge queries.\n32 byte hash of this transaction.\nTransaction Output Offset inside the transaction.\nPrimary Key Row\nDelete TXO Assets by TXN Hash\nDelete TXO Assets by TXN Hash Query\nPrimary Key Value.\nGet primary key for TXO Assets by TXN Hash query.\nSelect primary keys for TXO Assets by TXN Hash.\nName of the asset, within the Policy.\nExecutes a query to get all TXO Assets by TXN Hash primary …\nExecutes a DELETE Query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAsset Policy Hash - Binary 28 bytes.\nPrepares a query to get all TXO Assets by TXN Hash primary …\nPrepare Batch of Delete Queries\nReturn values for TXO Assets by TXN Hash purge queries.\n32 byte hash of this transaction.\nOffset in the txo list of the transaction the txo is in.\nPrimary Key Row\nGet Catalyst ID by stake address.\nGet Catalyst ID by stake address.\nGet invalid RBAC registrations by Catalyst ID.\nGet RBAC registrations by Catalyst ID.\nGet stake address by Catalyst ID.\nGet Catalyst ID by stake address query string.\nGet Catalyst ID by stake address query.\nGet Catalyst ID by stake address query params.\nCatalyst ID for the queries stake address.\nExecutes a get Catalyst ID by stake address query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepares a get Catalyst ID by stake address query.\nA slot number.\nStake address to get the Catalyst ID for.\nCached data.\nA query string.\nGet Catalyst ID by stake address query.\nGet Catalyst ID by transaction ID query parameters.\nUpdate the cache when a rbac registration is indexed.\nA Catalyst ID.\nExecutes a get Catalyst ID by transaction ID query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the latest Catalyst ID for the given transaction ID.\nGets the latest Catalyst ID for the given transaction ID …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepares a get catalyst ID by transaction ID query.\nA transaction hash.\nGet invalid registrations by Catalyst ID query.\nGet invalid registrations by Catalyst ID query.\nGet invalid registrations by Catalyst ID query params.\nA Catalyst ID.\nExecutes a get registrations by Catalyst ID query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepares a query.\nA problem report.\nA previous  transaction id.\nA registration purpose.\nA block slot number.\nRegistration transaction id.\nA transaction index.\nGet registrations by Catalyst ID query.\nGet registrations by Catalyst ID query.\nGet registrations by Catalyst ID query params.\nBuild a registration chain from the given indexed data.\nA Catalyst ID.\nExecutes a get registrations by Catalyst ID query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a sorted list of all registrations for the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA helper function to load a RBAC registration <code>Cip509</code> by …\nPrepares a query.\nA previous  transaction id.\nA registration purpose.\nA block slot number.\nRegistration transaction id.\nA transaction index.\nGet stake address by Catalyst ID query params.\nGet Catalyst ID by stake address query.\nGet stake address from cat id\nA Catalyst ID.\nExecutes a get stake address by Catalyst ID query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>GetStakeAddressByCatIDParams</code>.\nPrepares a get Catalyst ID by stake address query.\nStake address from Catalyst ID for.\nGet all invalid registrations for snapshot\nGet all registrations for snapshot\nGet stake addr registrations\nGet stake addr from stake address\nget stake addr from vote key\nGet invalid registrations for stake addr after given slot …\nGet all invalid registrations\nGet all invalid registrations\nGet all invalid registrations details for snapshot.\nIs the Registration CIP36 format, or CIP15\nExecutes get all registrations for snapshot\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the stake address a script or not.\nFull Payment Address (not hashed, 32 byte ED25519 Public …\nPrepares get all registrations\nError report\nSlot Number\nFull Stake Address (not hashed, 32 byte ED25519 Public …\nVoting Public Key\nGet all registrations\nGet all registrations\nGet all registration details for snapshot.\nIs the Registration CIP36 format, or CIP15\nExecutes get all registrations for snapshot\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the stake address a script or not.\nNonce value after normalization.\nFull Payment Address (not hashed, 32 byte ED25519 Public …\nPrepares get all registrations\nSlot Number the cert is in.\nFull Stake Address (not hashed, 32 byte ED25519 Public …\nTransaction Index.\nVoting Public Key\nGet registrations from stake addr query.\nGet registration\nGet registration query.\nIs the Registration CIP36 format, or CIP15\nExecutes get registration info for given stake addr query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the stake address a script or not.\nNonce value after normalization.\nFull Payment Address (not hashed, 32 byte ED25519 Public …\nPrepares a get registration query.\nSlot Number the cert is in.\nStake address.\nTransaction Index.\nVoting Public Key\nGet stake addr from stake hash query string.\nGet stake addr\nGet stake addr from stake hash query.\nExecutes a get txi by transaction hashes query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>GetStakeAddrParams</code>\nPrepares a get get stake addr from stake hash query.\nStake hash.\nFull Stake Address (not hashed, 32 byte ED25519 Public …\nGet stake addr from vote key query.\nGet stake addr\nGet stake addr from vote key query.\nExecutes a get txi by transaction hashes query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>GetStakeAddrFromVoteKeyParams</code>\nPrepares a get stake addr from vote key query.\nFull Stake Address (not hashed, 32 byte ED25519 Public …\nVote key.\nGet invalid registrations from stake addr query.\nGet registration\nGet invalid registrations given stake address.\nIs the Registration CIP36 format, or CIP15\nExecutes get invalid registration info for given stake …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the stake address a script or not.\nCreate a new instance of <code>GetInvalidRegistrationParams</code>\nFull Payment Address (not hashed, 32 byte ED25519 Public …\nPrepares a get invalid registration query.\nError report\nBlock Slot Number when spend occurred.\nStake address.\nFull Stake Address (not hashed, 32 byte ED25519 Public …\nVoting Public Key\nGet assets by stake address.\nGet TXI by Transaction hash query\nGet the TXO by Stake Address\nUpdate the TXO Spent column to optimize future queries.\nGet assets by stake address query string.\nGet assets by stake address query parameters.\nGet native assets query.\nAsset name.\nExecutes a get assets by stake address query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>GetAssetsByStakeAddressParams</code>.\nAsset hash.\nPrepares a get assets by stake address query.\nMax slot num.\nTXO transaction slot number.\nStake address.\nTXO transaction index within the slot.\nTXO index.\nAsset value.\nGet TXI query string.\nGet TXI query.\nGet TXI query parameters.\nExecutes a get txi by transaction hashes query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>GetTxiByTxnHashesQueryParams</code>\nPrepares a get txi query.\nTXI slot number.\nTXI transaction hash.\nTransaction hashes.\nTXI original TXO index.\nGet txo by stake address query string.\nGet txo by stake address query.\nGet txo by stake address query parameters.\nExecutes a get txo by stake address query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>GetTxoByStakeAddressQueryParams</code>.\nPrepares a get txo by stake address query.\nMax slot num.\nTXO transaction slot number.\nTXO spent slot.\nStake address.\nTXO transaction hash.\nTXO transaction index within the slot.\nTXO index.\nTXO value.\nUpdate TXO spent query string.\nUpdate TXO spent query.\nUpdate TXO spent query params.\nExecutes a update txo spent query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepare a batch of update TXO spent queries.\nTXO slot number.\nTXO spent slot number.\nTXO stake address.\nTXO transaction index within the slot.\nTXO index.\nGet Sync Status query\nRead and write the synchronisation status.\nGet TXI query string.\nClean Sync Status Response\nEnd Slot.\nReturns the argument unchanged.\nGet the sync status.\nCalls <code>U::from(self)</code>.\nMerge consecutive sync records, to make processing them …\nNode ID\nStart Slot.\nSync Time.\nInsert Sync Status query string.\nSync Status Insert query.\nExecutes a sync status insert query.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPrepares a Sync Status Insert query.\nSync Status Row Record Module\nUpdate the sync status of the immutable database.\nSync Status Record Row (used for both Insert and Query …\nEnd Slot.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>SyncStatusQueryParams</code>\nNode ID\nStart Slot.\nSync Time.\nKeyspace Create (Templated)\nAll Schema Creation Statements\nCreate the namespace we will use for this session Ok to …\nCreate the Schema on the connected Cassandra DB\nGenerates a unique schema version identifier based on the …\nGet the namespace for a particular db configuration\nRemoves all comments from each line in the input query …\nAll interaction with cassandra goes through this struct.\nRepresents errors that can occur while interacting with a …\nConfiguration Choices for compression\nError when creating a session fails.\nDisable TLS.\nShould be used by the caller when it fails to acquire the …\nSession error while initialization.\nLZ4 link data compression.\nNo compression.\nPersistent DB Session.\nError when preparing purge queries fails.\nError when preparing queries fails.\nError when schema migration fails.\nError indicating that the session has already been set.\nSnappy link data compression.\nConfiguration Choices for TLS.\nDisables verification of the peer’s certificate.\nVolatile DB Session.\nVerifies that the peer’s certificate is trusted.\nConfiguration for this session.\nExecute a Batch query with the given parameters.\nExecutes a select query with the given parameters.\nExecute a query which returns no results, except an error …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the session needed to perform a query.\nGet underlying Raw Cassandra Session.\nInitialise the Cassandra Cluster Connections.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck to see if the Cassandra Indexing DB is ready for use\nCreate a new execution profile based on the given …\nConstruct a session based on the given configuration.\nIs the session to the persistent or volatile DB?\nExecute a purge query with the given parameters.\nExecute a select query to gather primary keys for purging.\nAll prepared purge queries we can use on this session.\nAll prepared queries we can use on this session.\nContinuously try and init the DB, if it fails, backoff.\nThe actual session.\nWait for the Cassandra Indexing DB to be ready before …\nThe underlying error that caused the session creation to …\nThe underlying error that caused the schema migration to …\nThe underlying error that caused query preparation to fail.\nThe underlying error that caused purge query preparation …\nA <code>CatalystId</code> wrapper that can be stored to and load from a …\nA <code>VerifyingKey</code> wrapper that can be stored to and load from …\nA <code>Slot</code> wrapper that can be stored to and load from a …\nA binary <code>CIP-19</code> stack address (29  bytes) that can be …\nA <code>TransactionHash</code> hash wrapper that can be stored to and …\nA <code>TxnIndex</code> wrapper that can be stored to and load from a …\nA <code>TxnOutputOffset</code> wrapper that can be stored to and load …\nA <code>UuidV4</code> wrapper that can be stored to and load from a …\nA <code>CatalystId</code> wrapper that can be stored to and load from a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn ed25519 public key (32 bytes) wrapper that can be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA <code>Slot</code> wrapper that can be stored to and load from a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA binary <code>CIP-19</code> stack address (29  bytes) that can be …\nAn invalid length error for <code>DbStakeAddress</code> deserialization.\nAn error value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>TransactionHash</code> wrapper that can be stored to and load …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA <code>TxnIndex</code> wrapper that can be stored to and load from a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA <code>TxnOutputOffset</code> wrapper that can be stored to and load …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA <code>UuidV4</code> wrapper that can be stored to and load from a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGlobal static <code>minijinja::Environment</code> with all preloaded …\nJinja template source struct.\nReturns the argument unchanged.\nReturns a template from the jinja environment, returns …\nCalls <code>U::from(self)</code>.\nJinja template name\nJinja template source\nDebug messages\nErrors\nDefault Span Guard for the Service.\nInformational Messages\nLogger Handle for the Service.\nDefault log level\nAll valid logging levels\nHandle to our Logger\nDefault Span Guard for the Service.\nWarnings\nReturns the argument unchanged.\nInitialize the tracing subscriber\nCalls <code>U::from(self)</code>.\nModify the logger level setting. This will reload the …\nSet the default fields in a log, using a global span.\nMetrics related to Chain Follower analytics.\nMetrics related to Chain Indexer analytics.\nMetrics related to endpoint analytics.\nInitialize Prometheus metrics.\nMetrics related to memory analytics.\nThis is to prevent the init function from accidentally …\nStarts a background thread to periodically update Chain …\nPerforms reporting Chain Follower’s Live information to …\nPerforms reporting Chain Follower’s Mithril information …\nAll the related Chain Follower reporting metrics to the …\nLabels for the chain follower metrics\nChain networks use as the metrics namespace.\nWhen backfill ended\nBackfill Failures\nThe time of the last backfill failure\nBackfill size to achieve synchronization. (0 before sync …\nWhen backfill started\nCurrent Number of Live Blocks\nIs there an active connection to the node\nNumber of active Followers\nThe current head of the live chain slot#\nBlocks that failed to deserialize from the blockchain.\nLast reconnect time\nLast disconnect time\nNew blocks read from blockchain.\nNumber of times we connected/re-connected to the Node.\nRollbacks synthesized for followers.\nRollbacks we did on our live-chain in memory.\nRollbacks reported by the Peer Node.\nThe Time that synchronization to this blockchain was …\nThe Time that synchronization to this blockchain started\nThe current live tip slot# as reported by the peer.\nNumber of changed files from previous snapshot.\nNumber of identical files deduplicated from previous …\nDeduplicated Size vs previous snapshot.\nTime we finished downloading the current snapshot.\nNumber of times download failed.\nSize of the download archive.\nTime we started downloading the current snapshot.\nDownload or Validation Failed.\nExtraction end time.\nNumber of times extraction failed.\nSize of last extracted snapshot.\nExtraction start time.\nFailed to activate new snapshot.\nFailed to get tip from Mithril snapshot.\nBlocks that failed to deserialize from the Mithril …\nTime the last download took.\nNumber of new files from previous snapshot.\nImmutable TIP Slot# - Origin = No downloaded snapshot.\nTip failed to advance.\nFailed to send new tip to updater.\nNumber of Mithril Snapshots that have downloaded …\nMithril Certificate Validation End Time.\nNumber of times validation failed (bad snapshot).\nMithril Certificate Validation Start Time.\nAll the related Chain Indexer reporting metrics to the …\nChain Indexer current immutable tip slot#.\nChain Indexer current live tip slot#.\nChain Indexer highest complete indexed slot#.\nLabels for the metrics.\nChain Indexer number of purged slots.\nChain Indexer indicator whether tip is reached or in …\nChain Indexer number of current running indexer tasks.\nChain Indexer number of times triggering backward data …\nChain Indexer number of times triggering forward data …\nLabels for the client metrics\nClient Request Count histogram.\nHTTP Request count histogram.\nHTTP Request CPU Time histogram.\nHTTP Request duration histogram.\nLabels for the metrics\nUse the instrumented allocator for gathering allocation …\nThis is to prevent the init function from accidentally …\nStarts a background thread to periodically update memory …\nAll the related memory reporting metrics to the Prometheus …\nThe number of allocation count in the heap.\nThe amount of accumulative allocated bytes in the heap.\nThe amount of accumulative deallocated bytes in the heap.\nThe amount of accumulative reallocated bytes in the heap.\nThe number of deallocation count in the heap.\nLabels for the memory metrics\nThe “physical” memory used by this process, in bytes.\nThe number of reallocation count in the heap.\nThe “virtual” memory used by this process, in bytes.\nCatalyst Gateway API Definition\nRetrieve the API specification in JSON format.\nDefine common and reusable api components here. these …\nStoplight Elements <code>OpenAPI</code> UI\nPoem Service for cat-gateway service endpoints.\nRun Catalyst Gateway Service.\n<code>API</code> Utility operations\nA long description of the API. Markdown is supported\nThe name of the API\nThe version of the API\nGet the terms of service for the API\nCardano API endpoints\nConfiguration Endpoints\nSigned Documents API endpoints\nGet the contact details for inquiring about the API\nGet the license details for the API\nHealth Endpoints\nCreate the <code>OpenAPI</code> definition\nSet the localhost addresses descriptions.\nAll Cardano API Endpoints\nCIP36 Registration Endpoints\nRBAC endpoints.\nCardano Staking API Endpoints.\nCardano Staking API Endpoints\nImplementation of the GET <code>/cardano/cip36</code> endpoint\nImplementation of the GET <code>/cardano/cip36</code> endpoint\nReturns the argument unchanged.\nCIP36 registrations.\nCalls <code>U::from(self)</code>.\nCip36 Registration Query Endpoint Response\nProcess the endpoint operation\nStake addresses need to be individually checked to make …\nCheck associated voting key matches registration voting key\nGet all invalid registrations\nGet all cip36 registrations.\nGet all cip36 registrations for a given stake address.\nGet invalid registrations for stake addr after given slot#\nGet registration from stake addr\nGet registration given slot#\nGet registration given a stake key hash, it can be time …\nGet registration given a vote key, time specific based on …\nFilter out any invalid registrations that occurred before …\nStake addr may have multiple registrations and multiple …\nFilter out any registrations that occurred after this Slot …\nALL Get all registrations or constrain if slot# given.\nSort latest registrations for a given stake address, sort …\nAll responses to a cip36 registration query\nCIP36 Registration Data as found on-chain.\nEndpoint responses.\nList of CIP36 Registration Data as found on-chain.\nThe Page of CIP-36 Registration List.\nList of CIP36 Registration Data for a Voting Key.\nError responses\nNo valid registration.\nAll CIP36 registrations associated with the same Voting …\nProvided responses\nIf this field is set, then the registration was in CIP15 …\nIf there are errors with this registration, they are …\nExample of a valid registration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of latest invalid registrations that were found, for …\nExample of an invalid registration\nIf the payment address is a script, then it can not be …\nCurrent Page\nCardano Cip-19 Formatted Shelley Payment Address.\nList of Registrations associated with this Voting Key\nThe Slot the Registrations are valid up until.\nBlocks Slot Number that the registration certificate is in.\nFull Stake Address (not hashed, 32 byte ED25519 Public …\nVoting Public Key\nVoting Public Key (Ed25519 Public key).\nList of registrations associated with the query.\nCardano RBAC API Endpoints\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet RBAC registrations\nImplementation of the GET <code>/rbac/registrations</code> endpoint.\nA hex encoded binary data.\nReturns a Catalyst ID for the given stake address.\nA RBAC registration chain information.\nGet RBAC registration endpoint.\nA role extended data.\nA role data key information.\nA list of <code>KeyData</code>.\nA key type for role data.\nA role payment address information.\nA list of <code>PaymentData</code>.\nA list of RBAC registration purposes.\nRBAC registration chain.\nAn <code>/rbac/registrations</code> endpoint responses.\nA role data.\nA RBAC role data map.\nBad Rbac registration endpoint arguments.\nA description.\nAn example.\nA format.\nA hex encoded binary data.\nA validation regex pattern.\nA schema.\nA title.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA RBAC registration chain along with additional …\nA RBAC registration chain.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA slot number of the latest persistent registration.\nThe latest persistent transaction ID of the chain.\nReturns a last independent chain of both persistent and …\nThe latest volatile transaction ID of the chain.\nCreates a new <code>ChainInfo</code> instance.\nA description.\nA role extended data.\nA schema.\nA title.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA role data key information.\nFinds a public key with the given offset and point and …\nFinds a C509 certificate with given offset and point and …\nFinds a X509 certificate with given offset and point and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIndicates if the data is persistent or volatile.\nA type of the key.\nA value of the key.\nCreates a new <code>KeyData</code> instance.\nA time when the data was added.\nA list of <code>KeyData</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA C509 certificate.\nA key type for role data.\nA public key.\nA X509 certificate.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA role payment address information.\nAn option payment address.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIndicates if the data is persistent or volatile.\nCreates a new <code>PaymentData</code> instance.\nA time when the address was added.\nA list of <code>PaymentData</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA list of RBAC registration purposes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA chain of valid RBAC registrations.\nA Catalyst ID.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn ID of the last persistent transaction.\nAn ID of the last volatile transaction.\nCreates a new registration chain instance.\nA list of registration purposes.\nGets and converts a role data from the given chain info.\nA map of role number to role data.\nError responses\nNo valid registration.\nOk\nAn <code>/rbac/registrations</code> endpoint responses.\nResponse for unprocessable content.\nProvided responses\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA RBAC registration role data.\nA list of role encryption keys.\nA map of the extended data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>RbacRoleData</code> instance.\nA list of role payment addresses.\nA list of role signing keys.\nA description.\nA RBAC role data map.\nA schema.\nA title.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRbac Registration Validation Error.\nError message.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>ConfigBadRequest</code>.\nCardano Staking API Endpoints\nImplementation of the GET <code>../assets</code> endpoint\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet staked assets.\nGet staked assets v2.\nAll responses.\nError responses\nNot Found\nOk\nEndpoint responses.\nTXO asset information.\nTXO Assets map type alias\nTXO Assets state\nTXO information used when calculating a user’s stake …\n<code>TxoInfo</code> map type alias\nProvided responses\nAsset amount.\nBuilding a full stake info response from the provided …\nBuilds an instance of <code>StakeInfo</code> based on the TXOs given.\nCalculate the assets state info for a given stake address.\nGET <code>/staked_ada</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetches the stake address for a given Catalyst token.\nRetrieves the CIP-19 stake address associated with a given …\nReturns a map of TXO infos for the given stake address.\nReturns a map of txo asset infos for the given stake …\nAsset hash.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if underlying <code>txos</code> and <code>txo_assets</code> are empty, …\nAsset name.\nTXO transaction slot number.\nWhether the TXO was spent.\nTXO transaction index within the slot.\nTXO index.\nTXO Assets map\nTXO Info map\nChecks if the given TXOs were spent and mark then as such. …\nTXO value.\nConfiguration API struct\nError responses\nError responses\nGet configuration all responses.\nGet configuration endpoint responses.\nNo frontend config defined.\nConfiguration result.\nConfiguration Update Successful.\nSet configuration all responses.\nSet configuration endpoint responses.\nProvided responses\nProvided responses\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the configuration for the frontend.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper function to merge two JSON values.\nSet the frontend configuration.\nHelper function to handle set.\nCardano Follower API Endpoints\nA module for placing common structs, functions, and …\nReturns the argument unchanged.\nImplementation of the GET <code>/document</code> endpoint\nGet A Signed Document.\nCalls <code>U::from(self)</code>.\nPost A Signed Document Index Query.\nDocument Index Query\nImplementation of the PUT <code>/document</code> endpoint\nPut A Signed Document.\nCatalyst signed document templates.\nA struct which implements a …\nA struct which implements a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet document from the database\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempts to construct an instance of <code>Self</code> by validating …\nAll responses.\nError responses\nNot Found\nOK\nEndpoint responses.\nProvided responses\nGET <code>/document</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll responses.\nError responses\nNot Found\nOK\nEndpoint responses.\nProvided responses\nPOST <code>/document/index</code>\nFetch documents from the event db\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCatalyst Singed Document Request Filter Query Object\nCatalyst Signed Document Endpoint Response Objects.\nQuery Filter for the generation of a signed document index.\nDocument Index Query Filter\nBrand\nCampaign\nCategory\nDocument Reference\nSigned Document Type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDocument ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDocument Reply\nDocument Template\nDocument Version\nA single page of documents.\nDocument Index List\nThe Page of Document Index List.\nDocument Reference for filtered Documents.\nList of Documents that matched the filter\nIndividual Indexed Document\nList of Documents that matched the filter\nIndividual Document Version\nDocument Brand Reference that matches the filter\nDocument Campaign Reference that matches the filter\nDocument Category Reference that matches the filter\nDocument ID that matches the filter\nDocument Reference that matches the filter\nDocument Type that matches the filter\nList of documents that matched the filter.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCurrent Page\nDocument Reply Reference that matches the filter\nDocument Template Reference that matches the filter\nList of matching versions of the document.\nDocument Version that matches the filter\nAll responses.\nCreated\nError responses\nMaximum size of a Signed Document (1MB)\nNo Content\nContent Too Large\nEndpoint responses.\nUnprocessable Content\nProvided responses\nPUT <code>/document</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStore a provided and validated document inside the db. …\nBad Document PUT request.\nFetch the latest version and ensure its catalyst-id match …\nPut Document Validation Error.\nError messages.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>ConfigBadRequest</code>.\nError report JSON object.\nCatalyst brand ID.\nCatalyst brand Version (same as ID).\nFund 14 Campaign ID.\nFund 14 Campaign Version (Same as ID).\nSigned document hardcoded data structure.\nA map of signed document templates to its ID.\nBuild a <code>CatalystSignedDocument</code> from the hardcoded …\nCategory ID.\nContent bytes.\nDocument templates hardcoded data.\nDocument type.\nReturns the argument unchanged.\nGet a static document template from ID and version.\nID.\nCalls <code>U::from(self)</code>.\nLoads a Signing Key which is used to sign hardcoded …\nVersion.\nList of category documents, 12 categories for Fund 14.\nList of comment templates, 12 comments each of which is …\nA definition of Category document hardcoded data\nA definition of Comment Template document hardcoded data\nAn empty JSON object bytes slice\nList of proposal templates, 12 proposals each of which is …\nA definition of Proposal Template document hardcoded data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHealth API Endpoints\nReturns the argument unchanged.\nService Inspection Control.\nImplementation of the GET /health/inspection endpoint\nCalls <code>U::from(self)</code>.\nImplementation of the <code>GET /health/live</code> endpoint.\nService Live\nImplementation of the GET /health/ready endpoint\nService Ready\nImplementation of the GET /health/started endpoint\nService Started\nAll responses.\nDebug messages\nEnable or Disable Deep Database Query Inspection.\nDisable deep query inspection\nEnable deep query inspection\nError responses\nErrors\nInformational Messages\nSet of all log levels which can be selected.\nNo Content\nEndpoint responses.\nWarnings\nProvided responses\nGET /health/inspection\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll responses.\nError responses\nNo Content\nEndpoint responses.\nProvided responses\nGET /health/live\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll responses.\nError responses\nNo Content\nEndpoint responses.\nProvided responses\nGET /health/ready\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll responses.\nError responses\nNo Content\nEndpoint responses.\nProvided responses\nGET /health/started\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCatalyst RBAC Token Authentication\nThis module contains common and re-usable objects.\nGeneric Responses are all contained in their own modules, …\n<code>OpenAPI</code> Tags we need to classify the endpoints.\nCommon types\nAPI Key authorization scheme is used ONLY by internal …\nNone authorization scheme.\nEither has No Authorization, or RBAC Token.\nCatalyst RBAC Authorization\nThe header name that holds the API Key\n<code>ApiKey</code> authorization for Internal Endpoints\nCheck the provided API Key matches the API Key defined by …\nCheck if the API Key is correctly set. Returns an error if …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEndpoint can be used without any authorization.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHas No Authorization.\nEndpoint allows Authorization with or without RBAC Token.\nHas RBAC Token.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCatalyst RBAC Security Scheme definition Catalyst RBAC …\nCatalyst RBAC Token utility functions Catalyst RBAC Token …\nThe header name that holds the authorization RBAC token\nToken does not have required access rights\nAuthentication token error.\nRegistration chain cannot be built.\nCached auth tokens\nCatalyst RBAC Access Token\nAuth token in the form of catv1.\nLatest signing key cannot be found.\nTime in the past the Token can be valid for.\nTime in the future the Token can be valid for.\nRBAC token cannot be parsed.\nRegistration chain cannot be found.\nError with the service while processing a Catalyst RBAC …\nConvert this error to a HTTP response.\nConvert this error to a HTTP response.\nConvert this error to a HTTP response.\nWhen added to an endpoint, this hook is called per request …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBearer Token prefix for this token.\nA Catalyst RBAC Authorization Token.\nCaptures just the digits after last slash This Regex …\nConverts the given token string to raw bytes.\nReturns a Catalyst ID from the token.\nA Catalyst identifier.\nChecks if the given network is supported.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks that the token timestamp is valid.\nReturns a network.\nA network value.\nCreates a new token instance.\nParses a token from the given string.\nRaw bytes of the token without the signature.\nReturns a corresponded registration chain if any …\nA corresponded RBAC chain, constructed from the most …\nEd25519 Signature of the Token\nGiven the <code>PublicKey</code>, verifies the token was correctly …\nDefines API schemas of Cardano Objects.\nSigned Document Objects\nGeneric Objects\nDefines API schema of Cardano hash type.\nDefines API schemas of Cardano network types.\nDefines API schemas of Cardano Slot info types.\nDefines API schemas of stake amount type.\nThe byte size for this hash.\nThe byte size for this hash.\nThe hex-encoded hash length of this hash type.\nThe hex-encoded hash length of this hash type.\nCardano Blake2b128 hash encoded in hex.\nCardano Blake2b256 hash encoded in hex.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>Hash256</code> schema definition.\nCreates a <code>Hash128</code> schema definition.\nCardano mainnet.\nCardano network type.\nCardano preprod.\nCardano preview.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCurrent slot info.\nNext slot info.\nPrevious slot info.\nCardano block’s slot data.\nCardano follower’s slot info.\nBlock hash.\nBlock time.\nCurrent slot info.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNext slot info.\nPrevious slot info.\nSlot number.\nFull user’s cardano stake info.\nPersistent stake information.\nUser’s cardano stake info.\nUser’s staked txo asset info.\nVolatile stake information.\nTotal stake amount.\nToken Asset Value.\nToken policies Asset Name.\nTXO assets infos.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPersistent stake information.\nToken policy hash.\nBlock’s slot number which contains the latest unspent …\nVolatile stake information.\nImplement <code>JSONObject</code>.\nPagination response object to be included in every paged …\nRepresents any JSON object used to interfacing as an API …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDescription for the <code>CurrentPage</code> object.\nCurrent Page of data being returned.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>CurrentPage</code> object.\nBad Request\nError responses\nDefault error responses\n<code>FilteredByStatusCodeResponse</code> is used to filter out …\nForbidden\nPrecondition Failed\nRequest Header Fields Too Large\nInternal Server Error.\nService Unavailable\nToo Many Requests\nUnauthorized\nURI Too Long\nProvided responses\nCombine provided responses type with the default responses …\nDefine <code>Unauthorized</code> response type.\nDefine <code>Forbidden</code> response type.\nDefine <code>Precondition Failed</code> response type.\nDefine <code>TooManyRequests</code> response type.\nDefine <code>ServerError</code> type.\nDefine <code>Service Unavailable</code> Response Body.\nHandle a 403 forbidden response.\nHandle a 403 forbidden response.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle a 5xx response. Returns a Server Error or a Service …\nHandle a 500 internal error response.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHandle a 412 precondition failed response.\nHandle a 429 rate limiting response.\nHandle a 503 service unavailable error response.\nHandle a 401 unauthorized response.\nHandle a 401 unauthorized response.\nThe client has not sent valid authentication credentials …\nExample\nReturns the argument unchanged.\nUnique ID of this Server Error so that it can be located …\nCalls <code>U::from(self)</code>.\nError message.\nCreate a new Payload.\nThe client has not sent valid authentication credentials …\nExample for the Too Many Requests Payload.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique ID of this Server Error so that it can be located …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nError message.\nCreate a new Server Error Response Payload.\nList or Roles required to access the resource.\nIndividual details of a single error that was detected …\nThe client has not sent valid data in its request, …\nDetails of each error in the content that was detected.\nThe type of error\nExample for the Too Many Requests Payload.\nExample for the <code>ContentErrorDetail</code> Payload.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe location of the error\nThe error message.\nCreate a new <code>ContentErrorDetail</code> Response Payload.\nCreate a new <code>ContentErrorDetail</code> Response Payload.\nThe client has sent too many requests in a given amount of …\nExample for the Too Many Requests Payload.\nReturns the argument unchanged.\nUnique ID of this Server Error so that it can be located …\nCalls <code>U::from(self)</code>.\nError message.\nCreate a new Server Error Response Payload.\nAn internal server error occurred.\nExample for the Server Error Payload.\nReturns the argument unchanged.\nGet the id of this Server Error.\nUnique ID of this Server Error so that it can be located …\nCalls <code>U::from(self)</code>.\nA URL to report an issue.\nError message.\nCreate a new Server Error Response Payload.\nThe service is not available, try again later.\nExample for the Service Unavailable Payload.\nReturns the argument unchanged.\nGet the id of this Server Error.\nUnique ID of this Server Error so that it can be located …\nCalls <code>U::from(self)</code>.\nError message.\nCreate a new Server Error Response Payload.\n<code>OpenAPI</code> Tags\nGeneral Cardano Blockchain Information.\nService Configuration and Status.\nSigned Document endpoints\nService Health and Readiness.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSimple array types implementor.\nCardano Types\nSigned Document Types\nGeneric Types\nHeader Types\nPayload Types\nSimple string types.\nMacro to make creating validated and documented array …\nADA coins value on the blockchain.\nCardano Native Asset Name.\nValue of a Cardano Native Asset.\nA Catalyst short identifier.\nCardano address types.\nCardano address types.\nHex encoded 28 byte hash.\nNonce\nThese types are specifically and only used for Query …\nImplement newtype of <code>RegistrationList</code>\nSlot Number on the blockchain.\nBlock’s slot and transaction index API object.\nTransaction ID.\nTransaction Index within a block.\nSlot number\nDescription.\nExample.\nMaximum.\nMinimum.\nSchema.\nTitle.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIs the Slot Number valid?\nDescription.\nExample.\nMaximum length. (True length is 32, but escaping can …\nMinimum length.\nValidation Regex Pattern\nSchema.\nTitle.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBecause ALL the constraints are defined above, we do not …\nValue of a Cardano Native Asset (may not be zero)\nDescription.\nExample.\nMaximum. From: …\nMinimum. From: …\nSchema.\nTitle.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIs the <code>AssetValue</code> valid?\nA Catalyst short identifier.\nCatalyst Id String Format\nCatalyst Id Pattern\nA schema.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBech32 Match Pattern\nLength of the decoded address.\nLength of the decoded address.\nDescription\nLength of the encoded address (for type 0 - 3).\nLength of the encoded address (for type 6 - 7).\nExample\nExternal document for Cardano addresses.\nMinimum length\nMinimum length\nRegex Pattern\nProduction Address Identifier\nSchema.\nTest Address Identifier\nTitle\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBecause ALL the constraints are defined above, we do not …\nLength of the decoded address.\nStake address description.\nLength of the encoded address.\nStake address example.\nExternal document for Cardano addresses.\nString Format\nMinimum length\nMinimum length\nRegex Pattern\nProduction Stake Address Identifier\nSchema for <code>StakeAddress</code>.\nTest Stake Address Identifier\nStake address title.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBecause ALL the constraints are defined above, we do not …\nDescription.\nLength of the hex encoded string;\nExample.\nLength of the hash itself;\nValidation Regex Pattern\nSchema.\nTitle.\nAn example 32 bytes ED25519 Public Key.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBecause ALL the constraints are defined above, we do not …\nDescription.\nExample.\nMaximum.\nMinimum.\nValue of a Nonce.\nSchema.\nTitle.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIs the Nonce valid?\nQuery Parameter that can take either a Blockchain slot …\nQuery Parameter that can take a CIP-19 stake address or a …\nQuery Parameter that can take a CIP-19 stake address, or a …\nAs at time from query string parameter. Store (Whence, …\nDescription.\nExample\nExample time.\nExample whence.\nMaximum parameter length\nMinimum parameter length\nValidation Regex Pattern\nSchema.\nSlot Discriminator\nTime Discriminator\nTitle.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse the <code>AsAt</code> parameter from the Query string provided.\nA CIP-19 stake address\nA catalyst id\nA Query Parameter that can take a CIP-19 stake address, or …\nDescription.\nExample\nFormat\nValidation Regex Pattern\nSchema.\nTitle.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA CIP-19 stake address\nSpecial value that means we try to fetch all possible …\nDescription.\nExample\nFormat\nMaximum parameter length\nMinimum parameter length\nValidation Regex Pattern\nA Ed25519 Public Key\nSchema.\nA Query Parameter that can take a CIP-19 stake address, or …\nTitle.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDescription.\nExample.\nMaximum.\nMinimum.\nSchema.\nSlot number\nTitle.\nExplicit default implementation of <code>SlotNo</code> which is <code>0</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGeneric conversion of <code>Option&lt;T&gt;</code> to <code>Option&lt;SlotNo&gt;</code>.\nIs the Slot Number valid?\nBlock’s slot number and transaction index.\nBlock’s slot number and transaction index.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSlot number\nA transaction index inside the block.\nDescription.\nLength of the hex encoded string;\nExample.\nLength of the hash itself;\nValidation Regex Pattern\nSchema.\nTitle.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBecause ALL the constraints are defined above, we do not …\nDescription.\nExample.\nInvalid Error Msg.\nMaximum.\nMinimum.\nSchema.\nTitle.\nTransaction Index within a block.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIs the Slot Number valid?\nSigned Document Reference\nSigned Document Type\nSigned Document ID\nSigned Document Version\nA Reference to another Signed Document\nEither a Single Document ID, or a Range of Document IDs\nVersion Reference with Optional Document ID Reference\nDocument Reference\nA Reference to a Document ID/s and their version/s.\nDocument ID Reference ONLY\nDocument ID Reference\nA Reference to a Document ID/s and their version/s.\nDocument Version Reference\nDocument ID Reference\nReturns an example of this type that includes both an <code>id</code> …\nReturns an example of this type that includes both an <code>id</code> …\nReturns an example of this type that includes both an <code>id</code> …\nReturns an example of this type that includes both an <code>id</code> …\nReturns an example of this type that only an <code>id</code>\nReturns an example of this type that includes only an <code>id</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDocument ID, or range of Document IDs\nDocument ID, or range of Document IDs\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDocument Version, or Range of Document Versions\nDocument Version\nDescription.\nLength of the hex encoded string\nExample.\nFormat\nValidation Regex Pattern\nSchema\nTitle.\nExternal Documentation URI\nDescription of the URI\nAn example.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBecause ALL the constraints are defined above, we do not …\nCreates a new <code>DocumentType</code> instance without validation. …\nDescription.\nLength of the hex encoded string\nExample.\nExample maximum - Timestamp retained, random value set to …\nExample minimum - Timestamp retained, random value set to …\nThis exact Document ID\nEither a Single Document ID, or a Range of Document IDs\nDocument ID Selector\nFormat\nA single Document IDs.\nID Equals\nA range of Document IDs.\nID Range\nValidation Regex Pattern\nDocument IDs in this range\nSchema\nTitle.\nExternal Documentation URI\nDescription of the URI\nThe exact Document ID to match against.\nAn example.\nAn example of a maximum Document ID when specifying ranges\nAn example of a minimum Document ID when specifying ranges\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBecause ALL the constraints are defined above, we do not …\nMaximum Document ID to find (inclusive)\nMinimum Document ID to find (inclusive)\nCreates a new <code>DocumentId</code> instance without validation. <strong>NOTE</strong> …\nDescription.\nLength of the hex encoded string\nExample.\nExample - Range min.\nExample - Ranged max\nThis exact Document ID\nDocument or Range of Documents\nDocument Version Selector\nFormat\nValidation Regex Pattern\nDocument Versions in this range\nSchema\nTitle.\nExternal Documentation URI\nDescription of the URI\nA single Document IDs.\nVersion Equals\nVersion Range\nVersion Range\nThe exact Document ID to match against.\nAn example.\nAn example of a maximum Document ID when specifying ranges\nAn example of a minimum Document ID when specifying ranges\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBecause ALL the constraints are defined above, we do not …\nMaximum Document Version to find (inclusive)\nMinimum Document Version to find (inclusive)\nCreates a new <code>DocumentVer</code> instance without validation. <strong>NOTE</strong>…\nImplement type wrapper for boolean type\nImplement API endpoint interfacing <code>DateTime</code>.\nEd25519 Public Key Type.\nImplement newtype of <code>ErrorList</code>\nGeneric Error Messages\nImplement API endpoint interfacing <code>ErrorUuid</code>.\n<code>IpAddr</code> Type.\n<code>JsonObject</code> Type.\nGeneric Query ONLY parameters.\nImplementation of <code>Url</code> newtype.\n<code>UUIDv4</code> Type.\n<code>UUIDv7</code> Type.\nBoolean flag\nExplicit default implementation of <code>Flag</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNewtype for <code>DateTime&lt;Utc&gt;</code>. Should be used for API …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDescription.\nLength of the hex encoded string\nExample.\nFormat\nValidation Regex Pattern\nSchema\nTitle.\nAn example 32 bytes ED25519 Public Key.\nExtra examples of 32 bytes ED25519 Public Key.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBecause ALL the constraints are defined above, we do not …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDescription.\nExample.\nError message string maximum length\nError message string minimum length\nValidation Regex Pattern\nSchema\nTitle.\nAn example 32 bytes ED25519 Public Key.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if we match the regex.\nError Unique ID\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIP Address.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>JSON</code> Object API definition\nAn example <code>UUIDv4</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsistent Pagination Types\nDefault Limit (Should be used by paged responses to set …\nDescription\nExample.\nMaximum.\nMinimum.\nSchema.\nTitle.\nLimit of items to be returned in a page of data.\nDefault\nDescription\nExample.\nPage Maximum.\nPage Minimum.\nSchema.\nPage Title.\nPage to be returned in the response.\nDescription\nExample.\nMaximum.\nMinimum.\nSchema.\nTitle.\nThe remaining number of items to be returned after a page.\nCalculate remaining from total, page, limit, and the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the <code>Page</code> valid?\nIs the <code>Page</code> valid?\nIs the <code>Remaining</code> valid?\nDescription - must be suitable for both the Query and …\nDescription.\nDescription.\nURL String\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDescription.\nLength of the hex encoded string\nExample.\nFormat\nValidation Regex Pattern\nSchema\nTitle.\nAn example <code>UUIDv4</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBecause ALL the constraints are defined above, we do not …\nDescription.\nLength of the hex encoded string\nExample.\nFormat\nValidation Regex Pattern\nSchema\nTitle.\nAn example <code>UUIDv7</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBecause ALL the constraints are defined above, we do not …\nAccess-Control-Allow-Origin Header type.\n<code>RateLimit</code> Header type.\nRetry After header type\nDescription for the header in documentation.\nExample for the header in documentation.\nExternal documentation for the header\n<code>OpenAPI</code> schema for the header in documentation.\nTite for the header in documentation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDescription for the header in documentation.\nExample for the header in documentation.\nExternal documentation for the header\n<code>OpenAPI</code> schema for the header in documentation.\nTite for the header in documentation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHttp Date\nUse a default Retry After header value\nDon’t include the Retry After header value in the …\nParameter which describes the possible choices for a …\nParameter which lets us set the retry header, or use some …\nInterval in seconds.\nUse a specific Retry After header value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGeneric CBOR Payload\nA cbor binary payload.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMacro to make creating validated and documented string …\nEmbed static files.\nCreate the documentation pages where the <code>OpenAPI</code> docs can …\nGet an endpoint for favicon.ico\nReturns the argument unchanged.\nGet an embedded file and its metadata.\nCalls <code>U::from(self)</code>.\nIterates over the file paths in the folder.\nProvides a <code>OpenAPI</code> UI using the Stoplight Elements …\nStoplight Elements UI CSS\nStoplight Elements UI JavaScript\nStoplight Elements UI Template\nCreate an endpoint to return the Stoplight documentation …\nCreate the HTML from the Stoplight template above and our …\nGet the API docs as a string in the JSON format.\nThis exists to allow us to add extra routes to the service …\nRun the Poem Service\nUnused\nConvert bytes to hex string with the <code>0x</code> prefix\nHandle catching panics created by endpoints, logging them …\nSimple general purpose utility functions.\nConvert bytes to hex string with the <code>0x</code> prefix\nService Health Utilities.\nCustom POEM Middleware for this service.\nNetworking utility functions.\nCustomized Panic handler. Catches all panics, and turns …\nReturns the argument unchanged.\nHandle a panic. Log the panic and respond with a 500 with …\nCalls <code>U::from(self)</code>.\nSets a custom panic hook to capture the Backtrace and …\nConvert an <code>&lt;T&gt;</code> to <code>&lt;R&gt;</code>. (saturate if out of range.) Note …\nUtilities used for <code>Liveness</code> functionality.\nUtilities used for system <code>Readiness</code> functionality.\nUtilities used for system <code>Started</code> functionality.\nFlag to determine if the service is live.\nTimestamp in seconds used to determine if the service is …\nGet the <code>LIVE_PANIC_COUNTER</code> value.\nIncrease <code>LIVE_PANIC_COUNTER</code> by one.\nGet the <code>IS_LIVE</code> flag.\nReset the <code>LIVE_PANIC_COUNTER</code> to zero, returns last count.\nSet the <code>IS_LIVE</code> flag to <code>false</code>.\nFlag to determine if the chain follower has synchronized …\nFlag to determine if the Event DB has started.\nFlag to determine if the Indexing DB has started.\nFlag to determine if the service has started\nReturns whether the service has started or not.\nReturns whether the Event DB is live or not.\nReturns whether the Chain Follower has reached Tip or not.\nReturns whether the Index DB is live or not.\nReturns whether the service has started or not.\nSet the <code>LIVE_EVENT_DB</code> flag.\nSet the <code>INITIAL_FOLLOWER_TIP_REACHED</code> as <code>true</code>.\nSet the <code>LIVE_INDEX_DB</code> flag.\nSet the <code>STARTED</code> flag to <code>true</code>\nMiddleware to verify that there is connection the …\nMiddleware to verify the status of the last DB schema …\nFull Tracing and metrics middleware.\nMiddleware type that returns a response with 503 status …\nThe new endpoint type generated by the …\nEndpoint wrapped by the middleware.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA middleware that raises an error  with <code>ServiceUnavailable</code> …\nThe new endpoint type generated by the …\nEndpoint wrapped by the middleware.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA function that wraps an endpoint with the …\nData we collected about the response\nMiddleware for <code>tracing</code>.\nEndpoint for <code>Tracing</code> middleware.\nAdd all interesting headers to the correct fields in a …\nGiven a Clients IP Address, return the anonymized version …\nGet an anonymized client ID from the request.\nCPU time of the request\nDuration of the request\nEndpoint name\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInner endpoint\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a span from the request\nCreate a new <code>ResponseData</code> set from the response. In the …\nStatus code returned\nGet the public IPv4 Address of the Service.\nGet the public IPv4 Address of the Service.\nDefault address to start service on, ‘0.0.0.0:3030’.\nDefault <code>API_URL_PREFIX</code> used in development.\nDefault <code>CHECK_CONFIG_TICK</code> used in development, 5 seconds.\nDefault <code>CLIENT_ID_KEY</code> used in development.\nHandle to the mithril sync thread. One for each Network …\nAll the <code>EnvVars</code> used by the service.\nDefault Github issue template to use\nDefault Github repo name\nDefault Github repo owner\nDefault <code>METRICS_FOLLOWER_INTERVAL</code>, 1 second.\nDefault <code>METRICS_MEMORY_INTERVAL</code>, 1 second.\nDefault number of slots used as overlap when purging Live …\nDefault <code>SERVICE_LIVE_COUNTER_THRESHOLD</code>, that is used to …\nDefault <code>SERVICE_LIVE_TIMEOUT_INTERVAL</code>, that is used to …\nAll Settings/Options for the Service.\nSettings for the application.\nOur Global Settings for this running service.\nServer binding address\nGet a list of all host names to serve the API on.\nA List of servers to provide\nThe API Url prefix\nThe base path the API is served at.\nThe socket address we are bound to.\nHash the Public IPv4 and IPv6 address of the machine, and …\nChain Follower network (The Blockchain network we are …\nCommand line and environment variable settings for the …\nGet the Persistent &amp; Volatile Cassandra DB config for this …\nThe Config of the Persistent Cassandra DB.\nThe Config of the Volatile Cassandra DB.\nCommand line and environment variable settings for the …\nThe Chain Follower configuration\nTick every N seconds until config exists in db\nCheck a given key matches the internal API Key\nThe Key used to anonymize client connections in the logs.\nThe client id key used to anonymize client connections.\nCommand line and environment variable settings for the …\nThe event db configuration\nGet the current Event DB settings for this service.\nGet the configuration of the chain follower.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a github issue url with a given title\nThe github issue template to use\nThe github repo name\nThe github repo owner\nInitialize the settings data.\nInternal API Access API Key\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogging level\nThe Chain Follower metrics interval\nInterval for updating and sending Chain Follower metrics.\nThe memory metrics interval\nInterval for updating and sending memory metrics.\nSlot buffer used as overlap when purging Live Index data.\nSlot buffer used as overlap when purging Live Index data.\nGet the server name to be used in the <code>Server</code> object of the …\nServer name\nThe Service UUID\nId of the Service.\nValue after which the service is considered NOT live.\nThreshold for determining if the service is live.\nDuration in seconds used to determine if the system is …\nInterval for determining if the service is live.\nCommand line and environment variable settings for the …\nThe Catalyst Signed Documents configuration\nGet the configuration of the Catalyst Signed Documents.\nProcessing for String Environment Variables\nTransform a string list of host names into a vec of host …\nValidate env vars in ways we couldn’t when they were …\nConfiguration for an individual cassandra cluster.\nMaximum possible batch size.\nDefault maximum batch size. This comes from: …\nMinimum possible batch size.\nDefault Cassandra DB URL for the Persistent DB.\nDefault Cassandra DB URL for the Persistent DB.\nDefault Cassandra DB URL for the Persistent DB.\nDefault Cassandra DB URL for the Persistent DB.\nCompression to use.\nConfig options for deployment i.e replication strategy\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLog the configuration of this Cassandra DB\nMaximum Configured Batch size.\nCreate a config for a cassandra cluster, identified by a …\nThe Password to use for the Cassandra DB..\nUse TLS for the connection?\nUse TLS for the connection?\nThe Address/s of the DB.\nThe <code>UserName</code> to use for the Cassandra DB.\nDefault chain to follow.\nDefault number of slots each sync task will process at one …\nDefault number of sync tasks (must be in the range 1 to …\nConfiguration for the chain follower.\nMaximum DL Chunk Queue Ahead (must be in the range 1 to …\nMaximum DL Chunk Size in MB (must be in the range 1 to 256 …\nMaximum number of DL Connections (must be in the range 1 …\nMaximum DL Chunk Connect/Data Timeout in seconds (0 = …\nMaximum the number of slots each sync task will process at …\nMaximum number of sync tasks (must be in the range 1 to …\nMinimum the number of slots each sync task will process at …\nNumber of bytes in a Megabyte\nThe Blockchain we sync from.\nThe Mithril Downloader Configuration.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLog the configuration of this Chain Follower\nCreate a config for a cassandra cluster, identified by a …\nThe maximum number of slots a sync task will process at …\nThe maximum number of sync tasks.\nSets the connection timeout used by the pool. Defaults to …\nSets the maximum number of connections managed by the pool.\nSets the maximum lifetime of connections in the pool. …\nSets the minimum idle connection count maintained by the …\nDefault Event DB URL.\nConfiguration for event db.\nSets the connection timeout used by the pool. Defaults to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSets the maximum number of connections managed by the pool.\nSets the maximum lifetime of connections in the pool. …\nSets the minimum idle connection count maintained by the …\nCreate a config for event db.\nThe Address of the Event DB.\nThe Address of the Event DB.\nThe <code>UserName</code> to use for the Event DB.\nDefault number value of <code>future_threshold</code>, 30 seconds.\nDefault number value of <code>past_threshold</code>, 10 minutes.\nConfiguration for the Catalyst Signed Documents validation …\nReturns the argument unchanged.\nThe Catalyst Signed Document threshold, document cannot be …\nThe Catalyst Signed Document threshold, document cannot be …\nCalls <code>U::from(self)</code>.\nCreate a config for Catalyst Signed Document validation …\nThe Catalyst Signed Document threshold, document cannot be …\nThe Catalyst Signed Document threshold, document cannot be …\nThe env var is plain and should not be redacted.\nThe env var is redacted and should be redacted.\nAn environment variable read as a string.\nErgonomic way of specifying if a env var needs to be …\nGet the read env var as a str.\nGet the read env var as a str.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead the env var from the environment.\nConvert an Envvar into the required Duration type.\nConvert an Envvar into the required Enum Type.\nConvert an Envvar into an integer in the bounded range.\nNew Env Var that is optional.\nWhether the env var is displayed redacted or not.\nValue of the env var.\nTypes of Blake-2b Hash\nUtility functions for Ed25519 keys and crypto.\nUtility functions for JSON schema processing\nGenerates a UUID string from the provided key and data …\nLength of the hex encoded string;\nConvert a hex string to a Verifying Key.\nConvert a Vector of bytes into an ED25519 verifying key.\nGet the <code>OpenAPI</code> specification\nJSON schema version\nExtracts a JSON schema definition from the <code>OpenAPI</code> JSON …\nExtract the reference parts from a $ref string\nGet the nested value from a JSON object.\nMerge 2 JSON objects.\nFunction to resolve a <code>$ref</code> in the JSON schema")