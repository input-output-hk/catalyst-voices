(function() {
    var type_impls = Object.fromEntries([["cat_gateway",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-SkipMap%3CK,+V%3E\" class=\"impl\"><a href=\"#impl-Debug-for-SkipMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for SkipMap&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","cat_gateway::db::index::queries::SizedBatch"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-SkipMap%3CK,+V%3E\" class=\"impl\"><a href=\"#impl-Default-for-SkipMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for SkipMap&lt;K, V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; SkipMap&lt;K, V&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","cat_gateway::db::index::queries::SizedBatch"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C(K,+V)%3E-for-SkipMap%3CK,+V%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3C(K,+V)%3E-for-SkipMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt; for SkipMap&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; SkipMap&lt;K, V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<(K, V)>","cat_gateway::db::index::queries::SizedBatch"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-SkipMap%3CK,+V%3E\" class=\"impl\"><a href=\"#impl-IntoIterator-for-SkipMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for SkipMap&lt;K, V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = IntoIter&lt;K, V&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; IntoIter&lt;K, V&gt;</h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","cat_gateway::db::index::queries::SizedBatch"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SkipMap%3CK,+V%3E\" class=\"impl\"><a href=\"#impl-SkipMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; SkipMap&lt;K, V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>() -&gt; SkipMap&lt;K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a new, empty map.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_skiplist::SkipMap;\n\n<span class=\"kw\">let </span>map: SkipMap&lt;i32, <span class=\"kw-2\">&amp;</span>str&gt; = SkipMap::new();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the map is empty.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_skiplist::SkipMap;\n\n<span class=\"kw\">let </span>map: SkipMap&lt;<span class=\"kw-2\">&amp;</span>str, <span class=\"kw-2\">&amp;</span>str&gt; = SkipMap::new();\n<span class=\"macro\">assert!</span>(map.is_empty());\n\nmap.insert(<span class=\"string\">\"key\"</span>, <span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert!</span>(!map.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of entries in the map.</p>\n<p>If the map is being concurrently modified, consider the returned number just an\napproximation without any guarantees.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_skiplist::SkipMap;\n\n<span class=\"kw\">let </span>map = SkipMap::new();\nmap.insert(<span class=\"number\">0</span>, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(map.len(), <span class=\"number\">1</span>);\n\n<span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"number\">1</span>..=<span class=\"number\">5 </span>{\n    map.insert(x, x + <span class=\"number\">1</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(map.len(), <span class=\"number\">6</span>);</code></pre></div>\n</div></details></div></details>",0,"cat_gateway::db::index::queries::SizedBatch"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SkipMap%3CK,+V%3E\" class=\"impl\"><a href=\"#impl-SkipMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; SkipMap&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">insert</a>(&amp;self, key: K, value: V) -&gt; Entry&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Inserts a <code>key</code>-<code>value</code> pair into the map and returns the new entry.</p>\n<p>If there is an existing entry with this key, it will be removed before inserting the new\none.</p>\n<p>This function returns an [<code>Entry</code>] which\ncan be used to access the inserted key’s associated value.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_skiplist::SkipMap;\n\n<span class=\"kw\">let </span>map = SkipMap::new();\nmap.insert(<span class=\"string\">\"key\"</span>, <span class=\"string\">\"value\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>map.get(<span class=\"string\">\"key\"</span>).unwrap().value(), <span class=\"string\">\"value\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_insert\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">compare_insert</a>&lt;F&gt;(\n    &amp;self,\n    key: K,\n    value: V,\n    compare_fn: F,\n) -&gt; Entry&lt;'_, K, V&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a <code>key</code>-<code>value</code> pair into the skip list and returns the new entry.</p>\n<p>If there is an existing entry with this key and compare(entry.value) returns true,\nit will be removed before inserting the new one.\nThe closure will not be called if the key is not present.</p>\n<p>This function returns an [<code>Entry</code>] which\ncan be used to access the inserted key’s associated value.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_skiplist::SkipMap;\n\n<span class=\"kw\">let </span>map = SkipMap::new();\nmap.insert(<span class=\"string\">\"key\"</span>, <span class=\"number\">1</span>);\nmap.compare_insert(<span class=\"string\">\"key\"</span>, <span class=\"number\">0</span>, |x| x &lt; <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>map.get(<span class=\"string\">\"key\"</span>).unwrap().value(), <span class=\"number\">1</span>);\nmap.compare_insert(<span class=\"string\">\"key\"</span>, <span class=\"number\">2</span>, |x| x &lt; <span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>map.get(<span class=\"string\">\"key\"</span>).unwrap().value(), <span class=\"number\">2</span>);\nmap.compare_insert(<span class=\"string\">\"absent_key\"</span>, <span class=\"number\">0</span>, |<span class=\"kw\">_</span>| <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>map.get(<span class=\"string\">\"absent_key\"</span>).unwrap().value(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Entry&lt;'_, K, V&gt;&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes an entry with the specified <code>key</code> from the map and returns it.</p>\n<p>The value will not actually be dropped until all references to it have gone\nout of scope.</p>\n<p>This function returns an [<code>Entry</code>] which\ncan be used to access the removed key’s associated value.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_skiplist::SkipMap;\n\n<span class=\"kw\">let </span>map: SkipMap&lt;<span class=\"kw-2\">&amp;</span>str, <span class=\"kw-2\">&amp;</span>str&gt; = SkipMap::new();\n<span class=\"macro\">assert!</span>(map.remove(<span class=\"string\">\"invalid key\"</span>).is_none());\n\nmap.insert(<span class=\"string\">\"key\"</span>, <span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>map.remove(<span class=\"string\">\"key\"</span>).unwrap().value(), <span class=\"string\">\"value\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_front\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">pop_front</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Entry&lt;'_, K, V&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Removes the entry with the lowest key\nfrom the map. Returns the removed entry.</p>\n<p>The value will not actually be dropped until all references to it have gone\nout of scope.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_skiplist::SkipMap;\n\n<span class=\"kw\">let </span>numbers = SkipMap::new();\nnumbers.insert(<span class=\"number\">6</span>, <span class=\"string\">\"six\"</span>);\nnumbers.insert(<span class=\"number\">7</span>, <span class=\"string\">\"seven\"</span>);\nnumbers.insert(<span class=\"number\">12</span>, <span class=\"string\">\"twelve\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>numbers.pop_front().unwrap().value(), <span class=\"string\">\"six\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>numbers.pop_front().unwrap().value(), <span class=\"string\">\"seven\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>numbers.pop_front().unwrap().value(), <span class=\"string\">\"twelve\"</span>);\n\n<span class=\"comment\">// All entries have been removed now.\n</span><span class=\"macro\">assert!</span>(numbers.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_back\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">pop_back</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Entry&lt;'_, K, V&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Removes the entry with the greatest key from the map.\nReturns the removed entry.</p>\n<p>The value will not actually be dropped until all references to it have gone\nout of scope.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_skiplist::SkipMap;\n\n<span class=\"kw\">let </span>numbers = SkipMap::new();\nnumbers.insert(<span class=\"number\">6</span>, <span class=\"string\">\"six\"</span>);\nnumbers.insert(<span class=\"number\">7</span>, <span class=\"string\">\"seven\"</span>);\nnumbers.insert(<span class=\"number\">12</span>, <span class=\"string\">\"twelve\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>numbers.pop_back().unwrap().value(), <span class=\"string\">\"twelve\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>numbers.pop_back().unwrap().value(), <span class=\"string\">\"seven\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>numbers.pop_back().unwrap().value(), <span class=\"string\">\"six\"</span>);\n\n<span class=\"comment\">// All entries have been removed now.\n</span><span class=\"macro\">assert!</span>(numbers.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear</a>(&amp;self)</h4></section></summary><div class=\"docblock\"><p>Removes all entries from the map.</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_skiplist::SkipMap;\n\n<span class=\"kw\">let </span>people = SkipMap::new();\npeople.insert(<span class=\"string\">\"Bill\"</span>, <span class=\"string\">\"Gates\"</span>);\npeople.insert(<span class=\"string\">\"Steve\"</span>, <span class=\"string\">\"Jobs\"</span>);\n\npeople.clear();\n<span class=\"macro\">assert!</span>(people.is_empty());</code></pre></div>\n</div></details></div></details>",0,"cat_gateway::db::index::queries::SizedBatch"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SkipMap%3CK,+V%3E\" class=\"impl\"><a href=\"#impl-SkipMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; SkipMap&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.front\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">front</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Entry&lt;'_, K, V&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the entry with the smallest key.</p>\n<p>This function returns an [<code>Entry</code>] which\ncan be used to access the key’s associated value.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_skiplist::SkipMap;\n\n<span class=\"kw\">let </span>numbers = SkipMap::new();\nnumbers.insert(<span class=\"number\">5</span>, <span class=\"string\">\"five\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>numbers.front().unwrap().value(), <span class=\"string\">\"five\"</span>);\nnumbers.insert(<span class=\"number\">6</span>, <span class=\"string\">\"six\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>numbers.front().unwrap().value(), <span class=\"string\">\"five\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.back\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">back</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Entry&lt;'_, K, V&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the entry with the largest key.</p>\n<p>This function returns an [<code>Entry</code>] which\ncan be used to access the key’s associated value.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_skiplist::SkipMap;\n\n<span class=\"kw\">let </span>numbers = SkipMap::new();\nnumbers.insert(<span class=\"number\">5</span>, <span class=\"string\">\"five\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>numbers.back().unwrap().value(), <span class=\"string\">\"five\"</span>);\nnumbers.insert(<span class=\"number\">6</span>, <span class=\"string\">\"six\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>numbers.back().unwrap().value(), <span class=\"string\">\"six\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_key\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">contains_key</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the map contains a value for the specified key.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_skiplist::SkipMap;\n\n<span class=\"kw\">let </span>ages = SkipMap::new();\nages.insert(<span class=\"string\">\"Bill Gates\"</span>, <span class=\"number\">64</span>);\n\n<span class=\"macro\">assert!</span>(ages.contains_key(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"Bill Gates\"</span>));\n<span class=\"macro\">assert!</span>(!ages.contains_key(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"Steve Jobs\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Entry&lt;'_, K, V&gt;&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns an entry with the specified <code>key</code>.</p>\n<p>This function returns an [<code>Entry</code>] which\ncan be used to access the key’s associated value.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_skiplist::SkipMap;\n\n<span class=\"kw\">let </span>numbers: SkipMap&lt;<span class=\"kw-2\">&amp;</span>str, i32&gt; = SkipMap::new();\n<span class=\"macro\">assert!</span>(numbers.get(<span class=\"string\">\"six\"</span>).is_none());\n\nnumbers.insert(<span class=\"string\">\"six\"</span>, <span class=\"number\">6</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>numbers.get(<span class=\"string\">\"six\"</span>).unwrap().value(), <span class=\"number\">6</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lower_bound\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">lower_bound</a>&lt;'a, Q&gt;(&amp;'a self, bound: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/enum.Bound.html\" title=\"enum core::ops::range::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Entry&lt;'a, K, V&gt;&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns an <code>Entry</code> pointing to the lowest element whose key is above\nthe given bound. If no such element is found then <code>None</code> is\nreturned.</p>\n<p>This function returns an [<code>Entry</code>] which\ncan be used to access the key’s associated value.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_skiplist::SkipMap;\n<span class=\"kw\">use </span>std::ops::Bound::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>numbers = SkipMap::new();\nnumbers.insert(<span class=\"number\">6</span>, <span class=\"string\">\"six\"</span>);\nnumbers.insert(<span class=\"number\">7</span>, <span class=\"string\">\"seven\"</span>);\nnumbers.insert(<span class=\"number\">12</span>, <span class=\"string\">\"twelve\"</span>);\n\n<span class=\"kw\">let </span>greater_than_five = numbers.lower_bound(Excluded(<span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>)).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>greater_than_five.value(), <span class=\"string\">\"six\"</span>);\n\n<span class=\"kw\">let </span>greater_than_six = numbers.lower_bound(Excluded(<span class=\"kw-2\">&amp;</span><span class=\"number\">6</span>)).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>greater_than_six.value(), <span class=\"string\">\"seven\"</span>);\n\n<span class=\"kw\">let </span>greater_than_thirteen = numbers.lower_bound(Excluded(<span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>));\n<span class=\"macro\">assert!</span>(greater_than_thirteen.is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.upper_bound\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">upper_bound</a>&lt;'a, Q&gt;(&amp;'a self, bound: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/enum.Bound.html\" title=\"enum core::ops::range::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Entry&lt;'a, K, V&gt;&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns an <code>Entry</code> pointing to the highest element whose key is below\nthe given bound. If no such element is found then <code>None</code> is\nreturned.</p>\n<p>This function returns an [<code>Entry</code>] which\ncan be used to access the key’s associated value.</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_skiplist::SkipMap;\n<span class=\"kw\">use </span>std::ops::Bound::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>numbers = SkipMap::new();\nnumbers.insert(<span class=\"number\">6</span>, <span class=\"string\">\"six\"</span>);\nnumbers.insert(<span class=\"number\">7</span>, <span class=\"string\">\"seven\"</span>);\nnumbers.insert(<span class=\"number\">12</span>, <span class=\"string\">\"twelve\"</span>);\n\n<span class=\"kw\">let </span>less_than_eight = numbers.upper_bound(Excluded(<span class=\"kw-2\">&amp;</span><span class=\"number\">8</span>)).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>less_than_eight.value(), <span class=\"string\">\"seven\"</span>);\n\n<span class=\"kw\">let </span>less_than_six = numbers.upper_bound(Excluded(<span class=\"kw-2\">&amp;</span><span class=\"number\">6</span>));\n<span class=\"macro\">assert!</span>(less_than_six.is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_or_insert</a>(&amp;self, key: K, value: V) -&gt; Entry&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Finds an entry with the specified key, or inserts a new <code>key</code>-<code>value</code> pair if none exist.\nThis function returns an [<code>Entry</code>] which\ncan be used to access the key’s associated value.</p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_skiplist::SkipMap;\n\n<span class=\"kw\">let </span>ages = SkipMap::new();\n<span class=\"kw\">let </span>gates_age = ages.get_or_insert(<span class=\"string\">\"Bill Gates\"</span>, <span class=\"number\">64</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>gates_age.value(), <span class=\"number\">64</span>);\n\nages.insert(<span class=\"string\">\"Steve Jobs\"</span>, <span class=\"number\">65</span>);\n<span class=\"kw\">let </span>jobs_age = ages.get_or_insert(<span class=\"string\">\"Steve Jobs\"</span>, -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>jobs_age.value(), <span class=\"number\">65</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;self, key: K, value_fn: F) -&gt; Entry&lt;'_, K, V&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; V,</div></h4></section></summary><div class=\"docblock\"><p>Finds an entry with the specified key, or inserts a new <code>key</code>-<code>value</code> pair if none exist,\nwhere value is calculated with a function.</p>\n<p><b>Note:</b> Another thread may write key value first, leading to the result of this closure\ndiscarded. If closure is modifying some other state (such as shared counters or shared\nobjects), it may lead to <u>undesired behaviour</u> such as counters being changed without\nresult of closure inserted\nThis function returns an [<code>Entry</code>] which\ncan be used to access the key’s associated value.</p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_skiplist::SkipMap;\n\n<span class=\"kw\">let </span>ages = SkipMap::new();\n<span class=\"kw\">let </span>gates_age = ages.get_or_insert_with(<span class=\"string\">\"Bill Gates\"</span>, || <span class=\"number\">64</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>gates_age.value(), <span class=\"number\">64</span>);\n\nages.insert(<span class=\"string\">\"Steve Jobs\"</span>, <span class=\"number\">65</span>);\n<span class=\"kw\">let </span>jobs_age = ages.get_or_insert_with(<span class=\"string\">\"Steve Jobs\"</span>, || -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>jobs_age.value(), <span class=\"number\">65</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">iter</a>(&amp;self) -&gt; Iter&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over all entries in the map,\nsorted by key.</p>\n<p>This iterator returns [<code>Entry</code>]s which\ncan be used to access keys and their associated values.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_skiplist::SkipMap;\n\n<span class=\"kw\">let </span>numbers = SkipMap::new();\nnumbers.insert(<span class=\"number\">6</span>, <span class=\"string\">\"six\"</span>);\nnumbers.insert(<span class=\"number\">7</span>, <span class=\"string\">\"seven\"</span>);\nnumbers.insert(<span class=\"number\">12</span>, <span class=\"string\">\"twelve\"</span>);\n\n<span class=\"comment\">// Print then numbers from least to greatest\n</span><span class=\"kw\">for </span>entry <span class=\"kw\">in </span>numbers.iter() {\n    <span class=\"kw\">let </span>number = entry.key();\n    <span class=\"kw\">let </span>number_str = entry.value();\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{} is {}\"</span>, number, number_str);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.range\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">range</a>&lt;Q, R&gt;(&amp;self, range: R) -&gt; Range&lt;'_, Q, R, K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over a subset of entries in the map.</p>\n<p>This iterator returns [<code>Entry</code>]s which\ncan be used to access keys and their associated values.</p>\n<h5 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_skiplist::SkipMap;\n\n<span class=\"kw\">let </span>numbers = SkipMap::new();\nnumbers.insert(<span class=\"number\">6</span>, <span class=\"string\">\"six\"</span>);\nnumbers.insert(<span class=\"number\">7</span>, <span class=\"string\">\"seven\"</span>);\nnumbers.insert(<span class=\"number\">12</span>, <span class=\"string\">\"twelve\"</span>);\n\n<span class=\"comment\">// Print all numbers in the map between 5 and 8.\n</span><span class=\"kw\">for </span>entry <span class=\"kw\">in </span>numbers.range(<span class=\"number\">5</span>..=<span class=\"number\">8</span>) {\n    <span class=\"kw\">let </span>number = entry.key();\n    <span class=\"kw\">let </span>number_str = entry.value();\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{} is {}\"</span>, number, number_str);\n}</code></pre></div>\n</div></details></div></details>",0,"cat_gateway::db::index::queries::SizedBatch"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[40742]}