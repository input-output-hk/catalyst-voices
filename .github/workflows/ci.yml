# cspell: words hoverkraft

name: CI

on:
  push:
    branches: [main, 3109-disable-generate-allure-report]
    tags: ["**"]
  pull_request:
    types:
      - synchronize
      - ready_for_review
      - opened

permissions:
  id-token: write
  contents: write
  packages: write
  pull-requests: write

env:
  REPORT_EXT: .gateway.junit-report.xml
  COVERAGE_EXT: .gateway.coverage.info

jobs:
  build-and-upload-part1:
    runs-on: ubuntu-latest
    steps:
      - name: Create Part 1 files
        run: |
          mkdir -p part1_output
          echo "Initial setup log" > part1_output/log.txt
          echo "Config A" > part1_output/config.txt

      - name: Upload Part 1 (initial artifact)
        uses: actions/upload-artifact@v4
        with:
          name: my-combined-artifact
          path: part1_output/
          retention-days: 1

  build-and-upload-part2:
    runs-on: ubuntu-latest
    needs: build-and-upload-part1 # Ensure Part 1 is uploaded first
    steps:
      - name: Create Part 2 files
        run: |
          mkdir -p part2_output
          echo "New feature log" > part2_output/feature_log.txt
          echo "Updated Config B" > part2_output/config.txt # This will conflict with part1/config.txt
          echo "Report 1" > part2_output/report.txt

      - name: Merge Part 2 files into existing artifact
        uses: ./github/actions/merge-artifact@3109-disable-generate-allure-report
        # If the action is in the same repo, use: ./github/actions/merge-artifact
        with:
          artifact-name: my-combined-artifact
          new-files-path: part2_output/
          retention-days: 1

  verify-merged-artifact:
    runs-on: ubuntu-latest
    needs: build-and-upload-part2 # Depends on the merging job
    steps:
      - name: Download final merged artifact
        uses: actions/download-artifact@v4
        with:
          name: my-combined-artifact
          path: ./final-merged-content

      - name: List contents of merged artifact
        run: ls -R ./final-merged-content/my-combined-artifact/

#  ci:
#    if: ${{ !github.event.pull_request.draft }}
#    uses: input-output-hk/catalyst-forge/.github/workflows/ci.yml@ci/v1.8.1
#    with:
#      forge_version: 0.19.1

#  tests:
#    needs: ci
#    name: Cat-Gateway integration tests
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Free Disk Space (Ubuntu)
#        uses: jlumbroso/free-disk-space@main
#        with:
#          # this might remove tools that are actually needed,
#          # if set to "true" but frees about 6 GB
#          tool-cache: false
#          # all of these default to true, but feel free to set to
#          # "false" if necessary for your workflow
#          android: true
#          dotnet: true
#          haskell: true
#          large-packages: true
#          docker-images: false
#          swap-storage: true
#
#      - name: Install Forge
#        uses: input-output-hk/catalyst-forge/actions/install@ci/v1.8.1
#        with:
#          version: 0.19.1
#      - name: Setup
#        uses: input-output-hk/catalyst-forge/actions/setup@ci/v1.8.1
#      - name: Prepare artifacts
#        uses: input-output-hk/catalyst-forge/actions/run@ci/v1.8.1
#        with:
#          command: run
#          args: ./catalyst-gateway/tests/+prepare-all-images
#
#      - name: Running Postgres tests
#        if: always()
#        run: |
#          docker compose -f catalyst-gateway/tests/docker-compose.yml up postgres-runner --abort-on-container-exit --exit-code-from postgres-runner
#          docker compose -f catalyst-gateway/tests/docker-compose.yml logs postgres-runner
#
#      - name: Running Scylla tests
#        if: always()
#        run: |
#          docker compose -f catalyst-gateway/tests/docker-compose.yml up scylla-runner --abort-on-container-exit --exit-code-from scylla-runner
#          docker compose -f catalyst-gateway/tests/docker-compose.yml logs scylla-runner
#
#      - name: Running integration API tests
#        if: always()
#        run: |
#          docker compose -f catalyst-gateway/tests/docker-compose.yml up api-tests-runner --abort-on-container-exit --exit-code-from api-tests-runner
#          docker compose -f catalyst-gateway/tests/docker-compose.yml logs api-tests-runner
#
#      - name: Running schemathesis tests
#        if: always()
#        run: |
#          docker compose -f catalyst-gateway/tests/docker-compose.yml up schemathesis-runner --abort-on-container-exit --exit-code-from schemathesis-runner
#          docker compose -f catalyst-gateway/tests/docker-compose.yml logs schemathesis-runner
#
#      - name: Collecting reports
#        if: always()
#        run: |
#          docker cp api-tests-runner:/poetry/junit-report.xml ./api-tests${{ env.REPORT_EXT }}
#          docker cp api-tests-runner:/poetry/coverage.lcov ./api-tests${{ env.COVERAGE_EXT }}
#          docker cp schemathesis-runner:/results/junit-report.xml ./schemathesis${{ env.REPORT_EXT }}
#
#      - name: Collect and upload test reports
#        uses: actions/upload-artifact@v4
#        if: always()
#        with:
#          name: test-reports
#          path: "**/*${{ env.REPORT_EXT }}"
#          if-no-files-found: error
#          retention-days: 1
#
#      - name: Collect and upload test coverage
#        uses: actions/upload-artifact@v4
#        if: always()
#        with:
#          name: coverage-reports
#          path: "**/*${{ env.COVERAGE_EXT }}"
#          if-no-files-found: error
#          retention-days: 1
#
#      - name: Shutting down all services
#        if: always()
#        run: docker compose -f catalyst-gateway/tests/docker-compose.yml down
#
#  test_reporting:
#    if: ${{ !github.event.pull_request.draft && always() }}
#    needs: tests
#    uses: ./.github/workflows/generate-allure-report.yml
