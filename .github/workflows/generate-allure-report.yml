name: Allure Report Generation

on:
  workflow_call:

permissions:
  contents: write
  pull-requests: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  ALLURE_REPORT_FOLDER: allure-report
  COVERAGE_REPORT_FOLDER: coverage-report
  REPORT_EXT: .junit-report.xml
  COVERAGE_EXT: .coverage.info

jobs:
  generate-test-reports:
    name: Generate test reports
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Forge
        uses: input-output-hk/catalyst-forge/actions/install@ci/v1.7.2
        with:
          version: 0.14.0
        if: always()

      - name: Setup CI
        uses: input-output-hk/catalyst-forge/actions/setup@ci/v1.7.2

      - name: Get catalyst gateway unit test report
        uses: input-output-hk/catalyst-forge/actions/run@ci/v1.7.2
        if: always()
        continue-on-error: true
        with:
          command: run
          args: ./catalyst-gateway+build

      - name: Get schemathesis test report
        uses: input-output-hk/catalyst-forge/actions/run@ci/v1.7.2
        if: always()
        continue-on-error: true
        with:
          command: run
          args: ./catalyst-gateway/tests/schemathesis_tests+test-ci-schemathesis

      - name: Get flutter unit test report
        uses: input-output-hk/catalyst-forge/actions/run@ci/v1.7.2
        if: always()
        continue-on-error: true
        with:
          command: run
          args: ./catalyst_voices+test-unit-native

      - name: Get python api test report
        uses: input-output-hk/catalyst-forge/actions/run@ci/v1.7.2
        if: always()
        continue-on-error: true
        with:
          command: run
          args: ./catalyst-gateway/tests/api_tests+test

      - name: Collect and upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: "**/*${{ env.REPORT_EXT }}"
          if-no-files-found: error
          retention-days: 1

      - name: Collect and upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: "**/*${{ env.COVERAGE_EXT }}"
          if-no-files-found: error
          retention-days: 1

  generate-allure-report:
    name: Generate allure report
    runs-on: ubuntu-latest
    needs: generate-test-reports
    if: always() && needs.generate-test-reports.result == 'success'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: test-reports

      - name: Setup Allure report
        run: |
          mkdir -p ${{ env.ALLURE_REPORT_FOLDER }}
          shopt -s globstar
          cp **/*${{ env.REPORT_EXT }} ${{ env.ALLURE_REPORT_FOLDER }}
          ls ${{ env.ALLURE_REPORT_FOLDER }}

      - name: Checkout gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages-dir

      - name: Build Allure report
        uses: mgrybyk/allure-report-branch-action@v1
        id: allure
        with:
          report_id: "test-report"
          gh_pages: "gh-pages-dir"
          report_dir: ${{ env.ALLURE_REPORT_FOLDER }}

      - name: Git push to gh-pages
        uses: mgrybyk/git-commit-pull-push-action@v1
        with:
          repository: gh-pages-dir
          branch: gh-pages
          pull_args: --rebase -X ours

      - name: Comment PR with Allure report link
        if: ${{ always() && github.event_name == 'pull_request' && steps.allure.outputs.report_url }}
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            ${{ steps.allure.outputs.test_result_icon }} [Test Report](${{ steps.allure.outputs.report_url }}) | ${\color{lightgreen}Pass: ${{ steps.allure.outputs.test_result_passed }}/${{ steps.allure.outputs.test_result_total }}}$ | ${\color{red}Fail: ${{ steps.allure.outputs.test_result_failed }}/${{ steps.allure.outputs.test_result_total }}}$ |
          comment-tag: test_report

  generate-coverage-report:
    name: Generate coverage report
    runs-on: ubuntu-latest
    needs: generate-test-reports
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: coverage-reports

      - name: Collect coverage report
        run: |
          mkdir -p ${{ env.COVERAGE_REPORT_FOLDER }}
          shopt -s globstar
          cp **/*${{ env.COVERAGE_EXT }} ${{ env.COVERAGE_REPORT_FOLDER }}
          ls ${{ env.COVERAGE_REPORT_FOLDER }}

      - name: Normalize coverage report paths
        run: |
          sed -i -e 's/SF:\/root\/build/SF:catalyst-gateway/g' ${{ env.COVERAGE_REPORT_FOLDER }}/cat-gateway${{ env.COVERAGE_EXT }}
          sed -i -e 's/SF:/SF:catalyst-gateway\/tests\/api_tests\//g' ${{ env.COVERAGE_REPORT_FOLDER }}/api-tests${{ env.COVERAGE_EXT }}
          sed -i -e 's/SF:/SF:catalyst_voices/g' ${{ env.COVERAGE_REPORT_FOLDER }}/lcov${{ env.COVERAGE_EXT }}

      - name: Coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: coverallsapp/github-action@v2
        with:
          path-to-lcov: "${{ env.COVERAGE_REPORT_FOLDER }}/cat-gateway${{ env.COVERAGE_EXT }}"
          allow-empty: true
          debug: true
          flag-name: rust-unit-test
          parallel: true

      - name: Coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: coverallsapp/github-action@v2
        with:
          path-to-lcov: "${{ env.COVERAGE_REPORT_FOLDER }}/api-tests${{ env.COVERAGE_EXT }}"
          allow-empty: true
          debug: true
          flag-name: api-test
          parallel: true

      - name: Coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: coverallsapp/github-action@v2
        with:
          path-to-lcov: "${{ env.COVERAGE_REPORT_FOLDER }}/lcov${{ env.COVERAGE_EXT }}"
          allow-empty: true
          debug: true
          flag-name: flutter-test
          parallel: true

  upload-coverage-report:
    name: Upload coverage report
    needs: generate-coverage-report
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v2
        with:
          parallel-finished: true
          carryforward: "rust-unit-test,flutter-test,api-test"
